Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> translation_unit_or_empty
Rule 1     abstract_declarator_opt -> empty
Rule 2     abstract_declarator_opt -> abstract_declarator
Rule 3     assignment_expression_opt -> empty
Rule 4     assignment_expression_opt -> assignment_expression
Rule 5     block_item_list_opt -> empty
Rule 6     block_item_list_opt -> block_item_list
Rule 7     declaration_list_opt -> empty
Rule 8     declaration_list_opt -> declaration_list
Rule 9     declaration_specifiers_no_type_opt -> empty
Rule 10    declaration_specifiers_no_type_opt -> declaration_specifiers_no_type
Rule 11    designation_opt -> empty
Rule 12    designation_opt -> designation
Rule 13    expression_opt -> empty
Rule 14    expression_opt -> expression
Rule 15    id_init_declarator_list_opt -> empty
Rule 16    id_init_declarator_list_opt -> id_init_declarator_list
Rule 17    identifier_list_opt -> empty
Rule 18    identifier_list_opt -> identifier_list
Rule 19    init_declarator_list_opt -> empty
Rule 20    init_declarator_list_opt -> init_declarator_list
Rule 21    initializer_list_opt -> empty
Rule 22    initializer_list_opt -> initializer_list
Rule 23    parameter_type_list_opt -> empty
Rule 24    parameter_type_list_opt -> parameter_type_list
Rule 25    struct_declarator_list_opt -> empty
Rule 26    struct_declarator_list_opt -> struct_declarator_list
Rule 27    type_qualifier_list_opt -> empty
Rule 28    type_qualifier_list_opt -> type_qualifier_list
Rule 29    direct_id_declarator -> ID
Rule 30    direct_id_declarator -> LPAREN id_declarator RPAREN
Rule 31    direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
Rule 32    direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
Rule 33    direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
Rule 34    direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
Rule 35    direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN
Rule 36    direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN
Rule 37    direct_typeid_declarator -> TYPEID
Rule 38    direct_typeid_declarator -> LPAREN typeid_declarator RPAREN
Rule 39    direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
Rule 40    direct_typeid_declarator -> direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
Rule 41    direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
Rule 42    direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
Rule 43    direct_typeid_declarator -> direct_typeid_declarator LPAREN parameter_type_list RPAREN
Rule 44    direct_typeid_declarator -> direct_typeid_declarator LPAREN identifier_list_opt RPAREN
Rule 45    direct_typeid_noparen_declarator -> TYPEID
Rule 46    direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
Rule 47    direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
Rule 48    direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
Rule 49    direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
Rule 50    direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN parameter_type_list RPAREN
Rule 51    direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN identifier_list_opt RPAREN
Rule 52    id_declarator -> direct_id_declarator
Rule 53    id_declarator -> pointer direct_id_declarator
Rule 54    typeid_declarator -> direct_typeid_declarator
Rule 55    typeid_declarator -> pointer direct_typeid_declarator
Rule 56    typeid_noparen_declarator -> direct_typeid_noparen_declarator
Rule 57    typeid_noparen_declarator -> pointer direct_typeid_noparen_declarator
Rule 58    translation_unit_or_empty -> translation_unit
Rule 59    translation_unit_or_empty -> empty
Rule 60    translation_unit -> external_declaration
Rule 61    translation_unit -> translation_unit external_declaration
Rule 62    external_declaration -> function_definition
Rule 63    external_declaration -> declaration
Rule 64    external_declaration -> pp_directive
Rule 65    external_declaration -> pppragma_directive
Rule 66    external_declaration -> SEMI
Rule 67    pp_directive -> PPHASH
Rule 68    pppragma_directive -> PPPRAGMA
Rule 69    pppragma_directive -> PPPRAGMA PPPRAGMASTR
Rule 70    function_definition -> id_declarator declaration_list_opt compound_statement
Rule 71    function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement
Rule 72    statement -> labeled_statement
Rule 73    statement -> expression_statement
Rule 74    statement -> compound_statement
Rule 75    statement -> selection_statement
Rule 76    statement -> iteration_statement
Rule 77    statement -> jump_statement
Rule 78    statement -> pppragma_directive
Rule 79    pragmacomp_or_statement -> pppragma_directive statement
Rule 80    pragmacomp_or_statement -> statement
Rule 81    decl_body -> declaration_specifiers init_declarator_list_opt
Rule 82    decl_body -> declaration_specifiers_no_type id_init_declarator_list_opt
Rule 83    declaration -> decl_body SEMI
Rule 84    declaration_list -> declaration
Rule 85    declaration_list -> declaration_list declaration
Rule 86    declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt
Rule 87    declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt
Rule 88    declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt
Rule 89    declaration_specifiers -> declaration_specifiers type_qualifier
Rule 90    declaration_specifiers -> declaration_specifiers storage_class_specifier
Rule 91    declaration_specifiers -> declaration_specifiers function_specifier
Rule 92    declaration_specifiers -> declaration_specifiers type_specifier_no_typeid
Rule 93    declaration_specifiers -> type_specifier
Rule 94    declaration_specifiers -> declaration_specifiers_no_type type_specifier
Rule 95    storage_class_specifier -> AUTO
Rule 96    storage_class_specifier -> REGISTER
Rule 97    storage_class_specifier -> STATIC
Rule 98    storage_class_specifier -> EXTERN
Rule 99    storage_class_specifier -> TYPEDEF
Rule 100   function_specifier -> INLINE
Rule 101   type_specifier_no_typeid -> VOID
Rule 102   type_specifier_no_typeid -> _BOOL
Rule 103   type_specifier_no_typeid -> CHAR
Rule 104   type_specifier_no_typeid -> SHORT
Rule 105   type_specifier_no_typeid -> INT
Rule 106   type_specifier_no_typeid -> LONG
Rule 107   type_specifier_no_typeid -> FLOAT
Rule 108   type_specifier_no_typeid -> DOUBLE
Rule 109   type_specifier_no_typeid -> _COMPLEX
Rule 110   type_specifier_no_typeid -> SIGNED
Rule 111   type_specifier_no_typeid -> UNSIGNED
Rule 112   type_specifier_no_typeid -> __INT128
Rule 113   type_specifier -> typedef_name
Rule 114   type_specifier -> enum_specifier
Rule 115   type_specifier -> struct_or_union_specifier
Rule 116   type_specifier -> type_specifier_no_typeid
Rule 117   type_qualifier -> CONST
Rule 118   type_qualifier -> RESTRICT
Rule 119   type_qualifier -> VOLATILE
Rule 120   init_declarator_list -> init_declarator
Rule 121   init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 122   init_declarator -> declarator
Rule 123   init_declarator -> declarator EQUALS initializer
Rule 124   id_init_declarator_list -> id_init_declarator
Rule 125   id_init_declarator_list -> id_init_declarator_list COMMA init_declarator
Rule 126   id_init_declarator -> id_declarator
Rule 127   id_init_declarator -> id_declarator EQUALS initializer
Rule 128   specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid
Rule 129   specifier_qualifier_list -> specifier_qualifier_list type_qualifier
Rule 130   specifier_qualifier_list -> type_specifier
Rule 131   specifier_qualifier_list -> type_qualifier_list type_specifier
Rule 132   struct_or_union_specifier -> struct_or_union ID
Rule 133   struct_or_union_specifier -> struct_or_union TYPEID
Rule 134   struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close
Rule 135   struct_or_union_specifier -> struct_or_union brace_open brace_close
Rule 136   struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close
Rule 137   struct_or_union_specifier -> struct_or_union ID brace_open brace_close
Rule 138   struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close
Rule 139   struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close
Rule 140   struct_or_union -> STRUCT
Rule 141   struct_or_union -> UNION
Rule 142   struct_declaration_list -> struct_declaration
Rule 143   struct_declaration_list -> struct_declaration_list struct_declaration
Rule 144   struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI
Rule 145   struct_declaration -> SEMI
Rule 146   struct_declaration -> pppragma_directive
Rule 147   struct_declarator_list -> struct_declarator
Rule 148   struct_declarator_list -> struct_declarator_list COMMA struct_declarator
Rule 149   struct_declarator -> declarator
Rule 150   struct_declarator -> declarator COLON constant_expression
Rule 151   struct_declarator -> COLON constant_expression
Rule 152   enum_specifier -> ENUM ID
Rule 153   enum_specifier -> ENUM TYPEID
Rule 154   enum_specifier -> ENUM brace_open enumerator_list brace_close
Rule 155   enum_specifier -> ENUM ID brace_open enumerator_list brace_close
Rule 156   enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close
Rule 157   enumerator_list -> enumerator
Rule 158   enumerator_list -> enumerator_list COMMA
Rule 159   enumerator_list -> enumerator_list COMMA enumerator
Rule 160   enumerator -> ID
Rule 161   enumerator -> ID EQUALS constant_expression
Rule 162   declarator -> id_declarator
Rule 163   declarator -> typeid_declarator
Rule 164   pointer -> TIMES type_qualifier_list_opt
Rule 165   pointer -> TIMES type_qualifier_list_opt pointer
Rule 166   type_qualifier_list -> type_qualifier
Rule 167   type_qualifier_list -> type_qualifier_list type_qualifier
Rule 168   parameter_type_list -> parameter_list
Rule 169   parameter_type_list -> parameter_list COMMA ELLIPSIS
Rule 170   parameter_list -> parameter_declaration
Rule 171   parameter_list -> parameter_list COMMA parameter_declaration
Rule 172   parameter_declaration -> declaration_specifiers id_declarator
Rule 173   parameter_declaration -> declaration_specifiers typeid_noparen_declarator
Rule 174   parameter_declaration -> declaration_specifiers abstract_declarator_opt
Rule 175   identifier_list -> identifier
Rule 176   identifier_list -> identifier_list COMMA identifier
Rule 177   initializer -> assignment_expression
Rule 178   initializer -> brace_open initializer_list_opt brace_close
Rule 179   initializer -> brace_open initializer_list COMMA brace_close
Rule 180   initializer_list -> designation_opt initializer
Rule 181   initializer_list -> initializer_list COMMA designation_opt initializer
Rule 182   designation -> designator_list EQUALS
Rule 183   designator_list -> designator
Rule 184   designator_list -> designator_list designator
Rule 185   designator -> LBRACKET constant_expression RBRACKET
Rule 186   designator -> PERIOD identifier
Rule 187   type_name -> specifier_qualifier_list abstract_declarator_opt
Rule 188   abstract_declarator -> pointer
Rule 189   abstract_declarator -> pointer direct_abstract_declarator
Rule 190   abstract_declarator -> direct_abstract_declarator
Rule 191   direct_abstract_declarator -> LPAREN abstract_declarator RPAREN
Rule 192   direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
Rule 193   direct_abstract_declarator -> LBRACKET assignment_expression_opt RBRACKET
Rule 194   direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET
Rule 195   direct_abstract_declarator -> LBRACKET TIMES RBRACKET
Rule 196   direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
Rule 197   direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN
Rule 198   block_item -> declaration
Rule 199   block_item -> statement
Rule 200   block_item_list -> block_item
Rule 201   block_item_list -> block_item_list block_item
Rule 202   compound_statement -> brace_open block_item_list_opt brace_close
Rule 203   labeled_statement -> ID COLON pragmacomp_or_statement
Rule 204   labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement
Rule 205   labeled_statement -> DEFAULT COLON pragmacomp_or_statement
Rule 206   selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement
Rule 207   selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
Rule 208   selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement
Rule 209   iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement
Rule 210   iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI
Rule 211   iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
Rule 212   iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
Rule 213   jump_statement -> GOTO ID SEMI
Rule 214   jump_statement -> BREAK SEMI
Rule 215   jump_statement -> CONTINUE SEMI
Rule 216   jump_statement -> RETURN expression SEMI
Rule 217   jump_statement -> RETURN SEMI
Rule 218   expression_statement -> expression_opt SEMI
Rule 219   expression -> assignment_expression
Rule 220   expression -> expression COMMA assignment_expression
Rule 221   typedef_name -> TYPEID
Rule 222   assignment_expression -> conditional_expression
Rule 223   assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 224   assignment_operator -> EQUALS
Rule 225   assignment_operator -> XOREQUAL
Rule 226   assignment_operator -> TIMESEQUAL
Rule 227   assignment_operator -> DIVEQUAL
Rule 228   assignment_operator -> MODEQUAL
Rule 229   assignment_operator -> PLUSEQUAL
Rule 230   assignment_operator -> MINUSEQUAL
Rule 231   assignment_operator -> LSHIFTEQUAL
Rule 232   assignment_operator -> RSHIFTEQUAL
Rule 233   assignment_operator -> ANDEQUAL
Rule 234   assignment_operator -> OREQUAL
Rule 235   constant_expression -> conditional_expression
Rule 236   conditional_expression -> binary_expression
Rule 237   conditional_expression -> binary_expression CONDOP expression COLON conditional_expression
Rule 238   binary_expression -> cast_expression
Rule 239   binary_expression -> binary_expression TIMES binary_expression
Rule 240   binary_expression -> binary_expression DIVIDE binary_expression
Rule 241   binary_expression -> binary_expression MOD binary_expression
Rule 242   binary_expression -> binary_expression PLUS binary_expression
Rule 243   binary_expression -> binary_expression MINUS binary_expression
Rule 244   binary_expression -> binary_expression RSHIFT binary_expression
Rule 245   binary_expression -> binary_expression LSHIFT binary_expression
Rule 246   binary_expression -> binary_expression LT binary_expression
Rule 247   binary_expression -> binary_expression LE binary_expression
Rule 248   binary_expression -> binary_expression GE binary_expression
Rule 249   binary_expression -> binary_expression GT binary_expression
Rule 250   binary_expression -> binary_expression EQ binary_expression
Rule 251   binary_expression -> binary_expression NE binary_expression
Rule 252   binary_expression -> binary_expression AND binary_expression
Rule 253   binary_expression -> binary_expression OR binary_expression
Rule 254   binary_expression -> binary_expression XOR binary_expression
Rule 255   binary_expression -> binary_expression LAND binary_expression
Rule 256   binary_expression -> binary_expression LOR binary_expression
Rule 257   cast_expression -> unary_expression
Rule 258   cast_expression -> LPAREN type_name RPAREN cast_expression
Rule 259   unary_expression -> postfix_expression
Rule 260   unary_expression -> PLUSPLUS unary_expression
Rule 261   unary_expression -> MINUSMINUS unary_expression
Rule 262   unary_expression -> unary_operator cast_expression
Rule 263   unary_expression -> SIZEOF unary_expression
Rule 264   unary_expression -> SIZEOF LPAREN type_name RPAREN
Rule 265   unary_operator -> AND
Rule 266   unary_operator -> TIMES
Rule 267   unary_operator -> PLUS
Rule 268   unary_operator -> MINUS
Rule 269   unary_operator -> NOT
Rule 270   unary_operator -> LNOT
Rule 271   postfix_expression -> primary_expression
Rule 272   postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 273   postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN
Rule 274   postfix_expression -> postfix_expression LPAREN RPAREN
Rule 275   postfix_expression -> postfix_expression PERIOD ID
Rule 276   postfix_expression -> postfix_expression PERIOD TYPEID
Rule 277   postfix_expression -> postfix_expression ARROW ID
Rule 278   postfix_expression -> postfix_expression ARROW TYPEID
Rule 279   postfix_expression -> postfix_expression PLUSPLUS
Rule 280   postfix_expression -> postfix_expression MINUSMINUS
Rule 281   postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close
Rule 282   postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
Rule 283   primary_expression -> identifier
Rule 284   primary_expression -> constant
Rule 285   primary_expression -> unified_string_literal
Rule 286   primary_expression -> unified_wstring_literal
Rule 287   primary_expression -> LPAREN expression RPAREN
Rule 288   primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
Rule 289   offsetof_member_designator -> identifier
Rule 290   offsetof_member_designator -> offsetof_member_designator PERIOD identifier
Rule 291   offsetof_member_designator -> offsetof_member_designator LBRACKET expression RBRACKET
Rule 292   argument_expression_list -> assignment_expression
Rule 293   argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 294   identifier -> ID
Rule 295   constant -> INT_CONST_DEC
Rule 296   constant -> INT_CONST_OCT
Rule 297   constant -> INT_CONST_HEX
Rule 298   constant -> INT_CONST_BIN
Rule 299   constant -> FLOAT_CONST
Rule 300   constant -> HEX_FLOAT_CONST
Rule 301   constant -> CHAR_CONST
Rule 302   constant -> WCHAR_CONST
Rule 303   unified_string_literal -> STRING_LITERAL
Rule 304   unified_string_literal -> unified_string_literal STRING_LITERAL
Rule 305   unified_wstring_literal -> WSTRING_LITERAL
Rule 306   unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL
Rule 307   brace_open -> LBRACE
Rule 308   brace_close -> RBRACE
Rule 309   empty -> <empty>

Terminals, with rules where they appear

AND                  : 252 265
ANDEQUAL             : 233
ARROW                : 277 278
AUTO                 : 95
BREAK                : 214
CASE                 : 204
CHAR                 : 103
CHAR_CONST           : 301
COLON                : 150 151 203 204 205 237
COMMA                : 121 125 148 158 159 169 171 176 179 181 220 282 288 293
CONDOP               : 237
CONST                : 117
CONTINUE             : 215
DEFAULT              : 205
DIVEQUAL             : 227
DIVIDE               : 240
DO                   : 210
DOUBLE               : 108
ELLIPSIS             : 169
ELSE                 : 207
ENUM                 : 152 153 154 155 156
EQ                   : 250
EQUALS               : 123 127 161 182 224
EXTERN               : 98
FLOAT                : 107
FLOAT_CONST          : 299
FOR                  : 211 212
GE                   : 248
GOTO                 : 213
GT                   : 249
HEX_FLOAT_CONST      : 300
ID                   : 29 132 136 137 152 155 160 161 203 213 275 277 294
IF                   : 206 207
INLINE               : 100
INT                  : 105
INT_CONST_BIN        : 298
INT_CONST_DEC        : 295
INT_CONST_HEX        : 297
INT_CONST_OCT        : 296
LAND                 : 255
LBRACE               : 307
LBRACKET             : 31 32 33 34 39 40 41 42 46 47 48 49 185 192 193 194 195 272 291
LE                   : 247
LNOT                 : 270
LONG                 : 106
LOR                  : 256
LPAREN               : 30 35 36 38 43 44 50 51 191 196 197 206 207 208 209 210 211 212 258 264 273 274 281 282 287 288
LSHIFT               : 245
LSHIFTEQUAL          : 231
LT                   : 246
MINUS                : 243 268
MINUSEQUAL           : 230
MINUSMINUS           : 261 280
MOD                  : 241
MODEQUAL             : 228
NE                   : 251
NOT                  : 269
OFFSETOF             : 288
OR                   : 253
OREQUAL              : 234
PERIOD               : 186 275 276 290
PLUS                 : 242 267
PLUSEQUAL            : 229
PLUSPLUS             : 260 279
PPHASH               : 67
PPPRAGMA             : 68 69
PPPRAGMASTR          : 69
RBRACE               : 308
RBRACKET             : 31 32 33 34 39 40 41 42 46 47 48 49 185 192 193 194 195 272 291
REGISTER             : 96
RESTRICT             : 118
RETURN               : 216 217
RPAREN               : 30 35 36 38 43 44 50 51 191 196 197 206 207 208 209 210 211 212 258 264 273 274 281 282 287 288
RSHIFT               : 244
RSHIFTEQUAL          : 232
SEMI                 : 66 83 144 145 210 211 211 212 213 214 215 216 217 218
SHORT                : 104
SIGNED               : 110
SIZEOF               : 263 264
STATIC               : 32 33 40 41 47 48 97
STRING_LITERAL       : 303 304
STRUCT               : 140
SWITCH               : 208
TIMES                : 34 42 49 164 165 194 195 239 266
TIMESEQUAL           : 226
TYPEDEF              : 99
TYPEID               : 37 45 133 138 139 153 156 221 276 278
UNION                : 141
UNSIGNED             : 111
VOID                 : 101
VOLATILE             : 119
WCHAR_CONST          : 302
WHILE                : 209 210
WSTRING_LITERAL      : 305 306
XOR                  : 254
XOREQUAL             : 225
_BOOL                : 102
_COMPLEX             : 109
__INT128             : 112
error                : 

Nonterminals, with rules where they appear

abstract_declarator  : 2 191
abstract_declarator_opt : 174 187
argument_expression_list : 273 293
assignment_expression : 4 32 33 40 41 47 48 177 219 220 223 292 293
assignment_expression_opt : 31 39 46 192 193
assignment_operator  : 223
binary_expression    : 236 237 239 239 240 240 241 241 242 242 243 243 244 244 245 245 246 246 247 247 248 248 249 249 250 250 251 251 252 252 253 253 254 254 255 255 256 256
block_item           : 200 201
block_item_list      : 6 201
block_item_list_opt  : 202
brace_close          : 134 135 136 137 138 139 154 155 156 178 179 202 281 282
brace_open           : 134 135 136 137 138 139 154 155 156 178 179 202 281 282
cast_expression      : 238 258 262
compound_statement   : 70 71 74
conditional_expression : 222 235 237
constant             : 284
constant_expression  : 150 151 161 185 204
decl_body            : 83
declaration          : 63 84 85 198 212
declaration_list     : 8 85
declaration_list_opt : 70 71
declaration_specifiers : 71 81 89 90 91 92 172 173 174
declaration_specifiers_no_type : 10 82 94
declaration_specifiers_no_type_opt : 86 87 88
declarator           : 122 123 149 150
designation          : 12
designation_opt      : 180 181
designator           : 183 184
designator_list      : 182 184
direct_abstract_declarator : 189 190 192 194 196
direct_id_declarator : 31 32 33 34 35 36 52 53
direct_typeid_declarator : 39 40 41 42 43 44 54 55
direct_typeid_noparen_declarator : 46 47 48 49 50 51 56 57
empty                : 1 3 5 7 9 11 13 15 17 19 21 23 25 27 59
enum_specifier       : 114
enumerator           : 157 159
enumerator_list      : 154 155 156 158 159
expression           : 14 206 207 208 209 210 216 220 237 272 287 291
expression_opt       : 211 211 211 212 212 218
expression_statement : 73
external_declaration : 60 61
function_definition  : 62
function_specifier   : 88 91
id_declarator        : 30 70 71 126 127 162 172
id_init_declarator   : 124
id_init_declarator_list : 16 125
id_init_declarator_list_opt : 82
identifier           : 175 176 186 283 289 290
identifier_list      : 18 176
identifier_list_opt  : 36 44 51
init_declarator      : 120 121 125
init_declarator_list : 20 121
init_declarator_list_opt : 81
initializer          : 123 127 180 181
initializer_list     : 22 179 181 281 282
initializer_list_opt : 178
iteration_statement  : 76
jump_statement       : 77
labeled_statement    : 72
offsetof_member_designator : 288 290 291
parameter_declaration : 170 171
parameter_list       : 168 169 171
parameter_type_list  : 24 35 43 50
parameter_type_list_opt : 196 197
pointer              : 53 55 57 165 188 189
postfix_expression   : 259 272 273 274 275 276 277 278 279 280
pp_directive         : 64
pppragma_directive   : 65 78 79 146
pragmacomp_or_statement : 203 204 205 206 207 208 209 210 211 212
primary_expression   : 271
selection_statement  : 75
specifier_qualifier_list : 128 129 144 187
statement            : 79 80 199 207
storage_class_specifier : 87 90
struct_declaration   : 142 143
struct_declaration_list : 134 136 138 143
struct_declarator    : 147 148
struct_declarator_list : 26 148
struct_declarator_list_opt : 144
struct_or_union      : 132 133 134 135 136 137 138 139
struct_or_union_specifier : 115
translation_unit     : 58 61
translation_unit_or_empty : 0
type_name            : 258 264 281 282 288
type_qualifier       : 86 89 129 166 167
type_qualifier_list  : 28 33 41 48 131 167
type_qualifier_list_opt : 31 32 34 39 40 42 46 47 49 164 165
type_specifier       : 93 94 130 131
type_specifier_no_typeid : 92 116 128
typedef_name         : 113
typeid_declarator    : 38 163
typeid_noparen_declarator : 173
unary_expression     : 223 257 260 261 263
unary_operator       : 262
unified_string_literal : 285 304
unified_wstring_literal : 286 306

Parsing method: LALR

state 0

    (0) S' -> . translation_unit_or_empty
    (58) translation_unit_or_empty -> . translation_unit
    (59) translation_unit_or_empty -> . empty
    (60) translation_unit -> . external_declaration
    (61) translation_unit -> . translation_unit external_declaration
    (309) empty -> .
    (62) external_declaration -> . function_definition
    (63) external_declaration -> . declaration
    (64) external_declaration -> . pp_directive
    (65) external_declaration -> . pppragma_directive
    (66) external_declaration -> . SEMI
    (70) function_definition -> . id_declarator declaration_list_opt compound_statement
    (71) function_definition -> . declaration_specifiers id_declarator declaration_list_opt compound_statement
    (83) declaration -> . decl_body SEMI
    (67) pp_directive -> . PPHASH
    (68) pppragma_directive -> . PPPRAGMA
    (69) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (52) id_declarator -> . direct_id_declarator
    (53) id_declarator -> . pointer direct_id_declarator
    (89) declaration_specifiers -> . declaration_specifiers type_qualifier
    (90) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (91) declaration_specifiers -> . declaration_specifiers function_specifier
    (92) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (93) declaration_specifiers -> . type_specifier
    (94) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (81) decl_body -> . declaration_specifiers init_declarator_list_opt
    (82) decl_body -> . declaration_specifiers_no_type id_init_declarator_list_opt
    (29) direct_id_declarator -> . ID
    (30) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (31) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (35) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (36) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (164) pointer -> . TIMES type_qualifier_list_opt
    (165) pointer -> . TIMES type_qualifier_list_opt pointer
    (113) type_specifier -> . typedef_name
    (114) type_specifier -> . enum_specifier
    (115) type_specifier -> . struct_or_union_specifier
    (116) type_specifier -> . type_specifier_no_typeid
    (86) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (87) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (88) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (221) typedef_name -> . TYPEID
    (152) enum_specifier -> . ENUM ID
    (153) enum_specifier -> . ENUM TYPEID
    (154) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (155) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (156) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (132) struct_or_union_specifier -> . struct_or_union ID
    (133) struct_or_union_specifier -> . struct_or_union TYPEID
    (134) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (135) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (136) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (137) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (138) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (139) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (101) type_specifier_no_typeid -> . VOID
    (102) type_specifier_no_typeid -> . _BOOL
    (103) type_specifier_no_typeid -> . CHAR
    (104) type_specifier_no_typeid -> . SHORT
    (105) type_specifier_no_typeid -> . INT
    (106) type_specifier_no_typeid -> . LONG
    (107) type_specifier_no_typeid -> . FLOAT
    (108) type_specifier_no_typeid -> . DOUBLE
    (109) type_specifier_no_typeid -> . _COMPLEX
    (110) type_specifier_no_typeid -> . SIGNED
    (111) type_specifier_no_typeid -> . UNSIGNED
    (112) type_specifier_no_typeid -> . __INT128
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE
    (95) storage_class_specifier -> . AUTO
    (96) storage_class_specifier -> . REGISTER
    (97) storage_class_specifier -> . STATIC
    (98) storage_class_specifier -> . EXTERN
    (99) storage_class_specifier -> . TYPEDEF
    (100) function_specifier -> . INLINE
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

    $end            reduce using rule 309 (empty -> .)
    SEMI            shift and go to state 9
    PPHASH          shift and go to state 13
    PPPRAGMA        shift and go to state 14
    ID              shift and go to state 23
    LPAREN          shift and go to state 24
    TIMES           shift and go to state 26
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    VOID            shift and go to state 33
    _BOOL           shift and go to state 34
    CHAR            shift and go to state 35
    SHORT           shift and go to state 36
    INT             shift and go to state 37
    LONG            shift and go to state 38
    FLOAT           shift and go to state 39
    DOUBLE          shift and go to state 40
    _COMPLEX        shift and go to state 41
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 43
    __INT128        shift and go to state 44
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47
    AUTO            shift and go to state 48
    REGISTER        shift and go to state 49
    STATIC          shift and go to state 25
    EXTERN          shift and go to state 50
    TYPEDEF         shift and go to state 51
    INLINE          shift and go to state 52
    STRUCT          shift and go to state 53
    UNION           shift and go to state 54

    translation_unit_or_empty      shift and go to state 1
    translation_unit               shift and go to state 2
    empty                          shift and go to state 3
    external_declaration           shift and go to state 4
    function_definition            shift and go to state 5
    declaration                    shift and go to state 6
    pp_directive                   shift and go to state 7
    pppragma_directive             shift and go to state 8
    id_declarator                  shift and go to state 10
    declaration_specifiers         shift and go to state 11
    decl_body                      shift and go to state 12
    direct_id_declarator           shift and go to state 15
    pointer                        shift and go to state 16
    type_qualifier                 shift and go to state 17
    storage_class_specifier        shift and go to state 18
    function_specifier             shift and go to state 19
    type_specifier_no_typeid       shift and go to state 20
    type_specifier                 shift and go to state 21
    declaration_specifiers_no_type shift and go to state 22
    typedef_name                   shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union_specifier      shift and go to state 29
    struct_or_union                shift and go to state 32

state 1

    (0) S' -> translation_unit_or_empty .



state 2

    (58) translation_unit_or_empty -> translation_unit .
    (61) translation_unit -> translation_unit . external_declaration
    (62) external_declaration -> . function_definition
    (63) external_declaration -> . declaration
    (64) external_declaration -> . pp_directive
    (65) external_declaration -> . pppragma_directive
    (66) external_declaration -> . SEMI
    (70) function_definition -> . id_declarator declaration_list_opt compound_statement
    (71) function_definition -> . declaration_specifiers id_declarator declaration_list_opt compound_statement
    (83) declaration -> . decl_body SEMI
    (67) pp_directive -> . PPHASH
    (68) pppragma_directive -> . PPPRAGMA
    (69) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (52) id_declarator -> . direct_id_declarator
    (53) id_declarator -> . pointer direct_id_declarator
    (89) declaration_specifiers -> . declaration_specifiers type_qualifier
    (90) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (91) declaration_specifiers -> . declaration_specifiers function_specifier
    (92) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (93) declaration_specifiers -> . type_specifier
    (94) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (81) decl_body -> . declaration_specifiers init_declarator_list_opt
    (82) decl_body -> . declaration_specifiers_no_type id_init_declarator_list_opt
    (29) direct_id_declarator -> . ID
    (30) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (31) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (35) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (36) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (164) pointer -> . TIMES type_qualifier_list_opt
    (165) pointer -> . TIMES type_qualifier_list_opt pointer
    (113) type_specifier -> . typedef_name
    (114) type_specifier -> . enum_specifier
    (115) type_specifier -> . struct_or_union_specifier
    (116) type_specifier -> . type_specifier_no_typeid
    (86) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (87) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (88) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (221) typedef_name -> . TYPEID
    (152) enum_specifier -> . ENUM ID
    (153) enum_specifier -> . ENUM TYPEID
    (154) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (155) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (156) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (132) struct_or_union_specifier -> . struct_or_union ID
    (133) struct_or_union_specifier -> . struct_or_union TYPEID
    (134) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (135) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (136) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (137) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (138) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (139) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (101) type_specifier_no_typeid -> . VOID
    (102) type_specifier_no_typeid -> . _BOOL
    (103) type_specifier_no_typeid -> . CHAR
    (104) type_specifier_no_typeid -> . SHORT
    (105) type_specifier_no_typeid -> . INT
    (106) type_specifier_no_typeid -> . LONG
    (107) type_specifier_no_typeid -> . FLOAT
    (108) type_specifier_no_typeid -> . DOUBLE
    (109) type_specifier_no_typeid -> . _COMPLEX
    (110) type_specifier_no_typeid -> . SIGNED
    (111) type_specifier_no_typeid -> . UNSIGNED
    (112) type_specifier_no_typeid -> . __INT128
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE
    (95) storage_class_specifier -> . AUTO
    (96) storage_class_specifier -> . REGISTER
    (97) storage_class_specifier -> . STATIC
    (98) storage_class_specifier -> . EXTERN
    (99) storage_class_specifier -> . TYPEDEF
    (100) function_specifier -> . INLINE
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

    $end            reduce using rule 58 (translation_unit_or_empty -> translation_unit .)
    SEMI            shift and go to state 9
    PPHASH          shift and go to state 13
    PPPRAGMA        shift and go to state 14
    ID              shift and go to state 23
    LPAREN          shift and go to state 24
    TIMES           shift and go to state 26
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    VOID            shift and go to state 33
    _BOOL           shift and go to state 34
    CHAR            shift and go to state 35
    SHORT           shift and go to state 36
    INT             shift and go to state 37
    LONG            shift and go to state 38
    FLOAT           shift and go to state 39
    DOUBLE          shift and go to state 40
    _COMPLEX        shift and go to state 41
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 43
    __INT128        shift and go to state 44
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47
    AUTO            shift and go to state 48
    REGISTER        shift and go to state 49
    STATIC          shift and go to state 25
    EXTERN          shift and go to state 50
    TYPEDEF         shift and go to state 51
    INLINE          shift and go to state 52
    STRUCT          shift and go to state 53
    UNION           shift and go to state 54

    external_declaration           shift and go to state 55
    function_definition            shift and go to state 5
    declaration                    shift and go to state 6
    pp_directive                   shift and go to state 7
    pppragma_directive             shift and go to state 8
    id_declarator                  shift and go to state 10
    declaration_specifiers         shift and go to state 11
    decl_body                      shift and go to state 12
    direct_id_declarator           shift and go to state 15
    pointer                        shift and go to state 16
    type_qualifier                 shift and go to state 17
    storage_class_specifier        shift and go to state 18
    function_specifier             shift and go to state 19
    type_specifier_no_typeid       shift and go to state 20
    type_specifier                 shift and go to state 21
    declaration_specifiers_no_type shift and go to state 22
    typedef_name                   shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union_specifier      shift and go to state 29
    struct_or_union                shift and go to state 32

state 3

    (59) translation_unit_or_empty -> empty .

    $end            reduce using rule 59 (translation_unit_or_empty -> empty .)


state 4

    (60) translation_unit -> external_declaration .

    SEMI            reduce using rule 60 (translation_unit -> external_declaration .)
    PPHASH          reduce using rule 60 (translation_unit -> external_declaration .)
    PPPRAGMA        reduce using rule 60 (translation_unit -> external_declaration .)
    ID              reduce using rule 60 (translation_unit -> external_declaration .)
    LPAREN          reduce using rule 60 (translation_unit -> external_declaration .)
    TIMES           reduce using rule 60 (translation_unit -> external_declaration .)
    TYPEID          reduce using rule 60 (translation_unit -> external_declaration .)
    ENUM            reduce using rule 60 (translation_unit -> external_declaration .)
    VOID            reduce using rule 60 (translation_unit -> external_declaration .)
    _BOOL           reduce using rule 60 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 60 (translation_unit -> external_declaration .)
    SHORT           reduce using rule 60 (translation_unit -> external_declaration .)
    INT             reduce using rule 60 (translation_unit -> external_declaration .)
    LONG            reduce using rule 60 (translation_unit -> external_declaration .)
    FLOAT           reduce using rule 60 (translation_unit -> external_declaration .)
    DOUBLE          reduce using rule 60 (translation_unit -> external_declaration .)
    _COMPLEX        reduce using rule 60 (translation_unit -> external_declaration .)
    SIGNED          reduce using rule 60 (translation_unit -> external_declaration .)
    UNSIGNED        reduce using rule 60 (translation_unit -> external_declaration .)
    __INT128        reduce using rule 60 (translation_unit -> external_declaration .)
    CONST           reduce using rule 60 (translation_unit -> external_declaration .)
    RESTRICT        reduce using rule 60 (translation_unit -> external_declaration .)
    VOLATILE        reduce using rule 60 (translation_unit -> external_declaration .)
    AUTO            reduce using rule 60 (translation_unit -> external_declaration .)
    REGISTER        reduce using rule 60 (translation_unit -> external_declaration .)
    STATIC          reduce using rule 60 (translation_unit -> external_declaration .)
    EXTERN          reduce using rule 60 (translation_unit -> external_declaration .)
    TYPEDEF         reduce using rule 60 (translation_unit -> external_declaration .)
    INLINE          reduce using rule 60 (translation_unit -> external_declaration .)
    STRUCT          reduce using rule 60 (translation_unit -> external_declaration .)
    UNION           reduce using rule 60 (translation_unit -> external_declaration .)
    $end            reduce using rule 60 (translation_unit -> external_declaration .)


state 5

    (62) external_declaration -> function_definition .

    SEMI            reduce using rule 62 (external_declaration -> function_definition .)
    PPHASH          reduce using rule 62 (external_declaration -> function_definition .)
    PPPRAGMA        reduce using rule 62 (external_declaration -> function_definition .)
    ID              reduce using rule 62 (external_declaration -> function_definition .)
    LPAREN          reduce using rule 62 (external_declaration -> function_definition .)
    TIMES           reduce using rule 62 (external_declaration -> function_definition .)
    TYPEID          reduce using rule 62 (external_declaration -> function_definition .)
    ENUM            reduce using rule 62 (external_declaration -> function_definition .)
    VOID            reduce using rule 62 (external_declaration -> function_definition .)
    _BOOL           reduce using rule 62 (external_declaration -> function_definition .)
    CHAR            reduce using rule 62 (external_declaration -> function_definition .)
    SHORT           reduce using rule 62 (external_declaration -> function_definition .)
    INT             reduce using rule 62 (external_declaration -> function_definition .)
    LONG            reduce using rule 62 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 62 (external_declaration -> function_definition .)
    DOUBLE          reduce using rule 62 (external_declaration -> function_definition .)
    _COMPLEX        reduce using rule 62 (external_declaration -> function_definition .)
    SIGNED          reduce using rule 62 (external_declaration -> function_definition .)
    UNSIGNED        reduce using rule 62 (external_declaration -> function_definition .)
    __INT128        reduce using rule 62 (external_declaration -> function_definition .)
    CONST           reduce using rule 62 (external_declaration -> function_definition .)
    RESTRICT        reduce using rule 62 (external_declaration -> function_definition .)
    VOLATILE        reduce using rule 62 (external_declaration -> function_definition .)
    AUTO            reduce using rule 62 (external_declaration -> function_definition .)
    REGISTER        reduce using rule 62 (external_declaration -> function_definition .)
    STATIC          reduce using rule 62 (external_declaration -> function_definition .)
    EXTERN          reduce using rule 62 (external_declaration -> function_definition .)
    TYPEDEF         reduce using rule 62 (external_declaration -> function_definition .)
    INLINE          reduce using rule 62 (external_declaration -> function_definition .)
    STRUCT          reduce using rule 62 (external_declaration -> function_definition .)
    UNION           reduce using rule 62 (external_declaration -> function_definition .)
    $end            reduce using rule 62 (external_declaration -> function_definition .)


state 6

    (63) external_declaration -> declaration .

    SEMI            reduce using rule 63 (external_declaration -> declaration .)
    PPHASH          reduce using rule 63 (external_declaration -> declaration .)
    PPPRAGMA        reduce using rule 63 (external_declaration -> declaration .)
    ID              reduce using rule 63 (external_declaration -> declaration .)
    LPAREN          reduce using rule 63 (external_declaration -> declaration .)
    TIMES           reduce using rule 63 (external_declaration -> declaration .)
    TYPEID          reduce using rule 63 (external_declaration -> declaration .)
    ENUM            reduce using rule 63 (external_declaration -> declaration .)
    VOID            reduce using rule 63 (external_declaration -> declaration .)
    _BOOL           reduce using rule 63 (external_declaration -> declaration .)
    CHAR            reduce using rule 63 (external_declaration -> declaration .)
    SHORT           reduce using rule 63 (external_declaration -> declaration .)
    INT             reduce using rule 63 (external_declaration -> declaration .)
    LONG            reduce using rule 63 (external_declaration -> declaration .)
    FLOAT           reduce using rule 63 (external_declaration -> declaration .)
    DOUBLE          reduce using rule 63 (external_declaration -> declaration .)
    _COMPLEX        reduce using rule 63 (external_declaration -> declaration .)
    SIGNED          reduce using rule 63 (external_declaration -> declaration .)
    UNSIGNED        reduce using rule 63 (external_declaration -> declaration .)
    __INT128        reduce using rule 63 (external_declaration -> declaration .)
    CONST           reduce using rule 63 (external_declaration -> declaration .)
    RESTRICT        reduce using rule 63 (external_declaration -> declaration .)
    VOLATILE        reduce using rule 63 (external_declaration -> declaration .)
    AUTO            reduce using rule 63 (external_declaration -> declaration .)
    REGISTER        reduce using rule 63 (external_declaration -> declaration .)
    STATIC          reduce using rule 63 (external_declaration -> declaration .)
    EXTERN          reduce using rule 63 (external_declaration -> declaration .)
    TYPEDEF         reduce using rule 63 (external_declaration -> declaration .)
    INLINE          reduce using rule 63 (external_declaration -> declaration .)
    STRUCT          reduce using rule 63 (external_declaration -> declaration .)
    UNION           reduce using rule 63 (external_declaration -> declaration .)
    $end            reduce using rule 63 (external_declaration -> declaration .)


state 7

    (64) external_declaration -> pp_directive .

    SEMI            reduce using rule 64 (external_declaration -> pp_directive .)
    PPHASH          reduce using rule 64 (external_declaration -> pp_directive .)
    PPPRAGMA        reduce using rule 64 (external_declaration -> pp_directive .)
    ID              reduce using rule 64 (external_declaration -> pp_directive .)
    LPAREN          reduce using rule 64 (external_declaration -> pp_directive .)
    TIMES           reduce using rule 64 (external_declaration -> pp_directive .)
    TYPEID          reduce using rule 64 (external_declaration -> pp_directive .)
    ENUM            reduce using rule 64 (external_declaration -> pp_directive .)
    VOID            reduce using rule 64 (external_declaration -> pp_directive .)
    _BOOL           reduce using rule 64 (external_declaration -> pp_directive .)
    CHAR            reduce using rule 64 (external_declaration -> pp_directive .)
    SHORT           reduce using rule 64 (external_declaration -> pp_directive .)
    INT             reduce using rule 64 (external_declaration -> pp_directive .)
    LONG            reduce using rule 64 (external_declaration -> pp_directive .)
    FLOAT           reduce using rule 64 (external_declaration -> pp_directive .)
    DOUBLE          reduce using rule 64 (external_declaration -> pp_directive .)
    _COMPLEX        reduce using rule 64 (external_declaration -> pp_directive .)
    SIGNED          reduce using rule 64 (external_declaration -> pp_directive .)
    UNSIGNED        reduce using rule 64 (external_declaration -> pp_directive .)
    __INT128        reduce using rule 64 (external_declaration -> pp_directive .)
    CONST           reduce using rule 64 (external_declaration -> pp_directive .)
    RESTRICT        reduce using rule 64 (external_declaration -> pp_directive .)
    VOLATILE        reduce using rule 64 (external_declaration -> pp_directive .)
    AUTO            reduce using rule 64 (external_declaration -> pp_directive .)
    REGISTER        reduce using rule 64 (external_declaration -> pp_directive .)
    STATIC          reduce using rule 64 (external_declaration -> pp_directive .)
    EXTERN          reduce using rule 64 (external_declaration -> pp_directive .)
    TYPEDEF         reduce using rule 64 (external_declaration -> pp_directive .)
    INLINE          reduce using rule 64 (external_declaration -> pp_directive .)
    STRUCT          reduce using rule 64 (external_declaration -> pp_directive .)
    UNION           reduce using rule 64 (external_declaration -> pp_directive .)
    $end            reduce using rule 64 (external_declaration -> pp_directive .)


state 8

    (65) external_declaration -> pppragma_directive .

    SEMI            reduce using rule 65 (external_declaration -> pppragma_directive .)
    PPHASH          reduce using rule 65 (external_declaration -> pppragma_directive .)
    PPPRAGMA        reduce using rule 65 (external_declaration -> pppragma_directive .)
    ID              reduce using rule 65 (external_declaration -> pppragma_directive .)
    LPAREN          reduce using rule 65 (external_declaration -> pppragma_directive .)
    TIMES           reduce using rule 65 (external_declaration -> pppragma_directive .)
    TYPEID          reduce using rule 65 (external_declaration -> pppragma_directive .)
    ENUM            reduce using rule 65 (external_declaration -> pppragma_directive .)
    VOID            reduce using rule 65 (external_declaration -> pppragma_directive .)
    _BOOL           reduce using rule 65 (external_declaration -> pppragma_directive .)
    CHAR            reduce using rule 65 (external_declaration -> pppragma_directive .)
    SHORT           reduce using rule 65 (external_declaration -> pppragma_directive .)
    INT             reduce using rule 65 (external_declaration -> pppragma_directive .)
    LONG            reduce using rule 65 (external_declaration -> pppragma_directive .)
    FLOAT           reduce using rule 65 (external_declaration -> pppragma_directive .)
    DOUBLE          reduce using rule 65 (external_declaration -> pppragma_directive .)
    _COMPLEX        reduce using rule 65 (external_declaration -> pppragma_directive .)
    SIGNED          reduce using rule 65 (external_declaration -> pppragma_directive .)
    UNSIGNED        reduce using rule 65 (external_declaration -> pppragma_directive .)
    __INT128        reduce using rule 65 (external_declaration -> pppragma_directive .)
    CONST           reduce using rule 65 (external_declaration -> pppragma_directive .)
    RESTRICT        reduce using rule 65 (external_declaration -> pppragma_directive .)
    VOLATILE        reduce using rule 65 (external_declaration -> pppragma_directive .)
    AUTO            reduce using rule 65 (external_declaration -> pppragma_directive .)
    REGISTER        reduce using rule 65 (external_declaration -> pppragma_directive .)
    STATIC          reduce using rule 65 (external_declaration -> pppragma_directive .)
    EXTERN          reduce using rule 65 (external_declaration -> pppragma_directive .)
    TYPEDEF         reduce using rule 65 (external_declaration -> pppragma_directive .)
    INLINE          reduce using rule 65 (external_declaration -> pppragma_directive .)
    STRUCT          reduce using rule 65 (external_declaration -> pppragma_directive .)
    UNION           reduce using rule 65 (external_declaration -> pppragma_directive .)
    $end            reduce using rule 65 (external_declaration -> pppragma_directive .)


state 9

    (66) external_declaration -> SEMI .

    SEMI            reduce using rule 66 (external_declaration -> SEMI .)
    PPHASH          reduce using rule 66 (external_declaration -> SEMI .)
    PPPRAGMA        reduce using rule 66 (external_declaration -> SEMI .)
    ID              reduce using rule 66 (external_declaration -> SEMI .)
    LPAREN          reduce using rule 66 (external_declaration -> SEMI .)
    TIMES           reduce using rule 66 (external_declaration -> SEMI .)
    TYPEID          reduce using rule 66 (external_declaration -> SEMI .)
    ENUM            reduce using rule 66 (external_declaration -> SEMI .)
    VOID            reduce using rule 66 (external_declaration -> SEMI .)
    _BOOL           reduce using rule 66 (external_declaration -> SEMI .)
    CHAR            reduce using rule 66 (external_declaration -> SEMI .)
    SHORT           reduce using rule 66 (external_declaration -> SEMI .)
    INT             reduce using rule 66 (external_declaration -> SEMI .)
    LONG            reduce using rule 66 (external_declaration -> SEMI .)
    FLOAT           reduce using rule 66 (external_declaration -> SEMI .)
    DOUBLE          reduce using rule 66 (external_declaration -> SEMI .)
    _COMPLEX        reduce using rule 66 (external_declaration -> SEMI .)
    SIGNED          reduce using rule 66 (external_declaration -> SEMI .)
    UNSIGNED        reduce using rule 66 (external_declaration -> SEMI .)
    __INT128        reduce using rule 66 (external_declaration -> SEMI .)
    CONST           reduce using rule 66 (external_declaration -> SEMI .)
    RESTRICT        reduce using rule 66 (external_declaration -> SEMI .)
    VOLATILE        reduce using rule 66 (external_declaration -> SEMI .)
    AUTO            reduce using rule 66 (external_declaration -> SEMI .)
    REGISTER        reduce using rule 66 (external_declaration -> SEMI .)
    STATIC          reduce using rule 66 (external_declaration -> SEMI .)
    EXTERN          reduce using rule 66 (external_declaration -> SEMI .)
    TYPEDEF         reduce using rule 66 (external_declaration -> SEMI .)
    INLINE          reduce using rule 66 (external_declaration -> SEMI .)
    STRUCT          reduce using rule 66 (external_declaration -> SEMI .)
    UNION           reduce using rule 66 (external_declaration -> SEMI .)
    $end            reduce using rule 66 (external_declaration -> SEMI .)


state 10

    (70) function_definition -> id_declarator . declaration_list_opt compound_statement
    (7) declaration_list_opt -> . empty
    (8) declaration_list_opt -> . declaration_list
    (309) empty -> .
    (84) declaration_list -> . declaration
    (85) declaration_list -> . declaration_list declaration
    (83) declaration -> . decl_body SEMI
    (81) decl_body -> . declaration_specifiers init_declarator_list_opt
    (82) decl_body -> . declaration_specifiers_no_type id_init_declarator_list_opt
    (89) declaration_specifiers -> . declaration_specifiers type_qualifier
    (90) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (91) declaration_specifiers -> . declaration_specifiers function_specifier
    (92) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (93) declaration_specifiers -> . type_specifier
    (94) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (86) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (87) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (88) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (113) type_specifier -> . typedef_name
    (114) type_specifier -> . enum_specifier
    (115) type_specifier -> . struct_or_union_specifier
    (116) type_specifier -> . type_specifier_no_typeid
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE
    (95) storage_class_specifier -> . AUTO
    (96) storage_class_specifier -> . REGISTER
    (97) storage_class_specifier -> . STATIC
    (98) storage_class_specifier -> . EXTERN
    (99) storage_class_specifier -> . TYPEDEF
    (100) function_specifier -> . INLINE
    (221) typedef_name -> . TYPEID
    (152) enum_specifier -> . ENUM ID
    (153) enum_specifier -> . ENUM TYPEID
    (154) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (155) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (156) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (132) struct_or_union_specifier -> . struct_or_union ID
    (133) struct_or_union_specifier -> . struct_or_union TYPEID
    (134) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (135) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (136) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (137) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (138) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (139) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (101) type_specifier_no_typeid -> . VOID
    (102) type_specifier_no_typeid -> . _BOOL
    (103) type_specifier_no_typeid -> . CHAR
    (104) type_specifier_no_typeid -> . SHORT
    (105) type_specifier_no_typeid -> . INT
    (106) type_specifier_no_typeid -> . LONG
    (107) type_specifier_no_typeid -> . FLOAT
    (108) type_specifier_no_typeid -> . DOUBLE
    (109) type_specifier_no_typeid -> . _COMPLEX
    (110) type_specifier_no_typeid -> . SIGNED
    (111) type_specifier_no_typeid -> . UNSIGNED
    (112) type_specifier_no_typeid -> . __INT128
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

    LBRACE          reduce using rule 309 (empty -> .)
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47
    AUTO            shift and go to state 48
    REGISTER        shift and go to state 49
    STATIC          shift and go to state 25
    EXTERN          shift and go to state 50
    TYPEDEF         shift and go to state 51
    INLINE          shift and go to state 52
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    VOID            shift and go to state 33
    _BOOL           shift and go to state 34
    CHAR            shift and go to state 35
    SHORT           shift and go to state 36
    INT             shift and go to state 37
    LONG            shift and go to state 38
    FLOAT           shift and go to state 39
    DOUBLE          shift and go to state 40
    _COMPLEX        shift and go to state 41
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 43
    __INT128        shift and go to state 44
    STRUCT          shift and go to state 53
    UNION           shift and go to state 54

    declaration_list_opt           shift and go to state 56
    empty                          shift and go to state 57
    declaration_list               shift and go to state 58
    declaration                    shift and go to state 59
    decl_body                      shift and go to state 12
    declaration_specifiers         shift and go to state 60
    declaration_specifiers_no_type shift and go to state 61
    type_qualifier                 shift and go to state 17
    storage_class_specifier        shift and go to state 18
    function_specifier             shift and go to state 19
    type_specifier_no_typeid       shift and go to state 20
    type_specifier                 shift and go to state 21
    typedef_name                   shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union_specifier      shift and go to state 29
    struct_or_union                shift and go to state 32

state 11

    (71) function_definition -> declaration_specifiers . id_declarator declaration_list_opt compound_statement
    (89) declaration_specifiers -> declaration_specifiers . type_qualifier
    (90) declaration_specifiers -> declaration_specifiers . storage_class_specifier
    (91) declaration_specifiers -> declaration_specifiers . function_specifier
    (92) declaration_specifiers -> declaration_specifiers . type_specifier_no_typeid
    (81) decl_body -> declaration_specifiers . init_declarator_list_opt
    (52) id_declarator -> . direct_id_declarator
    (53) id_declarator -> . pointer direct_id_declarator
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE
    (95) storage_class_specifier -> . AUTO
    (96) storage_class_specifier -> . REGISTER
    (97) storage_class_specifier -> . STATIC
    (98) storage_class_specifier -> . EXTERN
    (99) storage_class_specifier -> . TYPEDEF
    (100) function_specifier -> . INLINE
    (101) type_specifier_no_typeid -> . VOID
    (102) type_specifier_no_typeid -> . _BOOL
    (103) type_specifier_no_typeid -> . CHAR
    (104) type_specifier_no_typeid -> . SHORT
    (105) type_specifier_no_typeid -> . INT
    (106) type_specifier_no_typeid -> . LONG
    (107) type_specifier_no_typeid -> . FLOAT
    (108) type_specifier_no_typeid -> . DOUBLE
    (109) type_specifier_no_typeid -> . _COMPLEX
    (110) type_specifier_no_typeid -> . SIGNED
    (111) type_specifier_no_typeid -> . UNSIGNED
    (112) type_specifier_no_typeid -> . __INT128
    (19) init_declarator_list_opt -> . empty
    (20) init_declarator_list_opt -> . init_declarator_list
    (29) direct_id_declarator -> . ID
    (30) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (31) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (35) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (36) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (164) pointer -> . TIMES type_qualifier_list_opt
    (165) pointer -> . TIMES type_qualifier_list_opt pointer
    (309) empty -> .
    (120) init_declarator_list -> . init_declarator
    (121) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (122) init_declarator -> . declarator
    (123) init_declarator -> . declarator EQUALS initializer
    (162) declarator -> . id_declarator
    (163) declarator -> . typeid_declarator
    (54) typeid_declarator -> . direct_typeid_declarator
    (55) typeid_declarator -> . pointer direct_typeid_declarator
    (37) direct_typeid_declarator -> . TYPEID
    (38) direct_typeid_declarator -> . LPAREN typeid_declarator RPAREN
    (39) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (40) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (41) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (42) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (43) direct_typeid_declarator -> . direct_typeid_declarator LPAREN parameter_type_list RPAREN
    (44) direct_typeid_declarator -> . direct_typeid_declarator LPAREN identifier_list_opt RPAREN

    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47
    AUTO            shift and go to state 48
    REGISTER        shift and go to state 49
    STATIC          shift and go to state 25
    EXTERN          shift and go to state 50
    TYPEDEF         shift and go to state 51
    INLINE          shift and go to state 52
    VOID            shift and go to state 33
    _BOOL           shift and go to state 34
    CHAR            shift and go to state 35
    SHORT           shift and go to state 36
    INT             shift and go to state 37
    LONG            shift and go to state 38
    FLOAT           shift and go to state 39
    DOUBLE          shift and go to state 40
    _COMPLEX        shift and go to state 41
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 43
    __INT128        shift and go to state 44
    ID              shift and go to state 23
    LPAREN          shift and go to state 71
    TIMES           shift and go to state 26
    SEMI            reduce using rule 309 (empty -> .)
    TYPEID          shift and go to state 76

    id_declarator                  shift and go to state 62
    type_qualifier                 shift and go to state 63
    storage_class_specifier        shift and go to state 64
    function_specifier             shift and go to state 65
    type_specifier_no_typeid       shift and go to state 66
    init_declarator_list_opt       shift and go to state 67
    direct_id_declarator           shift and go to state 15
    pointer                        shift and go to state 68
    empty                          shift and go to state 69
    init_declarator_list           shift and go to state 70
    init_declarator                shift and go to state 72
    declarator                     shift and go to state 73
    typeid_declarator              shift and go to state 74
    direct_typeid_declarator       shift and go to state 75

state 12

    (83) declaration -> decl_body . SEMI

    SEMI            shift and go to state 77


state 13

    (67) pp_directive -> PPHASH .

    SEMI            reduce using rule 67 (pp_directive -> PPHASH .)
    PPHASH          reduce using rule 67 (pp_directive -> PPHASH .)
    PPPRAGMA        reduce using rule 67 (pp_directive -> PPHASH .)
    ID              reduce using rule 67 (pp_directive -> PPHASH .)
    LPAREN          reduce using rule 67 (pp_directive -> PPHASH .)
    TIMES           reduce using rule 67 (pp_directive -> PPHASH .)
    TYPEID          reduce using rule 67 (pp_directive -> PPHASH .)
    ENUM            reduce using rule 67 (pp_directive -> PPHASH .)
    VOID            reduce using rule 67 (pp_directive -> PPHASH .)
    _BOOL           reduce using rule 67 (pp_directive -> PPHASH .)
    CHAR            reduce using rule 67 (pp_directive -> PPHASH .)
    SHORT           reduce using rule 67 (pp_directive -> PPHASH .)
    INT             reduce using rule 67 (pp_directive -> PPHASH .)
    LONG            reduce using rule 67 (pp_directive -> PPHASH .)
    FLOAT           reduce using rule 67 (pp_directive -> PPHASH .)
    DOUBLE          reduce using rule 67 (pp_directive -> PPHASH .)
    _COMPLEX        reduce using rule 67 (pp_directive -> PPHASH .)
    SIGNED          reduce using rule 67 (pp_directive -> PPHASH .)
    UNSIGNED        reduce using rule 67 (pp_directive -> PPHASH .)
    __INT128        reduce using rule 67 (pp_directive -> PPHASH .)
    CONST           reduce using rule 67 (pp_directive -> PPHASH .)
    RESTRICT        reduce using rule 67 (pp_directive -> PPHASH .)
    VOLATILE        reduce using rule 67 (pp_directive -> PPHASH .)
    AUTO            reduce using rule 67 (pp_directive -> PPHASH .)
    REGISTER        reduce using rule 67 (pp_directive -> PPHASH .)
    STATIC          reduce using rule 67 (pp_directive -> PPHASH .)
    EXTERN          reduce using rule 67 (pp_directive -> PPHASH .)
    TYPEDEF         reduce using rule 67 (pp_directive -> PPHASH .)
    INLINE          reduce using rule 67 (pp_directive -> PPHASH .)
    STRUCT          reduce using rule 67 (pp_directive -> PPHASH .)
    UNION           reduce using rule 67 (pp_directive -> PPHASH .)
    $end            reduce using rule 67 (pp_directive -> PPHASH .)


state 14

    (68) pppragma_directive -> PPPRAGMA .
    (69) pppragma_directive -> PPPRAGMA . PPPRAGMASTR

    SEMI            reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    PPHASH          reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    PPPRAGMA        reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    ID              reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    LPAREN          reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    TIMES           reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    TYPEID          reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    ENUM            reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    VOID            reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    _BOOL           reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    CHAR            reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    SHORT           reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    INT             reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    LONG            reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    FLOAT           reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    DOUBLE          reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    _COMPLEX        reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    SIGNED          reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    UNSIGNED        reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    __INT128        reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    CONST           reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    RESTRICT        reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    VOLATILE        reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    AUTO            reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    REGISTER        reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    STATIC          reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    EXTERN          reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    TYPEDEF         reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    INLINE          reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    STRUCT          reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    UNION           reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    $end            reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    RBRACE          reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    CASE            reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    DEFAULT         reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    IF              reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    SWITCH          reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    WHILE           reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    DO              reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    FOR             reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    GOTO            reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    BREAK           reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    CONTINUE        reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    RETURN          reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    LBRACE          reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    PLUSPLUS        reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    MINUSMINUS      reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    SIZEOF          reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    AND             reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    PLUS            reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    MINUS           reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    NOT             reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    LNOT            reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    OFFSETOF        reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    INT_CONST_DEC   reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    INT_CONST_OCT   reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    INT_CONST_HEX   reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    INT_CONST_BIN   reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    FLOAT_CONST     reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    HEX_FLOAT_CONST reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    CHAR_CONST      reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    WCHAR_CONST     reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    STRING_LITERAL  reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    WSTRING_LITERAL reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    ELSE            reduce using rule 68 (pppragma_directive -> PPPRAGMA .)
    PPPRAGMASTR     shift and go to state 78


state 15

    (52) id_declarator -> direct_id_declarator .
    (31) direct_id_declarator -> direct_id_declarator . LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> direct_id_declarator . LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> direct_id_declarator . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> direct_id_declarator . LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (35) direct_id_declarator -> direct_id_declarator . LPAREN parameter_type_list RPAREN
    (36) direct_id_declarator -> direct_id_declarator . LPAREN identifier_list_opt RPAREN

    CONST           reduce using rule 52 (id_declarator -> direct_id_declarator .)
    RESTRICT        reduce using rule 52 (id_declarator -> direct_id_declarator .)
    VOLATILE        reduce using rule 52 (id_declarator -> direct_id_declarator .)
    AUTO            reduce using rule 52 (id_declarator -> direct_id_declarator .)
    REGISTER        reduce using rule 52 (id_declarator -> direct_id_declarator .)
    STATIC          reduce using rule 52 (id_declarator -> direct_id_declarator .)
    EXTERN          reduce using rule 52 (id_declarator -> direct_id_declarator .)
    TYPEDEF         reduce using rule 52 (id_declarator -> direct_id_declarator .)
    INLINE          reduce using rule 52 (id_declarator -> direct_id_declarator .)
    TYPEID          reduce using rule 52 (id_declarator -> direct_id_declarator .)
    ENUM            reduce using rule 52 (id_declarator -> direct_id_declarator .)
    VOID            reduce using rule 52 (id_declarator -> direct_id_declarator .)
    _BOOL           reduce using rule 52 (id_declarator -> direct_id_declarator .)
    CHAR            reduce using rule 52 (id_declarator -> direct_id_declarator .)
    SHORT           reduce using rule 52 (id_declarator -> direct_id_declarator .)
    INT             reduce using rule 52 (id_declarator -> direct_id_declarator .)
    LONG            reduce using rule 52 (id_declarator -> direct_id_declarator .)
    FLOAT           reduce using rule 52 (id_declarator -> direct_id_declarator .)
    DOUBLE          reduce using rule 52 (id_declarator -> direct_id_declarator .)
    _COMPLEX        reduce using rule 52 (id_declarator -> direct_id_declarator .)
    SIGNED          reduce using rule 52 (id_declarator -> direct_id_declarator .)
    UNSIGNED        reduce using rule 52 (id_declarator -> direct_id_declarator .)
    __INT128        reduce using rule 52 (id_declarator -> direct_id_declarator .)
    STRUCT          reduce using rule 52 (id_declarator -> direct_id_declarator .)
    UNION           reduce using rule 52 (id_declarator -> direct_id_declarator .)
    LBRACE          reduce using rule 52 (id_declarator -> direct_id_declarator .)
    EQUALS          reduce using rule 52 (id_declarator -> direct_id_declarator .)
    COMMA           reduce using rule 52 (id_declarator -> direct_id_declarator .)
    SEMI            reduce using rule 52 (id_declarator -> direct_id_declarator .)
    RPAREN          reduce using rule 52 (id_declarator -> direct_id_declarator .)
    COLON           reduce using rule 52 (id_declarator -> direct_id_declarator .)
    LBRACKET        shift and go to state 79
    LPAREN          shift and go to state 80


state 16

    (53) id_declarator -> pointer . direct_id_declarator
    (29) direct_id_declarator -> . ID
    (30) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (31) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (35) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (36) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN

    ID              shift and go to state 23
    LPAREN          shift and go to state 24

    direct_id_declarator           shift and go to state 81

state 17

    (86) declaration_specifiers_no_type -> type_qualifier . declaration_specifiers_no_type_opt
    (9) declaration_specifiers_no_type_opt -> . empty
    (10) declaration_specifiers_no_type_opt -> . declaration_specifiers_no_type
    (309) empty -> .
    (86) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (87) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (88) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE
    (95) storage_class_specifier -> . AUTO
    (96) storage_class_specifier -> . REGISTER
    (97) storage_class_specifier -> . STATIC
    (98) storage_class_specifier -> . EXTERN
    (99) storage_class_specifier -> . TYPEDEF
    (100) function_specifier -> . INLINE

    TYPEID          reduce using rule 309 (empty -> .)
    ENUM            reduce using rule 309 (empty -> .)
    VOID            reduce using rule 309 (empty -> .)
    _BOOL           reduce using rule 309 (empty -> .)
    CHAR            reduce using rule 309 (empty -> .)
    SHORT           reduce using rule 309 (empty -> .)
    INT             reduce using rule 309 (empty -> .)
    LONG            reduce using rule 309 (empty -> .)
    FLOAT           reduce using rule 309 (empty -> .)
    DOUBLE          reduce using rule 309 (empty -> .)
    _COMPLEX        reduce using rule 309 (empty -> .)
    SIGNED          reduce using rule 309 (empty -> .)
    UNSIGNED        reduce using rule 309 (empty -> .)
    __INT128        reduce using rule 309 (empty -> .)
    STRUCT          reduce using rule 309 (empty -> .)
    UNION           reduce using rule 309 (empty -> .)
    ID              reduce using rule 309 (empty -> .)
    LPAREN          reduce using rule 309 (empty -> .)
    TIMES           reduce using rule 309 (empty -> .)
    SEMI            reduce using rule 309 (empty -> .)
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47
    AUTO            shift and go to state 48
    REGISTER        shift and go to state 49
    STATIC          shift and go to state 25
    EXTERN          shift and go to state 50
    TYPEDEF         shift and go to state 51
    INLINE          shift and go to state 52

    type_qualifier                 shift and go to state 17
    declaration_specifiers_no_type_opt shift and go to state 82
    empty                          shift and go to state 83
    declaration_specifiers_no_type shift and go to state 84
    storage_class_specifier        shift and go to state 18
    function_specifier             shift and go to state 19

state 18

    (87) declaration_specifiers_no_type -> storage_class_specifier . declaration_specifiers_no_type_opt
    (9) declaration_specifiers_no_type_opt -> . empty
    (10) declaration_specifiers_no_type_opt -> . declaration_specifiers_no_type
    (309) empty -> .
    (86) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (87) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (88) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE
    (95) storage_class_specifier -> . AUTO
    (96) storage_class_specifier -> . REGISTER
    (97) storage_class_specifier -> . STATIC
    (98) storage_class_specifier -> . EXTERN
    (99) storage_class_specifier -> . TYPEDEF
    (100) function_specifier -> . INLINE

    TYPEID          reduce using rule 309 (empty -> .)
    ENUM            reduce using rule 309 (empty -> .)
    VOID            reduce using rule 309 (empty -> .)
    _BOOL           reduce using rule 309 (empty -> .)
    CHAR            reduce using rule 309 (empty -> .)
    SHORT           reduce using rule 309 (empty -> .)
    INT             reduce using rule 309 (empty -> .)
    LONG            reduce using rule 309 (empty -> .)
    FLOAT           reduce using rule 309 (empty -> .)
    DOUBLE          reduce using rule 309 (empty -> .)
    _COMPLEX        reduce using rule 309 (empty -> .)
    SIGNED          reduce using rule 309 (empty -> .)
    UNSIGNED        reduce using rule 309 (empty -> .)
    __INT128        reduce using rule 309 (empty -> .)
    STRUCT          reduce using rule 309 (empty -> .)
    UNION           reduce using rule 309 (empty -> .)
    ID              reduce using rule 309 (empty -> .)
    LPAREN          reduce using rule 309 (empty -> .)
    TIMES           reduce using rule 309 (empty -> .)
    SEMI            reduce using rule 309 (empty -> .)
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47
    AUTO            shift and go to state 48
    REGISTER        shift and go to state 49
    STATIC          shift and go to state 25
    EXTERN          shift and go to state 50
    TYPEDEF         shift and go to state 51
    INLINE          shift and go to state 52

    storage_class_specifier        shift and go to state 18
    declaration_specifiers_no_type_opt shift and go to state 85
    empty                          shift and go to state 83
    declaration_specifiers_no_type shift and go to state 84
    type_qualifier                 shift and go to state 17
    function_specifier             shift and go to state 19

state 19

    (88) declaration_specifiers_no_type -> function_specifier . declaration_specifiers_no_type_opt
    (9) declaration_specifiers_no_type_opt -> . empty
    (10) declaration_specifiers_no_type_opt -> . declaration_specifiers_no_type
    (309) empty -> .
    (86) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (87) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (88) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE
    (95) storage_class_specifier -> . AUTO
    (96) storage_class_specifier -> . REGISTER
    (97) storage_class_specifier -> . STATIC
    (98) storage_class_specifier -> . EXTERN
    (99) storage_class_specifier -> . TYPEDEF
    (100) function_specifier -> . INLINE

    TYPEID          reduce using rule 309 (empty -> .)
    ENUM            reduce using rule 309 (empty -> .)
    VOID            reduce using rule 309 (empty -> .)
    _BOOL           reduce using rule 309 (empty -> .)
    CHAR            reduce using rule 309 (empty -> .)
    SHORT           reduce using rule 309 (empty -> .)
    INT             reduce using rule 309 (empty -> .)
    LONG            reduce using rule 309 (empty -> .)
    FLOAT           reduce using rule 309 (empty -> .)
    DOUBLE          reduce using rule 309 (empty -> .)
    _COMPLEX        reduce using rule 309 (empty -> .)
    SIGNED          reduce using rule 309 (empty -> .)
    UNSIGNED        reduce using rule 309 (empty -> .)
    __INT128        reduce using rule 309 (empty -> .)
    STRUCT          reduce using rule 309 (empty -> .)
    UNION           reduce using rule 309 (empty -> .)
    ID              reduce using rule 309 (empty -> .)
    LPAREN          reduce using rule 309 (empty -> .)
    TIMES           reduce using rule 309 (empty -> .)
    SEMI            reduce using rule 309 (empty -> .)
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47
    AUTO            shift and go to state 48
    REGISTER        shift and go to state 49
    STATIC          shift and go to state 25
    EXTERN          shift and go to state 50
    TYPEDEF         shift and go to state 51
    INLINE          shift and go to state 52

    function_specifier             shift and go to state 19
    declaration_specifiers_no_type_opt shift and go to state 86
    empty                          shift and go to state 83
    declaration_specifiers_no_type shift and go to state 84
    type_qualifier                 shift and go to state 17
    storage_class_specifier        shift and go to state 18

state 20

    (116) type_specifier -> type_specifier_no_typeid .

    CONST           reduce using rule 116 (type_specifier -> type_specifier_no_typeid .)
    RESTRICT        reduce using rule 116 (type_specifier -> type_specifier_no_typeid .)
    VOLATILE        reduce using rule 116 (type_specifier -> type_specifier_no_typeid .)
    AUTO            reduce using rule 116 (type_specifier -> type_specifier_no_typeid .)
    REGISTER        reduce using rule 116 (type_specifier -> type_specifier_no_typeid .)
    STATIC          reduce using rule 116 (type_specifier -> type_specifier_no_typeid .)
    EXTERN          reduce using rule 116 (type_specifier -> type_specifier_no_typeid .)
    TYPEDEF         reduce using rule 116 (type_specifier -> type_specifier_no_typeid .)
    INLINE          reduce using rule 116 (type_specifier -> type_specifier_no_typeid .)
    VOID            reduce using rule 116 (type_specifier -> type_specifier_no_typeid .)
    _BOOL           reduce using rule 116 (type_specifier -> type_specifier_no_typeid .)
    CHAR            reduce using rule 116 (type_specifier -> type_specifier_no_typeid .)
    SHORT           reduce using rule 116 (type_specifier -> type_specifier_no_typeid .)
    INT             reduce using rule 116 (type_specifier -> type_specifier_no_typeid .)
    LONG            reduce using rule 116 (type_specifier -> type_specifier_no_typeid .)
    FLOAT           reduce using rule 116 (type_specifier -> type_specifier_no_typeid .)
    DOUBLE          reduce using rule 116 (type_specifier -> type_specifier_no_typeid .)
    _COMPLEX        reduce using rule 116 (type_specifier -> type_specifier_no_typeid .)
    SIGNED          reduce using rule 116 (type_specifier -> type_specifier_no_typeid .)
    UNSIGNED        reduce using rule 116 (type_specifier -> type_specifier_no_typeid .)
    __INT128        reduce using rule 116 (type_specifier -> type_specifier_no_typeid .)
    ID              reduce using rule 116 (type_specifier -> type_specifier_no_typeid .)
    LPAREN          reduce using rule 116 (type_specifier -> type_specifier_no_typeid .)
    TIMES           reduce using rule 116 (type_specifier -> type_specifier_no_typeid .)
    TYPEID          reduce using rule 116 (type_specifier -> type_specifier_no_typeid .)
    SEMI            reduce using rule 116 (type_specifier -> type_specifier_no_typeid .)
    LBRACKET        reduce using rule 116 (type_specifier -> type_specifier_no_typeid .)
    COMMA           reduce using rule 116 (type_specifier -> type_specifier_no_typeid .)
    RPAREN          reduce using rule 116 (type_specifier -> type_specifier_no_typeid .)
    COLON           reduce using rule 116 (type_specifier -> type_specifier_no_typeid .)


state 21

    (93) declaration_specifiers -> type_specifier .

    CONST           reduce using rule 93 (declaration_specifiers -> type_specifier .)
    RESTRICT        reduce using rule 93 (declaration_specifiers -> type_specifier .)
    VOLATILE        reduce using rule 93 (declaration_specifiers -> type_specifier .)
    AUTO            reduce using rule 93 (declaration_specifiers -> type_specifier .)
    REGISTER        reduce using rule 93 (declaration_specifiers -> type_specifier .)
    STATIC          reduce using rule 93 (declaration_specifiers -> type_specifier .)
    EXTERN          reduce using rule 93 (declaration_specifiers -> type_specifier .)
    TYPEDEF         reduce using rule 93 (declaration_specifiers -> type_specifier .)
    INLINE          reduce using rule 93 (declaration_specifiers -> type_specifier .)
    VOID            reduce using rule 93 (declaration_specifiers -> type_specifier .)
    _BOOL           reduce using rule 93 (declaration_specifiers -> type_specifier .)
    CHAR            reduce using rule 93 (declaration_specifiers -> type_specifier .)
    SHORT           reduce using rule 93 (declaration_specifiers -> type_specifier .)
    INT             reduce using rule 93 (declaration_specifiers -> type_specifier .)
    LONG            reduce using rule 93 (declaration_specifiers -> type_specifier .)
    FLOAT           reduce using rule 93 (declaration_specifiers -> type_specifier .)
    DOUBLE          reduce using rule 93 (declaration_specifiers -> type_specifier .)
    _COMPLEX        reduce using rule 93 (declaration_specifiers -> type_specifier .)
    SIGNED          reduce using rule 93 (declaration_specifiers -> type_specifier .)
    UNSIGNED        reduce using rule 93 (declaration_specifiers -> type_specifier .)
    __INT128        reduce using rule 93 (declaration_specifiers -> type_specifier .)
    ID              reduce using rule 93 (declaration_specifiers -> type_specifier .)
    LPAREN          reduce using rule 93 (declaration_specifiers -> type_specifier .)
    TIMES           reduce using rule 93 (declaration_specifiers -> type_specifier .)
    TYPEID          reduce using rule 93 (declaration_specifiers -> type_specifier .)
    SEMI            reduce using rule 93 (declaration_specifiers -> type_specifier .)
    LBRACKET        reduce using rule 93 (declaration_specifiers -> type_specifier .)
    COMMA           reduce using rule 93 (declaration_specifiers -> type_specifier .)
    RPAREN          reduce using rule 93 (declaration_specifiers -> type_specifier .)


state 22

    (94) declaration_specifiers -> declaration_specifiers_no_type . type_specifier
    (82) decl_body -> declaration_specifiers_no_type . id_init_declarator_list_opt
    (113) type_specifier -> . typedef_name
    (114) type_specifier -> . enum_specifier
    (115) type_specifier -> . struct_or_union_specifier
    (116) type_specifier -> . type_specifier_no_typeid
    (15) id_init_declarator_list_opt -> . empty
    (16) id_init_declarator_list_opt -> . id_init_declarator_list
    (221) typedef_name -> . TYPEID
    (152) enum_specifier -> . ENUM ID
    (153) enum_specifier -> . ENUM TYPEID
    (154) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (155) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (156) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (132) struct_or_union_specifier -> . struct_or_union ID
    (133) struct_or_union_specifier -> . struct_or_union TYPEID
    (134) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (135) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (136) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (137) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (138) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (139) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (101) type_specifier_no_typeid -> . VOID
    (102) type_specifier_no_typeid -> . _BOOL
    (103) type_specifier_no_typeid -> . CHAR
    (104) type_specifier_no_typeid -> . SHORT
    (105) type_specifier_no_typeid -> . INT
    (106) type_specifier_no_typeid -> . LONG
    (107) type_specifier_no_typeid -> . FLOAT
    (108) type_specifier_no_typeid -> . DOUBLE
    (109) type_specifier_no_typeid -> . _COMPLEX
    (110) type_specifier_no_typeid -> . SIGNED
    (111) type_specifier_no_typeid -> . UNSIGNED
    (112) type_specifier_no_typeid -> . __INT128
    (309) empty -> .
    (124) id_init_declarator_list -> . id_init_declarator
    (125) id_init_declarator_list -> . id_init_declarator_list COMMA init_declarator
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION
    (126) id_init_declarator -> . id_declarator
    (127) id_init_declarator -> . id_declarator EQUALS initializer
    (52) id_declarator -> . direct_id_declarator
    (53) id_declarator -> . pointer direct_id_declarator
    (29) direct_id_declarator -> . ID
    (30) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (31) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (35) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (36) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (164) pointer -> . TIMES type_qualifier_list_opt
    (165) pointer -> . TIMES type_qualifier_list_opt pointer

    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    VOID            shift and go to state 33
    _BOOL           shift and go to state 34
    CHAR            shift and go to state 35
    SHORT           shift and go to state 36
    INT             shift and go to state 37
    LONG            shift and go to state 38
    FLOAT           shift and go to state 39
    DOUBLE          shift and go to state 40
    _COMPLEX        shift and go to state 41
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 43
    __INT128        shift and go to state 44
    SEMI            reduce using rule 309 (empty -> .)
    STRUCT          shift and go to state 53
    UNION           shift and go to state 54
    ID              shift and go to state 23
    LPAREN          shift and go to state 24
    TIMES           shift and go to state 26

    type_specifier                 shift and go to state 87
    id_init_declarator_list_opt    shift and go to state 88
    typedef_name                   shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union_specifier      shift and go to state 29
    type_specifier_no_typeid       shift and go to state 20
    empty                          shift and go to state 89
    id_init_declarator_list        shift and go to state 90
    struct_or_union                shift and go to state 32
    id_init_declarator             shift and go to state 91
    id_declarator                  shift and go to state 92
    direct_id_declarator           shift and go to state 15
    pointer                        shift and go to state 16

state 23

    (29) direct_id_declarator -> ID .

    LBRACKET        reduce using rule 29 (direct_id_declarator -> ID .)
    LPAREN          reduce using rule 29 (direct_id_declarator -> ID .)
    CONST           reduce using rule 29 (direct_id_declarator -> ID .)
    RESTRICT        reduce using rule 29 (direct_id_declarator -> ID .)
    VOLATILE        reduce using rule 29 (direct_id_declarator -> ID .)
    AUTO            reduce using rule 29 (direct_id_declarator -> ID .)
    REGISTER        reduce using rule 29 (direct_id_declarator -> ID .)
    STATIC          reduce using rule 29 (direct_id_declarator -> ID .)
    EXTERN          reduce using rule 29 (direct_id_declarator -> ID .)
    TYPEDEF         reduce using rule 29 (direct_id_declarator -> ID .)
    INLINE          reduce using rule 29 (direct_id_declarator -> ID .)
    TYPEID          reduce using rule 29 (direct_id_declarator -> ID .)
    ENUM            reduce using rule 29 (direct_id_declarator -> ID .)
    VOID            reduce using rule 29 (direct_id_declarator -> ID .)
    _BOOL           reduce using rule 29 (direct_id_declarator -> ID .)
    CHAR            reduce using rule 29 (direct_id_declarator -> ID .)
    SHORT           reduce using rule 29 (direct_id_declarator -> ID .)
    INT             reduce using rule 29 (direct_id_declarator -> ID .)
    LONG            reduce using rule 29 (direct_id_declarator -> ID .)
    FLOAT           reduce using rule 29 (direct_id_declarator -> ID .)
    DOUBLE          reduce using rule 29 (direct_id_declarator -> ID .)
    _COMPLEX        reduce using rule 29 (direct_id_declarator -> ID .)
    SIGNED          reduce using rule 29 (direct_id_declarator -> ID .)
    UNSIGNED        reduce using rule 29 (direct_id_declarator -> ID .)
    __INT128        reduce using rule 29 (direct_id_declarator -> ID .)
    STRUCT          reduce using rule 29 (direct_id_declarator -> ID .)
    UNION           reduce using rule 29 (direct_id_declarator -> ID .)
    LBRACE          reduce using rule 29 (direct_id_declarator -> ID .)
    EQUALS          reduce using rule 29 (direct_id_declarator -> ID .)
    COMMA           reduce using rule 29 (direct_id_declarator -> ID .)
    SEMI            reduce using rule 29 (direct_id_declarator -> ID .)
    RPAREN          reduce using rule 29 (direct_id_declarator -> ID .)
    COLON           reduce using rule 29 (direct_id_declarator -> ID .)


state 24

    (30) direct_id_declarator -> LPAREN . id_declarator RPAREN
    (52) id_declarator -> . direct_id_declarator
    (53) id_declarator -> . pointer direct_id_declarator
    (29) direct_id_declarator -> . ID
    (30) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (31) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (35) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (36) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (164) pointer -> . TIMES type_qualifier_list_opt
    (165) pointer -> . TIMES type_qualifier_list_opt pointer

    ID              shift and go to state 23
    LPAREN          shift and go to state 24
    TIMES           shift and go to state 26

    id_declarator                  shift and go to state 93
    direct_id_declarator           shift and go to state 15
    pointer                        shift and go to state 16

state 25

    (97) storage_class_specifier -> STATIC .

    CONST           reduce using rule 97 (storage_class_specifier -> STATIC .)
    RESTRICT        reduce using rule 97 (storage_class_specifier -> STATIC .)
    VOLATILE        reduce using rule 97 (storage_class_specifier -> STATIC .)
    AUTO            reduce using rule 97 (storage_class_specifier -> STATIC .)
    REGISTER        reduce using rule 97 (storage_class_specifier -> STATIC .)
    STATIC          reduce using rule 97 (storage_class_specifier -> STATIC .)
    EXTERN          reduce using rule 97 (storage_class_specifier -> STATIC .)
    TYPEDEF         reduce using rule 97 (storage_class_specifier -> STATIC .)
    INLINE          reduce using rule 97 (storage_class_specifier -> STATIC .)
    TYPEID          reduce using rule 97 (storage_class_specifier -> STATIC .)
    ENUM            reduce using rule 97 (storage_class_specifier -> STATIC .)
    VOID            reduce using rule 97 (storage_class_specifier -> STATIC .)
    _BOOL           reduce using rule 97 (storage_class_specifier -> STATIC .)
    CHAR            reduce using rule 97 (storage_class_specifier -> STATIC .)
    SHORT           reduce using rule 97 (storage_class_specifier -> STATIC .)
    INT             reduce using rule 97 (storage_class_specifier -> STATIC .)
    LONG            reduce using rule 97 (storage_class_specifier -> STATIC .)
    FLOAT           reduce using rule 97 (storage_class_specifier -> STATIC .)
    DOUBLE          reduce using rule 97 (storage_class_specifier -> STATIC .)
    _COMPLEX        reduce using rule 97 (storage_class_specifier -> STATIC .)
    SIGNED          reduce using rule 97 (storage_class_specifier -> STATIC .)
    UNSIGNED        reduce using rule 97 (storage_class_specifier -> STATIC .)
    __INT128        reduce using rule 97 (storage_class_specifier -> STATIC .)
    STRUCT          reduce using rule 97 (storage_class_specifier -> STATIC .)
    UNION           reduce using rule 97 (storage_class_specifier -> STATIC .)
    ID              reduce using rule 97 (storage_class_specifier -> STATIC .)
    LPAREN          reduce using rule 97 (storage_class_specifier -> STATIC .)
    TIMES           reduce using rule 97 (storage_class_specifier -> STATIC .)
    SEMI            reduce using rule 97 (storage_class_specifier -> STATIC .)
    LBRACKET        reduce using rule 97 (storage_class_specifier -> STATIC .)
    COMMA           reduce using rule 97 (storage_class_specifier -> STATIC .)
    RPAREN          reduce using rule 97 (storage_class_specifier -> STATIC .)


state 26

    (164) pointer -> TIMES . type_qualifier_list_opt
    (165) pointer -> TIMES . type_qualifier_list_opt pointer
    (27) type_qualifier_list_opt -> . empty
    (28) type_qualifier_list_opt -> . type_qualifier_list
    (309) empty -> .
    (166) type_qualifier_list -> . type_qualifier
    (167) type_qualifier_list -> . type_qualifier_list type_qualifier
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE

    TIMES           reduce using rule 309 (empty -> .)
    ID              reduce using rule 309 (empty -> .)
    LPAREN          reduce using rule 309 (empty -> .)
    TYPEID          reduce using rule 309 (empty -> .)
    LBRACKET        reduce using rule 309 (empty -> .)
    COMMA           reduce using rule 309 (empty -> .)
    RPAREN          reduce using rule 309 (empty -> .)
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47

    type_qualifier_list_opt        shift and go to state 94
    empty                          shift and go to state 95
    type_qualifier_list            shift and go to state 96
    type_qualifier                 shift and go to state 97

state 27

    (113) type_specifier -> typedef_name .

    CONST           reduce using rule 113 (type_specifier -> typedef_name .)
    RESTRICT        reduce using rule 113 (type_specifier -> typedef_name .)
    VOLATILE        reduce using rule 113 (type_specifier -> typedef_name .)
    AUTO            reduce using rule 113 (type_specifier -> typedef_name .)
    REGISTER        reduce using rule 113 (type_specifier -> typedef_name .)
    STATIC          reduce using rule 113 (type_specifier -> typedef_name .)
    EXTERN          reduce using rule 113 (type_specifier -> typedef_name .)
    TYPEDEF         reduce using rule 113 (type_specifier -> typedef_name .)
    INLINE          reduce using rule 113 (type_specifier -> typedef_name .)
    VOID            reduce using rule 113 (type_specifier -> typedef_name .)
    _BOOL           reduce using rule 113 (type_specifier -> typedef_name .)
    CHAR            reduce using rule 113 (type_specifier -> typedef_name .)
    SHORT           reduce using rule 113 (type_specifier -> typedef_name .)
    INT             reduce using rule 113 (type_specifier -> typedef_name .)
    LONG            reduce using rule 113 (type_specifier -> typedef_name .)
    FLOAT           reduce using rule 113 (type_specifier -> typedef_name .)
    DOUBLE          reduce using rule 113 (type_specifier -> typedef_name .)
    _COMPLEX        reduce using rule 113 (type_specifier -> typedef_name .)
    SIGNED          reduce using rule 113 (type_specifier -> typedef_name .)
    UNSIGNED        reduce using rule 113 (type_specifier -> typedef_name .)
    __INT128        reduce using rule 113 (type_specifier -> typedef_name .)
    ID              reduce using rule 113 (type_specifier -> typedef_name .)
    LPAREN          reduce using rule 113 (type_specifier -> typedef_name .)
    TIMES           reduce using rule 113 (type_specifier -> typedef_name .)
    TYPEID          reduce using rule 113 (type_specifier -> typedef_name .)
    SEMI            reduce using rule 113 (type_specifier -> typedef_name .)
    LBRACKET        reduce using rule 113 (type_specifier -> typedef_name .)
    COMMA           reduce using rule 113 (type_specifier -> typedef_name .)
    RPAREN          reduce using rule 113 (type_specifier -> typedef_name .)
    COLON           reduce using rule 113 (type_specifier -> typedef_name .)


state 28

    (114) type_specifier -> enum_specifier .

    CONST           reduce using rule 114 (type_specifier -> enum_specifier .)
    RESTRICT        reduce using rule 114 (type_specifier -> enum_specifier .)
    VOLATILE        reduce using rule 114 (type_specifier -> enum_specifier .)
    AUTO            reduce using rule 114 (type_specifier -> enum_specifier .)
    REGISTER        reduce using rule 114 (type_specifier -> enum_specifier .)
    STATIC          reduce using rule 114 (type_specifier -> enum_specifier .)
    EXTERN          reduce using rule 114 (type_specifier -> enum_specifier .)
    TYPEDEF         reduce using rule 114 (type_specifier -> enum_specifier .)
    INLINE          reduce using rule 114 (type_specifier -> enum_specifier .)
    VOID            reduce using rule 114 (type_specifier -> enum_specifier .)
    _BOOL           reduce using rule 114 (type_specifier -> enum_specifier .)
    CHAR            reduce using rule 114 (type_specifier -> enum_specifier .)
    SHORT           reduce using rule 114 (type_specifier -> enum_specifier .)
    INT             reduce using rule 114 (type_specifier -> enum_specifier .)
    LONG            reduce using rule 114 (type_specifier -> enum_specifier .)
    FLOAT           reduce using rule 114 (type_specifier -> enum_specifier .)
    DOUBLE          reduce using rule 114 (type_specifier -> enum_specifier .)
    _COMPLEX        reduce using rule 114 (type_specifier -> enum_specifier .)
    SIGNED          reduce using rule 114 (type_specifier -> enum_specifier .)
    UNSIGNED        reduce using rule 114 (type_specifier -> enum_specifier .)
    __INT128        reduce using rule 114 (type_specifier -> enum_specifier .)
    ID              reduce using rule 114 (type_specifier -> enum_specifier .)
    LPAREN          reduce using rule 114 (type_specifier -> enum_specifier .)
    TIMES           reduce using rule 114 (type_specifier -> enum_specifier .)
    TYPEID          reduce using rule 114 (type_specifier -> enum_specifier .)
    SEMI            reduce using rule 114 (type_specifier -> enum_specifier .)
    LBRACKET        reduce using rule 114 (type_specifier -> enum_specifier .)
    COMMA           reduce using rule 114 (type_specifier -> enum_specifier .)
    RPAREN          reduce using rule 114 (type_specifier -> enum_specifier .)
    COLON           reduce using rule 114 (type_specifier -> enum_specifier .)


state 29

    (115) type_specifier -> struct_or_union_specifier .

    CONST           reduce using rule 115 (type_specifier -> struct_or_union_specifier .)
    RESTRICT        reduce using rule 115 (type_specifier -> struct_or_union_specifier .)
    VOLATILE        reduce using rule 115 (type_specifier -> struct_or_union_specifier .)
    AUTO            reduce using rule 115 (type_specifier -> struct_or_union_specifier .)
    REGISTER        reduce using rule 115 (type_specifier -> struct_or_union_specifier .)
    STATIC          reduce using rule 115 (type_specifier -> struct_or_union_specifier .)
    EXTERN          reduce using rule 115 (type_specifier -> struct_or_union_specifier .)
    TYPEDEF         reduce using rule 115 (type_specifier -> struct_or_union_specifier .)
    INLINE          reduce using rule 115 (type_specifier -> struct_or_union_specifier .)
    VOID            reduce using rule 115 (type_specifier -> struct_or_union_specifier .)
    _BOOL           reduce using rule 115 (type_specifier -> struct_or_union_specifier .)
    CHAR            reduce using rule 115 (type_specifier -> struct_or_union_specifier .)
    SHORT           reduce using rule 115 (type_specifier -> struct_or_union_specifier .)
    INT             reduce using rule 115 (type_specifier -> struct_or_union_specifier .)
    LONG            reduce using rule 115 (type_specifier -> struct_or_union_specifier .)
    FLOAT           reduce using rule 115 (type_specifier -> struct_or_union_specifier .)
    DOUBLE          reduce using rule 115 (type_specifier -> struct_or_union_specifier .)
    _COMPLEX        reduce using rule 115 (type_specifier -> struct_or_union_specifier .)
    SIGNED          reduce using rule 115 (type_specifier -> struct_or_union_specifier .)
    UNSIGNED        reduce using rule 115 (type_specifier -> struct_or_union_specifier .)
    __INT128        reduce using rule 115 (type_specifier -> struct_or_union_specifier .)
    ID              reduce using rule 115 (type_specifier -> struct_or_union_specifier .)
    LPAREN          reduce using rule 115 (type_specifier -> struct_or_union_specifier .)
    TIMES           reduce using rule 115 (type_specifier -> struct_or_union_specifier .)
    TYPEID          reduce using rule 115 (type_specifier -> struct_or_union_specifier .)
    SEMI            reduce using rule 115 (type_specifier -> struct_or_union_specifier .)
    LBRACKET        reduce using rule 115 (type_specifier -> struct_or_union_specifier .)
    COMMA           reduce using rule 115 (type_specifier -> struct_or_union_specifier .)
    RPAREN          reduce using rule 115 (type_specifier -> struct_or_union_specifier .)
    COLON           reduce using rule 115 (type_specifier -> struct_or_union_specifier .)


state 30

    (221) typedef_name -> TYPEID .

    CONST           reduce using rule 221 (typedef_name -> TYPEID .)
    RESTRICT        reduce using rule 221 (typedef_name -> TYPEID .)
    VOLATILE        reduce using rule 221 (typedef_name -> TYPEID .)
    AUTO            reduce using rule 221 (typedef_name -> TYPEID .)
    REGISTER        reduce using rule 221 (typedef_name -> TYPEID .)
    STATIC          reduce using rule 221 (typedef_name -> TYPEID .)
    EXTERN          reduce using rule 221 (typedef_name -> TYPEID .)
    TYPEDEF         reduce using rule 221 (typedef_name -> TYPEID .)
    INLINE          reduce using rule 221 (typedef_name -> TYPEID .)
    VOID            reduce using rule 221 (typedef_name -> TYPEID .)
    _BOOL           reduce using rule 221 (typedef_name -> TYPEID .)
    CHAR            reduce using rule 221 (typedef_name -> TYPEID .)
    SHORT           reduce using rule 221 (typedef_name -> TYPEID .)
    INT             reduce using rule 221 (typedef_name -> TYPEID .)
    LONG            reduce using rule 221 (typedef_name -> TYPEID .)
    FLOAT           reduce using rule 221 (typedef_name -> TYPEID .)
    DOUBLE          reduce using rule 221 (typedef_name -> TYPEID .)
    _COMPLEX        reduce using rule 221 (typedef_name -> TYPEID .)
    SIGNED          reduce using rule 221 (typedef_name -> TYPEID .)
    UNSIGNED        reduce using rule 221 (typedef_name -> TYPEID .)
    __INT128        reduce using rule 221 (typedef_name -> TYPEID .)
    ID              reduce using rule 221 (typedef_name -> TYPEID .)
    LPAREN          reduce using rule 221 (typedef_name -> TYPEID .)
    TIMES           reduce using rule 221 (typedef_name -> TYPEID .)
    TYPEID          reduce using rule 221 (typedef_name -> TYPEID .)
    SEMI            reduce using rule 221 (typedef_name -> TYPEID .)
    LBRACKET        reduce using rule 221 (typedef_name -> TYPEID .)
    COMMA           reduce using rule 221 (typedef_name -> TYPEID .)
    RPAREN          reduce using rule 221 (typedef_name -> TYPEID .)
    COLON           reduce using rule 221 (typedef_name -> TYPEID .)


state 31

    (152) enum_specifier -> ENUM . ID
    (153) enum_specifier -> ENUM . TYPEID
    (154) enum_specifier -> ENUM . brace_open enumerator_list brace_close
    (155) enum_specifier -> ENUM . ID brace_open enumerator_list brace_close
    (156) enum_specifier -> ENUM . TYPEID brace_open enumerator_list brace_close
    (307) brace_open -> . LBRACE

    ID              shift and go to state 98
    TYPEID          shift and go to state 99
    LBRACE          shift and go to state 101

    brace_open                     shift and go to state 100

state 32

    (132) struct_or_union_specifier -> struct_or_union . ID
    (133) struct_or_union_specifier -> struct_or_union . TYPEID
    (134) struct_or_union_specifier -> struct_or_union . brace_open struct_declaration_list brace_close
    (135) struct_or_union_specifier -> struct_or_union . brace_open brace_close
    (136) struct_or_union_specifier -> struct_or_union . ID brace_open struct_declaration_list brace_close
    (137) struct_or_union_specifier -> struct_or_union . ID brace_open brace_close
    (138) struct_or_union_specifier -> struct_or_union . TYPEID brace_open struct_declaration_list brace_close
    (139) struct_or_union_specifier -> struct_or_union . TYPEID brace_open brace_close
    (307) brace_open -> . LBRACE

    ID              shift and go to state 102
    TYPEID          shift and go to state 103
    LBRACE          shift and go to state 101

    brace_open                     shift and go to state 104

state 33

    (101) type_specifier_no_typeid -> VOID .

    CONST           reduce using rule 101 (type_specifier_no_typeid -> VOID .)
    RESTRICT        reduce using rule 101 (type_specifier_no_typeid -> VOID .)
    VOLATILE        reduce using rule 101 (type_specifier_no_typeid -> VOID .)
    AUTO            reduce using rule 101 (type_specifier_no_typeid -> VOID .)
    REGISTER        reduce using rule 101 (type_specifier_no_typeid -> VOID .)
    STATIC          reduce using rule 101 (type_specifier_no_typeid -> VOID .)
    EXTERN          reduce using rule 101 (type_specifier_no_typeid -> VOID .)
    TYPEDEF         reduce using rule 101 (type_specifier_no_typeid -> VOID .)
    INLINE          reduce using rule 101 (type_specifier_no_typeid -> VOID .)
    VOID            reduce using rule 101 (type_specifier_no_typeid -> VOID .)
    _BOOL           reduce using rule 101 (type_specifier_no_typeid -> VOID .)
    CHAR            reduce using rule 101 (type_specifier_no_typeid -> VOID .)
    SHORT           reduce using rule 101 (type_specifier_no_typeid -> VOID .)
    INT             reduce using rule 101 (type_specifier_no_typeid -> VOID .)
    LONG            reduce using rule 101 (type_specifier_no_typeid -> VOID .)
    FLOAT           reduce using rule 101 (type_specifier_no_typeid -> VOID .)
    DOUBLE          reduce using rule 101 (type_specifier_no_typeid -> VOID .)
    _COMPLEX        reduce using rule 101 (type_specifier_no_typeid -> VOID .)
    SIGNED          reduce using rule 101 (type_specifier_no_typeid -> VOID .)
    UNSIGNED        reduce using rule 101 (type_specifier_no_typeid -> VOID .)
    __INT128        reduce using rule 101 (type_specifier_no_typeid -> VOID .)
    ID              reduce using rule 101 (type_specifier_no_typeid -> VOID .)
    LPAREN          reduce using rule 101 (type_specifier_no_typeid -> VOID .)
    TIMES           reduce using rule 101 (type_specifier_no_typeid -> VOID .)
    TYPEID          reduce using rule 101 (type_specifier_no_typeid -> VOID .)
    SEMI            reduce using rule 101 (type_specifier_no_typeid -> VOID .)
    LBRACKET        reduce using rule 101 (type_specifier_no_typeid -> VOID .)
    COMMA           reduce using rule 101 (type_specifier_no_typeid -> VOID .)
    RPAREN          reduce using rule 101 (type_specifier_no_typeid -> VOID .)
    COLON           reduce using rule 101 (type_specifier_no_typeid -> VOID .)


state 34

    (102) type_specifier_no_typeid -> _BOOL .

    CONST           reduce using rule 102 (type_specifier_no_typeid -> _BOOL .)
    RESTRICT        reduce using rule 102 (type_specifier_no_typeid -> _BOOL .)
    VOLATILE        reduce using rule 102 (type_specifier_no_typeid -> _BOOL .)
    AUTO            reduce using rule 102 (type_specifier_no_typeid -> _BOOL .)
    REGISTER        reduce using rule 102 (type_specifier_no_typeid -> _BOOL .)
    STATIC          reduce using rule 102 (type_specifier_no_typeid -> _BOOL .)
    EXTERN          reduce using rule 102 (type_specifier_no_typeid -> _BOOL .)
    TYPEDEF         reduce using rule 102 (type_specifier_no_typeid -> _BOOL .)
    INLINE          reduce using rule 102 (type_specifier_no_typeid -> _BOOL .)
    VOID            reduce using rule 102 (type_specifier_no_typeid -> _BOOL .)
    _BOOL           reduce using rule 102 (type_specifier_no_typeid -> _BOOL .)
    CHAR            reduce using rule 102 (type_specifier_no_typeid -> _BOOL .)
    SHORT           reduce using rule 102 (type_specifier_no_typeid -> _BOOL .)
    INT             reduce using rule 102 (type_specifier_no_typeid -> _BOOL .)
    LONG            reduce using rule 102 (type_specifier_no_typeid -> _BOOL .)
    FLOAT           reduce using rule 102 (type_specifier_no_typeid -> _BOOL .)
    DOUBLE          reduce using rule 102 (type_specifier_no_typeid -> _BOOL .)
    _COMPLEX        reduce using rule 102 (type_specifier_no_typeid -> _BOOL .)
    SIGNED          reduce using rule 102 (type_specifier_no_typeid -> _BOOL .)
    UNSIGNED        reduce using rule 102 (type_specifier_no_typeid -> _BOOL .)
    __INT128        reduce using rule 102 (type_specifier_no_typeid -> _BOOL .)
    ID              reduce using rule 102 (type_specifier_no_typeid -> _BOOL .)
    LPAREN          reduce using rule 102 (type_specifier_no_typeid -> _BOOL .)
    TIMES           reduce using rule 102 (type_specifier_no_typeid -> _BOOL .)
    TYPEID          reduce using rule 102 (type_specifier_no_typeid -> _BOOL .)
    SEMI            reduce using rule 102 (type_specifier_no_typeid -> _BOOL .)
    LBRACKET        reduce using rule 102 (type_specifier_no_typeid -> _BOOL .)
    COMMA           reduce using rule 102 (type_specifier_no_typeid -> _BOOL .)
    RPAREN          reduce using rule 102 (type_specifier_no_typeid -> _BOOL .)
    COLON           reduce using rule 102 (type_specifier_no_typeid -> _BOOL .)


state 35

    (103) type_specifier_no_typeid -> CHAR .

    CONST           reduce using rule 103 (type_specifier_no_typeid -> CHAR .)
    RESTRICT        reduce using rule 103 (type_specifier_no_typeid -> CHAR .)
    VOLATILE        reduce using rule 103 (type_specifier_no_typeid -> CHAR .)
    AUTO            reduce using rule 103 (type_specifier_no_typeid -> CHAR .)
    REGISTER        reduce using rule 103 (type_specifier_no_typeid -> CHAR .)
    STATIC          reduce using rule 103 (type_specifier_no_typeid -> CHAR .)
    EXTERN          reduce using rule 103 (type_specifier_no_typeid -> CHAR .)
    TYPEDEF         reduce using rule 103 (type_specifier_no_typeid -> CHAR .)
    INLINE          reduce using rule 103 (type_specifier_no_typeid -> CHAR .)
    VOID            reduce using rule 103 (type_specifier_no_typeid -> CHAR .)
    _BOOL           reduce using rule 103 (type_specifier_no_typeid -> CHAR .)
    CHAR            reduce using rule 103 (type_specifier_no_typeid -> CHAR .)
    SHORT           reduce using rule 103 (type_specifier_no_typeid -> CHAR .)
    INT             reduce using rule 103 (type_specifier_no_typeid -> CHAR .)
    LONG            reduce using rule 103 (type_specifier_no_typeid -> CHAR .)
    FLOAT           reduce using rule 103 (type_specifier_no_typeid -> CHAR .)
    DOUBLE          reduce using rule 103 (type_specifier_no_typeid -> CHAR .)
    _COMPLEX        reduce using rule 103 (type_specifier_no_typeid -> CHAR .)
    SIGNED          reduce using rule 103 (type_specifier_no_typeid -> CHAR .)
    UNSIGNED        reduce using rule 103 (type_specifier_no_typeid -> CHAR .)
    __INT128        reduce using rule 103 (type_specifier_no_typeid -> CHAR .)
    ID              reduce using rule 103 (type_specifier_no_typeid -> CHAR .)
    LPAREN          reduce using rule 103 (type_specifier_no_typeid -> CHAR .)
    TIMES           reduce using rule 103 (type_specifier_no_typeid -> CHAR .)
    TYPEID          reduce using rule 103 (type_specifier_no_typeid -> CHAR .)
    SEMI            reduce using rule 103 (type_specifier_no_typeid -> CHAR .)
    LBRACKET        reduce using rule 103 (type_specifier_no_typeid -> CHAR .)
    COMMA           reduce using rule 103 (type_specifier_no_typeid -> CHAR .)
    RPAREN          reduce using rule 103 (type_specifier_no_typeid -> CHAR .)
    COLON           reduce using rule 103 (type_specifier_no_typeid -> CHAR .)


state 36

    (104) type_specifier_no_typeid -> SHORT .

    CONST           reduce using rule 104 (type_specifier_no_typeid -> SHORT .)
    RESTRICT        reduce using rule 104 (type_specifier_no_typeid -> SHORT .)
    VOLATILE        reduce using rule 104 (type_specifier_no_typeid -> SHORT .)
    AUTO            reduce using rule 104 (type_specifier_no_typeid -> SHORT .)
    REGISTER        reduce using rule 104 (type_specifier_no_typeid -> SHORT .)
    STATIC          reduce using rule 104 (type_specifier_no_typeid -> SHORT .)
    EXTERN          reduce using rule 104 (type_specifier_no_typeid -> SHORT .)
    TYPEDEF         reduce using rule 104 (type_specifier_no_typeid -> SHORT .)
    INLINE          reduce using rule 104 (type_specifier_no_typeid -> SHORT .)
    VOID            reduce using rule 104 (type_specifier_no_typeid -> SHORT .)
    _BOOL           reduce using rule 104 (type_specifier_no_typeid -> SHORT .)
    CHAR            reduce using rule 104 (type_specifier_no_typeid -> SHORT .)
    SHORT           reduce using rule 104 (type_specifier_no_typeid -> SHORT .)
    INT             reduce using rule 104 (type_specifier_no_typeid -> SHORT .)
    LONG            reduce using rule 104 (type_specifier_no_typeid -> SHORT .)
    FLOAT           reduce using rule 104 (type_specifier_no_typeid -> SHORT .)
    DOUBLE          reduce using rule 104 (type_specifier_no_typeid -> SHORT .)
    _COMPLEX        reduce using rule 104 (type_specifier_no_typeid -> SHORT .)
    SIGNED          reduce using rule 104 (type_specifier_no_typeid -> SHORT .)
    UNSIGNED        reduce using rule 104 (type_specifier_no_typeid -> SHORT .)
    __INT128        reduce using rule 104 (type_specifier_no_typeid -> SHORT .)
    ID              reduce using rule 104 (type_specifier_no_typeid -> SHORT .)
    LPAREN          reduce using rule 104 (type_specifier_no_typeid -> SHORT .)
    TIMES           reduce using rule 104 (type_specifier_no_typeid -> SHORT .)
    TYPEID          reduce using rule 104 (type_specifier_no_typeid -> SHORT .)
    SEMI            reduce using rule 104 (type_specifier_no_typeid -> SHORT .)
    LBRACKET        reduce using rule 104 (type_specifier_no_typeid -> SHORT .)
    COMMA           reduce using rule 104 (type_specifier_no_typeid -> SHORT .)
    RPAREN          reduce using rule 104 (type_specifier_no_typeid -> SHORT .)
    COLON           reduce using rule 104 (type_specifier_no_typeid -> SHORT .)


state 37

    (105) type_specifier_no_typeid -> INT .

    CONST           reduce using rule 105 (type_specifier_no_typeid -> INT .)
    RESTRICT        reduce using rule 105 (type_specifier_no_typeid -> INT .)
    VOLATILE        reduce using rule 105 (type_specifier_no_typeid -> INT .)
    AUTO            reduce using rule 105 (type_specifier_no_typeid -> INT .)
    REGISTER        reduce using rule 105 (type_specifier_no_typeid -> INT .)
    STATIC          reduce using rule 105 (type_specifier_no_typeid -> INT .)
    EXTERN          reduce using rule 105 (type_specifier_no_typeid -> INT .)
    TYPEDEF         reduce using rule 105 (type_specifier_no_typeid -> INT .)
    INLINE          reduce using rule 105 (type_specifier_no_typeid -> INT .)
    VOID            reduce using rule 105 (type_specifier_no_typeid -> INT .)
    _BOOL           reduce using rule 105 (type_specifier_no_typeid -> INT .)
    CHAR            reduce using rule 105 (type_specifier_no_typeid -> INT .)
    SHORT           reduce using rule 105 (type_specifier_no_typeid -> INT .)
    INT             reduce using rule 105 (type_specifier_no_typeid -> INT .)
    LONG            reduce using rule 105 (type_specifier_no_typeid -> INT .)
    FLOAT           reduce using rule 105 (type_specifier_no_typeid -> INT .)
    DOUBLE          reduce using rule 105 (type_specifier_no_typeid -> INT .)
    _COMPLEX        reduce using rule 105 (type_specifier_no_typeid -> INT .)
    SIGNED          reduce using rule 105 (type_specifier_no_typeid -> INT .)
    UNSIGNED        reduce using rule 105 (type_specifier_no_typeid -> INT .)
    __INT128        reduce using rule 105 (type_specifier_no_typeid -> INT .)
    ID              reduce using rule 105 (type_specifier_no_typeid -> INT .)
    LPAREN          reduce using rule 105 (type_specifier_no_typeid -> INT .)
    TIMES           reduce using rule 105 (type_specifier_no_typeid -> INT .)
    TYPEID          reduce using rule 105 (type_specifier_no_typeid -> INT .)
    SEMI            reduce using rule 105 (type_specifier_no_typeid -> INT .)
    LBRACKET        reduce using rule 105 (type_specifier_no_typeid -> INT .)
    COMMA           reduce using rule 105 (type_specifier_no_typeid -> INT .)
    RPAREN          reduce using rule 105 (type_specifier_no_typeid -> INT .)
    COLON           reduce using rule 105 (type_specifier_no_typeid -> INT .)


state 38

    (106) type_specifier_no_typeid -> LONG .

    CONST           reduce using rule 106 (type_specifier_no_typeid -> LONG .)
    RESTRICT        reduce using rule 106 (type_specifier_no_typeid -> LONG .)
    VOLATILE        reduce using rule 106 (type_specifier_no_typeid -> LONG .)
    AUTO            reduce using rule 106 (type_specifier_no_typeid -> LONG .)
    REGISTER        reduce using rule 106 (type_specifier_no_typeid -> LONG .)
    STATIC          reduce using rule 106 (type_specifier_no_typeid -> LONG .)
    EXTERN          reduce using rule 106 (type_specifier_no_typeid -> LONG .)
    TYPEDEF         reduce using rule 106 (type_specifier_no_typeid -> LONG .)
    INLINE          reduce using rule 106 (type_specifier_no_typeid -> LONG .)
    VOID            reduce using rule 106 (type_specifier_no_typeid -> LONG .)
    _BOOL           reduce using rule 106 (type_specifier_no_typeid -> LONG .)
    CHAR            reduce using rule 106 (type_specifier_no_typeid -> LONG .)
    SHORT           reduce using rule 106 (type_specifier_no_typeid -> LONG .)
    INT             reduce using rule 106 (type_specifier_no_typeid -> LONG .)
    LONG            reduce using rule 106 (type_specifier_no_typeid -> LONG .)
    FLOAT           reduce using rule 106 (type_specifier_no_typeid -> LONG .)
    DOUBLE          reduce using rule 106 (type_specifier_no_typeid -> LONG .)
    _COMPLEX        reduce using rule 106 (type_specifier_no_typeid -> LONG .)
    SIGNED          reduce using rule 106 (type_specifier_no_typeid -> LONG .)
    UNSIGNED        reduce using rule 106 (type_specifier_no_typeid -> LONG .)
    __INT128        reduce using rule 106 (type_specifier_no_typeid -> LONG .)
    ID              reduce using rule 106 (type_specifier_no_typeid -> LONG .)
    LPAREN          reduce using rule 106 (type_specifier_no_typeid -> LONG .)
    TIMES           reduce using rule 106 (type_specifier_no_typeid -> LONG .)
    TYPEID          reduce using rule 106 (type_specifier_no_typeid -> LONG .)
    SEMI            reduce using rule 106 (type_specifier_no_typeid -> LONG .)
    LBRACKET        reduce using rule 106 (type_specifier_no_typeid -> LONG .)
    COMMA           reduce using rule 106 (type_specifier_no_typeid -> LONG .)
    RPAREN          reduce using rule 106 (type_specifier_no_typeid -> LONG .)
    COLON           reduce using rule 106 (type_specifier_no_typeid -> LONG .)


state 39

    (107) type_specifier_no_typeid -> FLOAT .

    CONST           reduce using rule 107 (type_specifier_no_typeid -> FLOAT .)
    RESTRICT        reduce using rule 107 (type_specifier_no_typeid -> FLOAT .)
    VOLATILE        reduce using rule 107 (type_specifier_no_typeid -> FLOAT .)
    AUTO            reduce using rule 107 (type_specifier_no_typeid -> FLOAT .)
    REGISTER        reduce using rule 107 (type_specifier_no_typeid -> FLOAT .)
    STATIC          reduce using rule 107 (type_specifier_no_typeid -> FLOAT .)
    EXTERN          reduce using rule 107 (type_specifier_no_typeid -> FLOAT .)
    TYPEDEF         reduce using rule 107 (type_specifier_no_typeid -> FLOAT .)
    INLINE          reduce using rule 107 (type_specifier_no_typeid -> FLOAT .)
    VOID            reduce using rule 107 (type_specifier_no_typeid -> FLOAT .)
    _BOOL           reduce using rule 107 (type_specifier_no_typeid -> FLOAT .)
    CHAR            reduce using rule 107 (type_specifier_no_typeid -> FLOAT .)
    SHORT           reduce using rule 107 (type_specifier_no_typeid -> FLOAT .)
    INT             reduce using rule 107 (type_specifier_no_typeid -> FLOAT .)
    LONG            reduce using rule 107 (type_specifier_no_typeid -> FLOAT .)
    FLOAT           reduce using rule 107 (type_specifier_no_typeid -> FLOAT .)
    DOUBLE          reduce using rule 107 (type_specifier_no_typeid -> FLOAT .)
    _COMPLEX        reduce using rule 107 (type_specifier_no_typeid -> FLOAT .)
    SIGNED          reduce using rule 107 (type_specifier_no_typeid -> FLOAT .)
    UNSIGNED        reduce using rule 107 (type_specifier_no_typeid -> FLOAT .)
    __INT128        reduce using rule 107 (type_specifier_no_typeid -> FLOAT .)
    ID              reduce using rule 107 (type_specifier_no_typeid -> FLOAT .)
    LPAREN          reduce using rule 107 (type_specifier_no_typeid -> FLOAT .)
    TIMES           reduce using rule 107 (type_specifier_no_typeid -> FLOAT .)
    TYPEID          reduce using rule 107 (type_specifier_no_typeid -> FLOAT .)
    SEMI            reduce using rule 107 (type_specifier_no_typeid -> FLOAT .)
    LBRACKET        reduce using rule 107 (type_specifier_no_typeid -> FLOAT .)
    COMMA           reduce using rule 107 (type_specifier_no_typeid -> FLOAT .)
    RPAREN          reduce using rule 107 (type_specifier_no_typeid -> FLOAT .)
    COLON           reduce using rule 107 (type_specifier_no_typeid -> FLOAT .)


state 40

    (108) type_specifier_no_typeid -> DOUBLE .

    CONST           reduce using rule 108 (type_specifier_no_typeid -> DOUBLE .)
    RESTRICT        reduce using rule 108 (type_specifier_no_typeid -> DOUBLE .)
    VOLATILE        reduce using rule 108 (type_specifier_no_typeid -> DOUBLE .)
    AUTO            reduce using rule 108 (type_specifier_no_typeid -> DOUBLE .)
    REGISTER        reduce using rule 108 (type_specifier_no_typeid -> DOUBLE .)
    STATIC          reduce using rule 108 (type_specifier_no_typeid -> DOUBLE .)
    EXTERN          reduce using rule 108 (type_specifier_no_typeid -> DOUBLE .)
    TYPEDEF         reduce using rule 108 (type_specifier_no_typeid -> DOUBLE .)
    INLINE          reduce using rule 108 (type_specifier_no_typeid -> DOUBLE .)
    VOID            reduce using rule 108 (type_specifier_no_typeid -> DOUBLE .)
    _BOOL           reduce using rule 108 (type_specifier_no_typeid -> DOUBLE .)
    CHAR            reduce using rule 108 (type_specifier_no_typeid -> DOUBLE .)
    SHORT           reduce using rule 108 (type_specifier_no_typeid -> DOUBLE .)
    INT             reduce using rule 108 (type_specifier_no_typeid -> DOUBLE .)
    LONG            reduce using rule 108 (type_specifier_no_typeid -> DOUBLE .)
    FLOAT           reduce using rule 108 (type_specifier_no_typeid -> DOUBLE .)
    DOUBLE          reduce using rule 108 (type_specifier_no_typeid -> DOUBLE .)
    _COMPLEX        reduce using rule 108 (type_specifier_no_typeid -> DOUBLE .)
    SIGNED          reduce using rule 108 (type_specifier_no_typeid -> DOUBLE .)
    UNSIGNED        reduce using rule 108 (type_specifier_no_typeid -> DOUBLE .)
    __INT128        reduce using rule 108 (type_specifier_no_typeid -> DOUBLE .)
    ID              reduce using rule 108 (type_specifier_no_typeid -> DOUBLE .)
    LPAREN          reduce using rule 108 (type_specifier_no_typeid -> DOUBLE .)
    TIMES           reduce using rule 108 (type_specifier_no_typeid -> DOUBLE .)
    TYPEID          reduce using rule 108 (type_specifier_no_typeid -> DOUBLE .)
    SEMI            reduce using rule 108 (type_specifier_no_typeid -> DOUBLE .)
    LBRACKET        reduce using rule 108 (type_specifier_no_typeid -> DOUBLE .)
    COMMA           reduce using rule 108 (type_specifier_no_typeid -> DOUBLE .)
    RPAREN          reduce using rule 108 (type_specifier_no_typeid -> DOUBLE .)
    COLON           reduce using rule 108 (type_specifier_no_typeid -> DOUBLE .)


state 41

    (109) type_specifier_no_typeid -> _COMPLEX .

    CONST           reduce using rule 109 (type_specifier_no_typeid -> _COMPLEX .)
    RESTRICT        reduce using rule 109 (type_specifier_no_typeid -> _COMPLEX .)
    VOLATILE        reduce using rule 109 (type_specifier_no_typeid -> _COMPLEX .)
    AUTO            reduce using rule 109 (type_specifier_no_typeid -> _COMPLEX .)
    REGISTER        reduce using rule 109 (type_specifier_no_typeid -> _COMPLEX .)
    STATIC          reduce using rule 109 (type_specifier_no_typeid -> _COMPLEX .)
    EXTERN          reduce using rule 109 (type_specifier_no_typeid -> _COMPLEX .)
    TYPEDEF         reduce using rule 109 (type_specifier_no_typeid -> _COMPLEX .)
    INLINE          reduce using rule 109 (type_specifier_no_typeid -> _COMPLEX .)
    VOID            reduce using rule 109 (type_specifier_no_typeid -> _COMPLEX .)
    _BOOL           reduce using rule 109 (type_specifier_no_typeid -> _COMPLEX .)
    CHAR            reduce using rule 109 (type_specifier_no_typeid -> _COMPLEX .)
    SHORT           reduce using rule 109 (type_specifier_no_typeid -> _COMPLEX .)
    INT             reduce using rule 109 (type_specifier_no_typeid -> _COMPLEX .)
    LONG            reduce using rule 109 (type_specifier_no_typeid -> _COMPLEX .)
    FLOAT           reduce using rule 109 (type_specifier_no_typeid -> _COMPLEX .)
    DOUBLE          reduce using rule 109 (type_specifier_no_typeid -> _COMPLEX .)
    _COMPLEX        reduce using rule 109 (type_specifier_no_typeid -> _COMPLEX .)
    SIGNED          reduce using rule 109 (type_specifier_no_typeid -> _COMPLEX .)
    UNSIGNED        reduce using rule 109 (type_specifier_no_typeid -> _COMPLEX .)
    __INT128        reduce using rule 109 (type_specifier_no_typeid -> _COMPLEX .)
    ID              reduce using rule 109 (type_specifier_no_typeid -> _COMPLEX .)
    LPAREN          reduce using rule 109 (type_specifier_no_typeid -> _COMPLEX .)
    TIMES           reduce using rule 109 (type_specifier_no_typeid -> _COMPLEX .)
    TYPEID          reduce using rule 109 (type_specifier_no_typeid -> _COMPLEX .)
    SEMI            reduce using rule 109 (type_specifier_no_typeid -> _COMPLEX .)
    LBRACKET        reduce using rule 109 (type_specifier_no_typeid -> _COMPLEX .)
    COMMA           reduce using rule 109 (type_specifier_no_typeid -> _COMPLEX .)
    RPAREN          reduce using rule 109 (type_specifier_no_typeid -> _COMPLEX .)
    COLON           reduce using rule 109 (type_specifier_no_typeid -> _COMPLEX .)


state 42

    (110) type_specifier_no_typeid -> SIGNED .

    CONST           reduce using rule 110 (type_specifier_no_typeid -> SIGNED .)
    RESTRICT        reduce using rule 110 (type_specifier_no_typeid -> SIGNED .)
    VOLATILE        reduce using rule 110 (type_specifier_no_typeid -> SIGNED .)
    AUTO            reduce using rule 110 (type_specifier_no_typeid -> SIGNED .)
    REGISTER        reduce using rule 110 (type_specifier_no_typeid -> SIGNED .)
    STATIC          reduce using rule 110 (type_specifier_no_typeid -> SIGNED .)
    EXTERN          reduce using rule 110 (type_specifier_no_typeid -> SIGNED .)
    TYPEDEF         reduce using rule 110 (type_specifier_no_typeid -> SIGNED .)
    INLINE          reduce using rule 110 (type_specifier_no_typeid -> SIGNED .)
    VOID            reduce using rule 110 (type_specifier_no_typeid -> SIGNED .)
    _BOOL           reduce using rule 110 (type_specifier_no_typeid -> SIGNED .)
    CHAR            reduce using rule 110 (type_specifier_no_typeid -> SIGNED .)
    SHORT           reduce using rule 110 (type_specifier_no_typeid -> SIGNED .)
    INT             reduce using rule 110 (type_specifier_no_typeid -> SIGNED .)
    LONG            reduce using rule 110 (type_specifier_no_typeid -> SIGNED .)
    FLOAT           reduce using rule 110 (type_specifier_no_typeid -> SIGNED .)
    DOUBLE          reduce using rule 110 (type_specifier_no_typeid -> SIGNED .)
    _COMPLEX        reduce using rule 110 (type_specifier_no_typeid -> SIGNED .)
    SIGNED          reduce using rule 110 (type_specifier_no_typeid -> SIGNED .)
    UNSIGNED        reduce using rule 110 (type_specifier_no_typeid -> SIGNED .)
    __INT128        reduce using rule 110 (type_specifier_no_typeid -> SIGNED .)
    ID              reduce using rule 110 (type_specifier_no_typeid -> SIGNED .)
    LPAREN          reduce using rule 110 (type_specifier_no_typeid -> SIGNED .)
    TIMES           reduce using rule 110 (type_specifier_no_typeid -> SIGNED .)
    TYPEID          reduce using rule 110 (type_specifier_no_typeid -> SIGNED .)
    SEMI            reduce using rule 110 (type_specifier_no_typeid -> SIGNED .)
    LBRACKET        reduce using rule 110 (type_specifier_no_typeid -> SIGNED .)
    COMMA           reduce using rule 110 (type_specifier_no_typeid -> SIGNED .)
    RPAREN          reduce using rule 110 (type_specifier_no_typeid -> SIGNED .)
    COLON           reduce using rule 110 (type_specifier_no_typeid -> SIGNED .)


state 43

    (111) type_specifier_no_typeid -> UNSIGNED .

    CONST           reduce using rule 111 (type_specifier_no_typeid -> UNSIGNED .)
    RESTRICT        reduce using rule 111 (type_specifier_no_typeid -> UNSIGNED .)
    VOLATILE        reduce using rule 111 (type_specifier_no_typeid -> UNSIGNED .)
    AUTO            reduce using rule 111 (type_specifier_no_typeid -> UNSIGNED .)
    REGISTER        reduce using rule 111 (type_specifier_no_typeid -> UNSIGNED .)
    STATIC          reduce using rule 111 (type_specifier_no_typeid -> UNSIGNED .)
    EXTERN          reduce using rule 111 (type_specifier_no_typeid -> UNSIGNED .)
    TYPEDEF         reduce using rule 111 (type_specifier_no_typeid -> UNSIGNED .)
    INLINE          reduce using rule 111 (type_specifier_no_typeid -> UNSIGNED .)
    VOID            reduce using rule 111 (type_specifier_no_typeid -> UNSIGNED .)
    _BOOL           reduce using rule 111 (type_specifier_no_typeid -> UNSIGNED .)
    CHAR            reduce using rule 111 (type_specifier_no_typeid -> UNSIGNED .)
    SHORT           reduce using rule 111 (type_specifier_no_typeid -> UNSIGNED .)
    INT             reduce using rule 111 (type_specifier_no_typeid -> UNSIGNED .)
    LONG            reduce using rule 111 (type_specifier_no_typeid -> UNSIGNED .)
    FLOAT           reduce using rule 111 (type_specifier_no_typeid -> UNSIGNED .)
    DOUBLE          reduce using rule 111 (type_specifier_no_typeid -> UNSIGNED .)
    _COMPLEX        reduce using rule 111 (type_specifier_no_typeid -> UNSIGNED .)
    SIGNED          reduce using rule 111 (type_specifier_no_typeid -> UNSIGNED .)
    UNSIGNED        reduce using rule 111 (type_specifier_no_typeid -> UNSIGNED .)
    __INT128        reduce using rule 111 (type_specifier_no_typeid -> UNSIGNED .)
    ID              reduce using rule 111 (type_specifier_no_typeid -> UNSIGNED .)
    LPAREN          reduce using rule 111 (type_specifier_no_typeid -> UNSIGNED .)
    TIMES           reduce using rule 111 (type_specifier_no_typeid -> UNSIGNED .)
    TYPEID          reduce using rule 111 (type_specifier_no_typeid -> UNSIGNED .)
    SEMI            reduce using rule 111 (type_specifier_no_typeid -> UNSIGNED .)
    LBRACKET        reduce using rule 111 (type_specifier_no_typeid -> UNSIGNED .)
    COMMA           reduce using rule 111 (type_specifier_no_typeid -> UNSIGNED .)
    RPAREN          reduce using rule 111 (type_specifier_no_typeid -> UNSIGNED .)
    COLON           reduce using rule 111 (type_specifier_no_typeid -> UNSIGNED .)


state 44

    (112) type_specifier_no_typeid -> __INT128 .

    CONST           reduce using rule 112 (type_specifier_no_typeid -> __INT128 .)
    RESTRICT        reduce using rule 112 (type_specifier_no_typeid -> __INT128 .)
    VOLATILE        reduce using rule 112 (type_specifier_no_typeid -> __INT128 .)
    AUTO            reduce using rule 112 (type_specifier_no_typeid -> __INT128 .)
    REGISTER        reduce using rule 112 (type_specifier_no_typeid -> __INT128 .)
    STATIC          reduce using rule 112 (type_specifier_no_typeid -> __INT128 .)
    EXTERN          reduce using rule 112 (type_specifier_no_typeid -> __INT128 .)
    TYPEDEF         reduce using rule 112 (type_specifier_no_typeid -> __INT128 .)
    INLINE          reduce using rule 112 (type_specifier_no_typeid -> __INT128 .)
    VOID            reduce using rule 112 (type_specifier_no_typeid -> __INT128 .)
    _BOOL           reduce using rule 112 (type_specifier_no_typeid -> __INT128 .)
    CHAR            reduce using rule 112 (type_specifier_no_typeid -> __INT128 .)
    SHORT           reduce using rule 112 (type_specifier_no_typeid -> __INT128 .)
    INT             reduce using rule 112 (type_specifier_no_typeid -> __INT128 .)
    LONG            reduce using rule 112 (type_specifier_no_typeid -> __INT128 .)
    FLOAT           reduce using rule 112 (type_specifier_no_typeid -> __INT128 .)
    DOUBLE          reduce using rule 112 (type_specifier_no_typeid -> __INT128 .)
    _COMPLEX        reduce using rule 112 (type_specifier_no_typeid -> __INT128 .)
    SIGNED          reduce using rule 112 (type_specifier_no_typeid -> __INT128 .)
    UNSIGNED        reduce using rule 112 (type_specifier_no_typeid -> __INT128 .)
    __INT128        reduce using rule 112 (type_specifier_no_typeid -> __INT128 .)
    ID              reduce using rule 112 (type_specifier_no_typeid -> __INT128 .)
    LPAREN          reduce using rule 112 (type_specifier_no_typeid -> __INT128 .)
    TIMES           reduce using rule 112 (type_specifier_no_typeid -> __INT128 .)
    TYPEID          reduce using rule 112 (type_specifier_no_typeid -> __INT128 .)
    SEMI            reduce using rule 112 (type_specifier_no_typeid -> __INT128 .)
    LBRACKET        reduce using rule 112 (type_specifier_no_typeid -> __INT128 .)
    COMMA           reduce using rule 112 (type_specifier_no_typeid -> __INT128 .)
    RPAREN          reduce using rule 112 (type_specifier_no_typeid -> __INT128 .)
    COLON           reduce using rule 112 (type_specifier_no_typeid -> __INT128 .)


state 45

    (117) type_qualifier -> CONST .

    CONST           reduce using rule 117 (type_qualifier -> CONST .)
    RESTRICT        reduce using rule 117 (type_qualifier -> CONST .)
    VOLATILE        reduce using rule 117 (type_qualifier -> CONST .)
    AUTO            reduce using rule 117 (type_qualifier -> CONST .)
    REGISTER        reduce using rule 117 (type_qualifier -> CONST .)
    STATIC          reduce using rule 117 (type_qualifier -> CONST .)
    EXTERN          reduce using rule 117 (type_qualifier -> CONST .)
    TYPEDEF         reduce using rule 117 (type_qualifier -> CONST .)
    INLINE          reduce using rule 117 (type_qualifier -> CONST .)
    TYPEID          reduce using rule 117 (type_qualifier -> CONST .)
    ENUM            reduce using rule 117 (type_qualifier -> CONST .)
    VOID            reduce using rule 117 (type_qualifier -> CONST .)
    _BOOL           reduce using rule 117 (type_qualifier -> CONST .)
    CHAR            reduce using rule 117 (type_qualifier -> CONST .)
    SHORT           reduce using rule 117 (type_qualifier -> CONST .)
    INT             reduce using rule 117 (type_qualifier -> CONST .)
    LONG            reduce using rule 117 (type_qualifier -> CONST .)
    FLOAT           reduce using rule 117 (type_qualifier -> CONST .)
    DOUBLE          reduce using rule 117 (type_qualifier -> CONST .)
    _COMPLEX        reduce using rule 117 (type_qualifier -> CONST .)
    SIGNED          reduce using rule 117 (type_qualifier -> CONST .)
    UNSIGNED        reduce using rule 117 (type_qualifier -> CONST .)
    __INT128        reduce using rule 117 (type_qualifier -> CONST .)
    STRUCT          reduce using rule 117 (type_qualifier -> CONST .)
    UNION           reduce using rule 117 (type_qualifier -> CONST .)
    ID              reduce using rule 117 (type_qualifier -> CONST .)
    LPAREN          reduce using rule 117 (type_qualifier -> CONST .)
    TIMES           reduce using rule 117 (type_qualifier -> CONST .)
    SEMI            reduce using rule 117 (type_qualifier -> CONST .)
    LBRACKET        reduce using rule 117 (type_qualifier -> CONST .)
    COMMA           reduce using rule 117 (type_qualifier -> CONST .)
    RPAREN          reduce using rule 117 (type_qualifier -> CONST .)
    PLUSPLUS        reduce using rule 117 (type_qualifier -> CONST .)
    MINUSMINUS      reduce using rule 117 (type_qualifier -> CONST .)
    SIZEOF          reduce using rule 117 (type_qualifier -> CONST .)
    AND             reduce using rule 117 (type_qualifier -> CONST .)
    PLUS            reduce using rule 117 (type_qualifier -> CONST .)
    MINUS           reduce using rule 117 (type_qualifier -> CONST .)
    NOT             reduce using rule 117 (type_qualifier -> CONST .)
    LNOT            reduce using rule 117 (type_qualifier -> CONST .)
    OFFSETOF        reduce using rule 117 (type_qualifier -> CONST .)
    INT_CONST_DEC   reduce using rule 117 (type_qualifier -> CONST .)
    INT_CONST_OCT   reduce using rule 117 (type_qualifier -> CONST .)
    INT_CONST_HEX   reduce using rule 117 (type_qualifier -> CONST .)
    INT_CONST_BIN   reduce using rule 117 (type_qualifier -> CONST .)
    FLOAT_CONST     reduce using rule 117 (type_qualifier -> CONST .)
    HEX_FLOAT_CONST reduce using rule 117 (type_qualifier -> CONST .)
    CHAR_CONST      reduce using rule 117 (type_qualifier -> CONST .)
    WCHAR_CONST     reduce using rule 117 (type_qualifier -> CONST .)
    STRING_LITERAL  reduce using rule 117 (type_qualifier -> CONST .)
    WSTRING_LITERAL reduce using rule 117 (type_qualifier -> CONST .)
    RBRACKET        reduce using rule 117 (type_qualifier -> CONST .)
    COLON           reduce using rule 117 (type_qualifier -> CONST .)


state 46

    (118) type_qualifier -> RESTRICT .

    CONST           reduce using rule 118 (type_qualifier -> RESTRICT .)
    RESTRICT        reduce using rule 118 (type_qualifier -> RESTRICT .)
    VOLATILE        reduce using rule 118 (type_qualifier -> RESTRICT .)
    AUTO            reduce using rule 118 (type_qualifier -> RESTRICT .)
    REGISTER        reduce using rule 118 (type_qualifier -> RESTRICT .)
    STATIC          reduce using rule 118 (type_qualifier -> RESTRICT .)
    EXTERN          reduce using rule 118 (type_qualifier -> RESTRICT .)
    TYPEDEF         reduce using rule 118 (type_qualifier -> RESTRICT .)
    INLINE          reduce using rule 118 (type_qualifier -> RESTRICT .)
    TYPEID          reduce using rule 118 (type_qualifier -> RESTRICT .)
    ENUM            reduce using rule 118 (type_qualifier -> RESTRICT .)
    VOID            reduce using rule 118 (type_qualifier -> RESTRICT .)
    _BOOL           reduce using rule 118 (type_qualifier -> RESTRICT .)
    CHAR            reduce using rule 118 (type_qualifier -> RESTRICT .)
    SHORT           reduce using rule 118 (type_qualifier -> RESTRICT .)
    INT             reduce using rule 118 (type_qualifier -> RESTRICT .)
    LONG            reduce using rule 118 (type_qualifier -> RESTRICT .)
    FLOAT           reduce using rule 118 (type_qualifier -> RESTRICT .)
    DOUBLE          reduce using rule 118 (type_qualifier -> RESTRICT .)
    _COMPLEX        reduce using rule 118 (type_qualifier -> RESTRICT .)
    SIGNED          reduce using rule 118 (type_qualifier -> RESTRICT .)
    UNSIGNED        reduce using rule 118 (type_qualifier -> RESTRICT .)
    __INT128        reduce using rule 118 (type_qualifier -> RESTRICT .)
    STRUCT          reduce using rule 118 (type_qualifier -> RESTRICT .)
    UNION           reduce using rule 118 (type_qualifier -> RESTRICT .)
    ID              reduce using rule 118 (type_qualifier -> RESTRICT .)
    LPAREN          reduce using rule 118 (type_qualifier -> RESTRICT .)
    TIMES           reduce using rule 118 (type_qualifier -> RESTRICT .)
    SEMI            reduce using rule 118 (type_qualifier -> RESTRICT .)
    LBRACKET        reduce using rule 118 (type_qualifier -> RESTRICT .)
    COMMA           reduce using rule 118 (type_qualifier -> RESTRICT .)
    RPAREN          reduce using rule 118 (type_qualifier -> RESTRICT .)
    PLUSPLUS        reduce using rule 118 (type_qualifier -> RESTRICT .)
    MINUSMINUS      reduce using rule 118 (type_qualifier -> RESTRICT .)
    SIZEOF          reduce using rule 118 (type_qualifier -> RESTRICT .)
    AND             reduce using rule 118 (type_qualifier -> RESTRICT .)
    PLUS            reduce using rule 118 (type_qualifier -> RESTRICT .)
    MINUS           reduce using rule 118 (type_qualifier -> RESTRICT .)
    NOT             reduce using rule 118 (type_qualifier -> RESTRICT .)
    LNOT            reduce using rule 118 (type_qualifier -> RESTRICT .)
    OFFSETOF        reduce using rule 118 (type_qualifier -> RESTRICT .)
    INT_CONST_DEC   reduce using rule 118 (type_qualifier -> RESTRICT .)
    INT_CONST_OCT   reduce using rule 118 (type_qualifier -> RESTRICT .)
    INT_CONST_HEX   reduce using rule 118 (type_qualifier -> RESTRICT .)
    INT_CONST_BIN   reduce using rule 118 (type_qualifier -> RESTRICT .)
    FLOAT_CONST     reduce using rule 118 (type_qualifier -> RESTRICT .)
    HEX_FLOAT_CONST reduce using rule 118 (type_qualifier -> RESTRICT .)
    CHAR_CONST      reduce using rule 118 (type_qualifier -> RESTRICT .)
    WCHAR_CONST     reduce using rule 118 (type_qualifier -> RESTRICT .)
    STRING_LITERAL  reduce using rule 118 (type_qualifier -> RESTRICT .)
    WSTRING_LITERAL reduce using rule 118 (type_qualifier -> RESTRICT .)
    RBRACKET        reduce using rule 118 (type_qualifier -> RESTRICT .)
    COLON           reduce using rule 118 (type_qualifier -> RESTRICT .)


state 47

    (119) type_qualifier -> VOLATILE .

    CONST           reduce using rule 119 (type_qualifier -> VOLATILE .)
    RESTRICT        reduce using rule 119 (type_qualifier -> VOLATILE .)
    VOLATILE        reduce using rule 119 (type_qualifier -> VOLATILE .)
    AUTO            reduce using rule 119 (type_qualifier -> VOLATILE .)
    REGISTER        reduce using rule 119 (type_qualifier -> VOLATILE .)
    STATIC          reduce using rule 119 (type_qualifier -> VOLATILE .)
    EXTERN          reduce using rule 119 (type_qualifier -> VOLATILE .)
    TYPEDEF         reduce using rule 119 (type_qualifier -> VOLATILE .)
    INLINE          reduce using rule 119 (type_qualifier -> VOLATILE .)
    TYPEID          reduce using rule 119 (type_qualifier -> VOLATILE .)
    ENUM            reduce using rule 119 (type_qualifier -> VOLATILE .)
    VOID            reduce using rule 119 (type_qualifier -> VOLATILE .)
    _BOOL           reduce using rule 119 (type_qualifier -> VOLATILE .)
    CHAR            reduce using rule 119 (type_qualifier -> VOLATILE .)
    SHORT           reduce using rule 119 (type_qualifier -> VOLATILE .)
    INT             reduce using rule 119 (type_qualifier -> VOLATILE .)
    LONG            reduce using rule 119 (type_qualifier -> VOLATILE .)
    FLOAT           reduce using rule 119 (type_qualifier -> VOLATILE .)
    DOUBLE          reduce using rule 119 (type_qualifier -> VOLATILE .)
    _COMPLEX        reduce using rule 119 (type_qualifier -> VOLATILE .)
    SIGNED          reduce using rule 119 (type_qualifier -> VOLATILE .)
    UNSIGNED        reduce using rule 119 (type_qualifier -> VOLATILE .)
    __INT128        reduce using rule 119 (type_qualifier -> VOLATILE .)
    STRUCT          reduce using rule 119 (type_qualifier -> VOLATILE .)
    UNION           reduce using rule 119 (type_qualifier -> VOLATILE .)
    ID              reduce using rule 119 (type_qualifier -> VOLATILE .)
    LPAREN          reduce using rule 119 (type_qualifier -> VOLATILE .)
    TIMES           reduce using rule 119 (type_qualifier -> VOLATILE .)
    SEMI            reduce using rule 119 (type_qualifier -> VOLATILE .)
    LBRACKET        reduce using rule 119 (type_qualifier -> VOLATILE .)
    COMMA           reduce using rule 119 (type_qualifier -> VOLATILE .)
    RPAREN          reduce using rule 119 (type_qualifier -> VOLATILE .)
    PLUSPLUS        reduce using rule 119 (type_qualifier -> VOLATILE .)
    MINUSMINUS      reduce using rule 119 (type_qualifier -> VOLATILE .)
    SIZEOF          reduce using rule 119 (type_qualifier -> VOLATILE .)
    AND             reduce using rule 119 (type_qualifier -> VOLATILE .)
    PLUS            reduce using rule 119 (type_qualifier -> VOLATILE .)
    MINUS           reduce using rule 119 (type_qualifier -> VOLATILE .)
    NOT             reduce using rule 119 (type_qualifier -> VOLATILE .)
    LNOT            reduce using rule 119 (type_qualifier -> VOLATILE .)
    OFFSETOF        reduce using rule 119 (type_qualifier -> VOLATILE .)
    INT_CONST_DEC   reduce using rule 119 (type_qualifier -> VOLATILE .)
    INT_CONST_OCT   reduce using rule 119 (type_qualifier -> VOLATILE .)
    INT_CONST_HEX   reduce using rule 119 (type_qualifier -> VOLATILE .)
    INT_CONST_BIN   reduce using rule 119 (type_qualifier -> VOLATILE .)
    FLOAT_CONST     reduce using rule 119 (type_qualifier -> VOLATILE .)
    HEX_FLOAT_CONST reduce using rule 119 (type_qualifier -> VOLATILE .)
    CHAR_CONST      reduce using rule 119 (type_qualifier -> VOLATILE .)
    WCHAR_CONST     reduce using rule 119 (type_qualifier -> VOLATILE .)
    STRING_LITERAL  reduce using rule 119 (type_qualifier -> VOLATILE .)
    WSTRING_LITERAL reduce using rule 119 (type_qualifier -> VOLATILE .)
    RBRACKET        reduce using rule 119 (type_qualifier -> VOLATILE .)
    COLON           reduce using rule 119 (type_qualifier -> VOLATILE .)


state 48

    (95) storage_class_specifier -> AUTO .

    CONST           reduce using rule 95 (storage_class_specifier -> AUTO .)
    RESTRICT        reduce using rule 95 (storage_class_specifier -> AUTO .)
    VOLATILE        reduce using rule 95 (storage_class_specifier -> AUTO .)
    AUTO            reduce using rule 95 (storage_class_specifier -> AUTO .)
    REGISTER        reduce using rule 95 (storage_class_specifier -> AUTO .)
    STATIC          reduce using rule 95 (storage_class_specifier -> AUTO .)
    EXTERN          reduce using rule 95 (storage_class_specifier -> AUTO .)
    TYPEDEF         reduce using rule 95 (storage_class_specifier -> AUTO .)
    INLINE          reduce using rule 95 (storage_class_specifier -> AUTO .)
    TYPEID          reduce using rule 95 (storage_class_specifier -> AUTO .)
    ENUM            reduce using rule 95 (storage_class_specifier -> AUTO .)
    VOID            reduce using rule 95 (storage_class_specifier -> AUTO .)
    _BOOL           reduce using rule 95 (storage_class_specifier -> AUTO .)
    CHAR            reduce using rule 95 (storage_class_specifier -> AUTO .)
    SHORT           reduce using rule 95 (storage_class_specifier -> AUTO .)
    INT             reduce using rule 95 (storage_class_specifier -> AUTO .)
    LONG            reduce using rule 95 (storage_class_specifier -> AUTO .)
    FLOAT           reduce using rule 95 (storage_class_specifier -> AUTO .)
    DOUBLE          reduce using rule 95 (storage_class_specifier -> AUTO .)
    _COMPLEX        reduce using rule 95 (storage_class_specifier -> AUTO .)
    SIGNED          reduce using rule 95 (storage_class_specifier -> AUTO .)
    UNSIGNED        reduce using rule 95 (storage_class_specifier -> AUTO .)
    __INT128        reduce using rule 95 (storage_class_specifier -> AUTO .)
    STRUCT          reduce using rule 95 (storage_class_specifier -> AUTO .)
    UNION           reduce using rule 95 (storage_class_specifier -> AUTO .)
    ID              reduce using rule 95 (storage_class_specifier -> AUTO .)
    LPAREN          reduce using rule 95 (storage_class_specifier -> AUTO .)
    TIMES           reduce using rule 95 (storage_class_specifier -> AUTO .)
    SEMI            reduce using rule 95 (storage_class_specifier -> AUTO .)
    LBRACKET        reduce using rule 95 (storage_class_specifier -> AUTO .)
    COMMA           reduce using rule 95 (storage_class_specifier -> AUTO .)
    RPAREN          reduce using rule 95 (storage_class_specifier -> AUTO .)


state 49

    (96) storage_class_specifier -> REGISTER .

    CONST           reduce using rule 96 (storage_class_specifier -> REGISTER .)
    RESTRICT        reduce using rule 96 (storage_class_specifier -> REGISTER .)
    VOLATILE        reduce using rule 96 (storage_class_specifier -> REGISTER .)
    AUTO            reduce using rule 96 (storage_class_specifier -> REGISTER .)
    REGISTER        reduce using rule 96 (storage_class_specifier -> REGISTER .)
    STATIC          reduce using rule 96 (storage_class_specifier -> REGISTER .)
    EXTERN          reduce using rule 96 (storage_class_specifier -> REGISTER .)
    TYPEDEF         reduce using rule 96 (storage_class_specifier -> REGISTER .)
    INLINE          reduce using rule 96 (storage_class_specifier -> REGISTER .)
    TYPEID          reduce using rule 96 (storage_class_specifier -> REGISTER .)
    ENUM            reduce using rule 96 (storage_class_specifier -> REGISTER .)
    VOID            reduce using rule 96 (storage_class_specifier -> REGISTER .)
    _BOOL           reduce using rule 96 (storage_class_specifier -> REGISTER .)
    CHAR            reduce using rule 96 (storage_class_specifier -> REGISTER .)
    SHORT           reduce using rule 96 (storage_class_specifier -> REGISTER .)
    INT             reduce using rule 96 (storage_class_specifier -> REGISTER .)
    LONG            reduce using rule 96 (storage_class_specifier -> REGISTER .)
    FLOAT           reduce using rule 96 (storage_class_specifier -> REGISTER .)
    DOUBLE          reduce using rule 96 (storage_class_specifier -> REGISTER .)
    _COMPLEX        reduce using rule 96 (storage_class_specifier -> REGISTER .)
    SIGNED          reduce using rule 96 (storage_class_specifier -> REGISTER .)
    UNSIGNED        reduce using rule 96 (storage_class_specifier -> REGISTER .)
    __INT128        reduce using rule 96 (storage_class_specifier -> REGISTER .)
    STRUCT          reduce using rule 96 (storage_class_specifier -> REGISTER .)
    UNION           reduce using rule 96 (storage_class_specifier -> REGISTER .)
    ID              reduce using rule 96 (storage_class_specifier -> REGISTER .)
    LPAREN          reduce using rule 96 (storage_class_specifier -> REGISTER .)
    TIMES           reduce using rule 96 (storage_class_specifier -> REGISTER .)
    SEMI            reduce using rule 96 (storage_class_specifier -> REGISTER .)
    LBRACKET        reduce using rule 96 (storage_class_specifier -> REGISTER .)
    COMMA           reduce using rule 96 (storage_class_specifier -> REGISTER .)
    RPAREN          reduce using rule 96 (storage_class_specifier -> REGISTER .)


state 50

    (98) storage_class_specifier -> EXTERN .

    CONST           reduce using rule 98 (storage_class_specifier -> EXTERN .)
    RESTRICT        reduce using rule 98 (storage_class_specifier -> EXTERN .)
    VOLATILE        reduce using rule 98 (storage_class_specifier -> EXTERN .)
    AUTO            reduce using rule 98 (storage_class_specifier -> EXTERN .)
    REGISTER        reduce using rule 98 (storage_class_specifier -> EXTERN .)
    STATIC          reduce using rule 98 (storage_class_specifier -> EXTERN .)
    EXTERN          reduce using rule 98 (storage_class_specifier -> EXTERN .)
    TYPEDEF         reduce using rule 98 (storage_class_specifier -> EXTERN .)
    INLINE          reduce using rule 98 (storage_class_specifier -> EXTERN .)
    TYPEID          reduce using rule 98 (storage_class_specifier -> EXTERN .)
    ENUM            reduce using rule 98 (storage_class_specifier -> EXTERN .)
    VOID            reduce using rule 98 (storage_class_specifier -> EXTERN .)
    _BOOL           reduce using rule 98 (storage_class_specifier -> EXTERN .)
    CHAR            reduce using rule 98 (storage_class_specifier -> EXTERN .)
    SHORT           reduce using rule 98 (storage_class_specifier -> EXTERN .)
    INT             reduce using rule 98 (storage_class_specifier -> EXTERN .)
    LONG            reduce using rule 98 (storage_class_specifier -> EXTERN .)
    FLOAT           reduce using rule 98 (storage_class_specifier -> EXTERN .)
    DOUBLE          reduce using rule 98 (storage_class_specifier -> EXTERN .)
    _COMPLEX        reduce using rule 98 (storage_class_specifier -> EXTERN .)
    SIGNED          reduce using rule 98 (storage_class_specifier -> EXTERN .)
    UNSIGNED        reduce using rule 98 (storage_class_specifier -> EXTERN .)
    __INT128        reduce using rule 98 (storage_class_specifier -> EXTERN .)
    STRUCT          reduce using rule 98 (storage_class_specifier -> EXTERN .)
    UNION           reduce using rule 98 (storage_class_specifier -> EXTERN .)
    ID              reduce using rule 98 (storage_class_specifier -> EXTERN .)
    LPAREN          reduce using rule 98 (storage_class_specifier -> EXTERN .)
    TIMES           reduce using rule 98 (storage_class_specifier -> EXTERN .)
    SEMI            reduce using rule 98 (storage_class_specifier -> EXTERN .)
    LBRACKET        reduce using rule 98 (storage_class_specifier -> EXTERN .)
    COMMA           reduce using rule 98 (storage_class_specifier -> EXTERN .)
    RPAREN          reduce using rule 98 (storage_class_specifier -> EXTERN .)


state 51

    (99) storage_class_specifier -> TYPEDEF .

    CONST           reduce using rule 99 (storage_class_specifier -> TYPEDEF .)
    RESTRICT        reduce using rule 99 (storage_class_specifier -> TYPEDEF .)
    VOLATILE        reduce using rule 99 (storage_class_specifier -> TYPEDEF .)
    AUTO            reduce using rule 99 (storage_class_specifier -> TYPEDEF .)
    REGISTER        reduce using rule 99 (storage_class_specifier -> TYPEDEF .)
    STATIC          reduce using rule 99 (storage_class_specifier -> TYPEDEF .)
    EXTERN          reduce using rule 99 (storage_class_specifier -> TYPEDEF .)
    TYPEDEF         reduce using rule 99 (storage_class_specifier -> TYPEDEF .)
    INLINE          reduce using rule 99 (storage_class_specifier -> TYPEDEF .)
    TYPEID          reduce using rule 99 (storage_class_specifier -> TYPEDEF .)
    ENUM            reduce using rule 99 (storage_class_specifier -> TYPEDEF .)
    VOID            reduce using rule 99 (storage_class_specifier -> TYPEDEF .)
    _BOOL           reduce using rule 99 (storage_class_specifier -> TYPEDEF .)
    CHAR            reduce using rule 99 (storage_class_specifier -> TYPEDEF .)
    SHORT           reduce using rule 99 (storage_class_specifier -> TYPEDEF .)
    INT             reduce using rule 99 (storage_class_specifier -> TYPEDEF .)
    LONG            reduce using rule 99 (storage_class_specifier -> TYPEDEF .)
    FLOAT           reduce using rule 99 (storage_class_specifier -> TYPEDEF .)
    DOUBLE          reduce using rule 99 (storage_class_specifier -> TYPEDEF .)
    _COMPLEX        reduce using rule 99 (storage_class_specifier -> TYPEDEF .)
    SIGNED          reduce using rule 99 (storage_class_specifier -> TYPEDEF .)
    UNSIGNED        reduce using rule 99 (storage_class_specifier -> TYPEDEF .)
    __INT128        reduce using rule 99 (storage_class_specifier -> TYPEDEF .)
    STRUCT          reduce using rule 99 (storage_class_specifier -> TYPEDEF .)
    UNION           reduce using rule 99 (storage_class_specifier -> TYPEDEF .)
    ID              reduce using rule 99 (storage_class_specifier -> TYPEDEF .)
    LPAREN          reduce using rule 99 (storage_class_specifier -> TYPEDEF .)
    TIMES           reduce using rule 99 (storage_class_specifier -> TYPEDEF .)
    SEMI            reduce using rule 99 (storage_class_specifier -> TYPEDEF .)
    LBRACKET        reduce using rule 99 (storage_class_specifier -> TYPEDEF .)
    COMMA           reduce using rule 99 (storage_class_specifier -> TYPEDEF .)
    RPAREN          reduce using rule 99 (storage_class_specifier -> TYPEDEF .)


state 52

    (100) function_specifier -> INLINE .

    CONST           reduce using rule 100 (function_specifier -> INLINE .)
    RESTRICT        reduce using rule 100 (function_specifier -> INLINE .)
    VOLATILE        reduce using rule 100 (function_specifier -> INLINE .)
    AUTO            reduce using rule 100 (function_specifier -> INLINE .)
    REGISTER        reduce using rule 100 (function_specifier -> INLINE .)
    STATIC          reduce using rule 100 (function_specifier -> INLINE .)
    EXTERN          reduce using rule 100 (function_specifier -> INLINE .)
    TYPEDEF         reduce using rule 100 (function_specifier -> INLINE .)
    INLINE          reduce using rule 100 (function_specifier -> INLINE .)
    TYPEID          reduce using rule 100 (function_specifier -> INLINE .)
    ENUM            reduce using rule 100 (function_specifier -> INLINE .)
    VOID            reduce using rule 100 (function_specifier -> INLINE .)
    _BOOL           reduce using rule 100 (function_specifier -> INLINE .)
    CHAR            reduce using rule 100 (function_specifier -> INLINE .)
    SHORT           reduce using rule 100 (function_specifier -> INLINE .)
    INT             reduce using rule 100 (function_specifier -> INLINE .)
    LONG            reduce using rule 100 (function_specifier -> INLINE .)
    FLOAT           reduce using rule 100 (function_specifier -> INLINE .)
    DOUBLE          reduce using rule 100 (function_specifier -> INLINE .)
    _COMPLEX        reduce using rule 100 (function_specifier -> INLINE .)
    SIGNED          reduce using rule 100 (function_specifier -> INLINE .)
    UNSIGNED        reduce using rule 100 (function_specifier -> INLINE .)
    __INT128        reduce using rule 100 (function_specifier -> INLINE .)
    STRUCT          reduce using rule 100 (function_specifier -> INLINE .)
    UNION           reduce using rule 100 (function_specifier -> INLINE .)
    ID              reduce using rule 100 (function_specifier -> INLINE .)
    LPAREN          reduce using rule 100 (function_specifier -> INLINE .)
    TIMES           reduce using rule 100 (function_specifier -> INLINE .)
    SEMI            reduce using rule 100 (function_specifier -> INLINE .)
    LBRACKET        reduce using rule 100 (function_specifier -> INLINE .)
    COMMA           reduce using rule 100 (function_specifier -> INLINE .)
    RPAREN          reduce using rule 100 (function_specifier -> INLINE .)


state 53

    (140) struct_or_union -> STRUCT .

    ID              reduce using rule 140 (struct_or_union -> STRUCT .)
    TYPEID          reduce using rule 140 (struct_or_union -> STRUCT .)
    LBRACE          reduce using rule 140 (struct_or_union -> STRUCT .)


state 54

    (141) struct_or_union -> UNION .

    ID              reduce using rule 141 (struct_or_union -> UNION .)
    TYPEID          reduce using rule 141 (struct_or_union -> UNION .)
    LBRACE          reduce using rule 141 (struct_or_union -> UNION .)


state 55

    (61) translation_unit -> translation_unit external_declaration .

    SEMI            reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    PPHASH          reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    PPPRAGMA        reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    ID              reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    LPAREN          reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    TIMES           reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    TYPEID          reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    ENUM            reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    VOID            reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    _BOOL           reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    SHORT           reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    LONG            reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    FLOAT           reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    DOUBLE          reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    _COMPLEX        reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    SIGNED          reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    UNSIGNED        reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    __INT128        reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    CONST           reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    RESTRICT        reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    VOLATILE        reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    AUTO            reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    REGISTER        reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    STATIC          reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    EXTERN          reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    TYPEDEF         reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    INLINE          reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    STRUCT          reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    UNION           reduce using rule 61 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 61 (translation_unit -> translation_unit external_declaration .)


state 56

    (70) function_definition -> id_declarator declaration_list_opt . compound_statement
    (202) compound_statement -> . brace_open block_item_list_opt brace_close
    (307) brace_open -> . LBRACE

    LBRACE          shift and go to state 101

    compound_statement             shift and go to state 105
    brace_open                     shift and go to state 106

state 57

    (7) declaration_list_opt -> empty .

    LBRACE          reduce using rule 7 (declaration_list_opt -> empty .)


state 58

    (8) declaration_list_opt -> declaration_list .
    (85) declaration_list -> declaration_list . declaration
    (83) declaration -> . decl_body SEMI
    (81) decl_body -> . declaration_specifiers init_declarator_list_opt
    (82) decl_body -> . declaration_specifiers_no_type id_init_declarator_list_opt
    (89) declaration_specifiers -> . declaration_specifiers type_qualifier
    (90) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (91) declaration_specifiers -> . declaration_specifiers function_specifier
    (92) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (93) declaration_specifiers -> . type_specifier
    (94) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (86) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (87) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (88) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (113) type_specifier -> . typedef_name
    (114) type_specifier -> . enum_specifier
    (115) type_specifier -> . struct_or_union_specifier
    (116) type_specifier -> . type_specifier_no_typeid
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE
    (95) storage_class_specifier -> . AUTO
    (96) storage_class_specifier -> . REGISTER
    (97) storage_class_specifier -> . STATIC
    (98) storage_class_specifier -> . EXTERN
    (99) storage_class_specifier -> . TYPEDEF
    (100) function_specifier -> . INLINE
    (221) typedef_name -> . TYPEID
    (152) enum_specifier -> . ENUM ID
    (153) enum_specifier -> . ENUM TYPEID
    (154) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (155) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (156) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (132) struct_or_union_specifier -> . struct_or_union ID
    (133) struct_or_union_specifier -> . struct_or_union TYPEID
    (134) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (135) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (136) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (137) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (138) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (139) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (101) type_specifier_no_typeid -> . VOID
    (102) type_specifier_no_typeid -> . _BOOL
    (103) type_specifier_no_typeid -> . CHAR
    (104) type_specifier_no_typeid -> . SHORT
    (105) type_specifier_no_typeid -> . INT
    (106) type_specifier_no_typeid -> . LONG
    (107) type_specifier_no_typeid -> . FLOAT
    (108) type_specifier_no_typeid -> . DOUBLE
    (109) type_specifier_no_typeid -> . _COMPLEX
    (110) type_specifier_no_typeid -> . SIGNED
    (111) type_specifier_no_typeid -> . UNSIGNED
    (112) type_specifier_no_typeid -> . __INT128
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

    LBRACE          reduce using rule 8 (declaration_list_opt -> declaration_list .)
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47
    AUTO            shift and go to state 48
    REGISTER        shift and go to state 49
    STATIC          shift and go to state 25
    EXTERN          shift and go to state 50
    TYPEDEF         shift and go to state 51
    INLINE          shift and go to state 52
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    VOID            shift and go to state 33
    _BOOL           shift and go to state 34
    CHAR            shift and go to state 35
    SHORT           shift and go to state 36
    INT             shift and go to state 37
    LONG            shift and go to state 38
    FLOAT           shift and go to state 39
    DOUBLE          shift and go to state 40
    _COMPLEX        shift and go to state 41
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 43
    __INT128        shift and go to state 44
    STRUCT          shift and go to state 53
    UNION           shift and go to state 54

    declaration                    shift and go to state 107
    decl_body                      shift and go to state 12
    declaration_specifiers         shift and go to state 60
    declaration_specifiers_no_type shift and go to state 61
    type_qualifier                 shift and go to state 17
    storage_class_specifier        shift and go to state 18
    function_specifier             shift and go to state 19
    type_specifier_no_typeid       shift and go to state 20
    type_specifier                 shift and go to state 21
    typedef_name                   shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union_specifier      shift and go to state 29
    struct_or_union                shift and go to state 32

state 59

    (84) declaration_list -> declaration .

    CONST           reduce using rule 84 (declaration_list -> declaration .)
    RESTRICT        reduce using rule 84 (declaration_list -> declaration .)
    VOLATILE        reduce using rule 84 (declaration_list -> declaration .)
    AUTO            reduce using rule 84 (declaration_list -> declaration .)
    REGISTER        reduce using rule 84 (declaration_list -> declaration .)
    STATIC          reduce using rule 84 (declaration_list -> declaration .)
    EXTERN          reduce using rule 84 (declaration_list -> declaration .)
    TYPEDEF         reduce using rule 84 (declaration_list -> declaration .)
    INLINE          reduce using rule 84 (declaration_list -> declaration .)
    TYPEID          reduce using rule 84 (declaration_list -> declaration .)
    ENUM            reduce using rule 84 (declaration_list -> declaration .)
    VOID            reduce using rule 84 (declaration_list -> declaration .)
    _BOOL           reduce using rule 84 (declaration_list -> declaration .)
    CHAR            reduce using rule 84 (declaration_list -> declaration .)
    SHORT           reduce using rule 84 (declaration_list -> declaration .)
    INT             reduce using rule 84 (declaration_list -> declaration .)
    LONG            reduce using rule 84 (declaration_list -> declaration .)
    FLOAT           reduce using rule 84 (declaration_list -> declaration .)
    DOUBLE          reduce using rule 84 (declaration_list -> declaration .)
    _COMPLEX        reduce using rule 84 (declaration_list -> declaration .)
    SIGNED          reduce using rule 84 (declaration_list -> declaration .)
    UNSIGNED        reduce using rule 84 (declaration_list -> declaration .)
    __INT128        reduce using rule 84 (declaration_list -> declaration .)
    STRUCT          reduce using rule 84 (declaration_list -> declaration .)
    UNION           reduce using rule 84 (declaration_list -> declaration .)
    LBRACE          reduce using rule 84 (declaration_list -> declaration .)


state 60

    (81) decl_body -> declaration_specifiers . init_declarator_list_opt
    (89) declaration_specifiers -> declaration_specifiers . type_qualifier
    (90) declaration_specifiers -> declaration_specifiers . storage_class_specifier
    (91) declaration_specifiers -> declaration_specifiers . function_specifier
    (92) declaration_specifiers -> declaration_specifiers . type_specifier_no_typeid
    (19) init_declarator_list_opt -> . empty
    (20) init_declarator_list_opt -> . init_declarator_list
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE
    (95) storage_class_specifier -> . AUTO
    (96) storage_class_specifier -> . REGISTER
    (97) storage_class_specifier -> . STATIC
    (98) storage_class_specifier -> . EXTERN
    (99) storage_class_specifier -> . TYPEDEF
    (100) function_specifier -> . INLINE
    (101) type_specifier_no_typeid -> . VOID
    (102) type_specifier_no_typeid -> . _BOOL
    (103) type_specifier_no_typeid -> . CHAR
    (104) type_specifier_no_typeid -> . SHORT
    (105) type_specifier_no_typeid -> . INT
    (106) type_specifier_no_typeid -> . LONG
    (107) type_specifier_no_typeid -> . FLOAT
    (108) type_specifier_no_typeid -> . DOUBLE
    (109) type_specifier_no_typeid -> . _COMPLEX
    (110) type_specifier_no_typeid -> . SIGNED
    (111) type_specifier_no_typeid -> . UNSIGNED
    (112) type_specifier_no_typeid -> . __INT128
    (309) empty -> .
    (120) init_declarator_list -> . init_declarator
    (121) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (122) init_declarator -> . declarator
    (123) init_declarator -> . declarator EQUALS initializer
    (162) declarator -> . id_declarator
    (163) declarator -> . typeid_declarator
    (52) id_declarator -> . direct_id_declarator
    (53) id_declarator -> . pointer direct_id_declarator
    (54) typeid_declarator -> . direct_typeid_declarator
    (55) typeid_declarator -> . pointer direct_typeid_declarator
    (29) direct_id_declarator -> . ID
    (30) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (31) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (35) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (36) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (164) pointer -> . TIMES type_qualifier_list_opt
    (165) pointer -> . TIMES type_qualifier_list_opt pointer
    (37) direct_typeid_declarator -> . TYPEID
    (38) direct_typeid_declarator -> . LPAREN typeid_declarator RPAREN
    (39) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (40) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (41) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (42) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (43) direct_typeid_declarator -> . direct_typeid_declarator LPAREN parameter_type_list RPAREN
    (44) direct_typeid_declarator -> . direct_typeid_declarator LPAREN identifier_list_opt RPAREN

    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47
    AUTO            shift and go to state 48
    REGISTER        shift and go to state 49
    STATIC          shift and go to state 25
    EXTERN          shift and go to state 50
    TYPEDEF         shift and go to state 51
    INLINE          shift and go to state 52
    VOID            shift and go to state 33
    _BOOL           shift and go to state 34
    CHAR            shift and go to state 35
    SHORT           shift and go to state 36
    INT             shift and go to state 37
    LONG            shift and go to state 38
    FLOAT           shift and go to state 39
    DOUBLE          shift and go to state 40
    _COMPLEX        shift and go to state 41
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 43
    __INT128        shift and go to state 44
    SEMI            reduce using rule 309 (empty -> .)
    ID              shift and go to state 23
    LPAREN          shift and go to state 71
    TIMES           shift and go to state 26
    TYPEID          shift and go to state 76

    init_declarator_list_opt       shift and go to state 67
    type_qualifier                 shift and go to state 63
    storage_class_specifier        shift and go to state 64
    function_specifier             shift and go to state 65
    type_specifier_no_typeid       shift and go to state 66
    empty                          shift and go to state 69
    init_declarator_list           shift and go to state 70
    init_declarator                shift and go to state 72
    declarator                     shift and go to state 73
    id_declarator                  shift and go to state 108
    typeid_declarator              shift and go to state 74
    direct_id_declarator           shift and go to state 15
    pointer                        shift and go to state 68
    direct_typeid_declarator       shift and go to state 75

state 61

    (82) decl_body -> declaration_specifiers_no_type . id_init_declarator_list_opt
    (94) declaration_specifiers -> declaration_specifiers_no_type . type_specifier
    (15) id_init_declarator_list_opt -> . empty
    (16) id_init_declarator_list_opt -> . id_init_declarator_list
    (113) type_specifier -> . typedef_name
    (114) type_specifier -> . enum_specifier
    (115) type_specifier -> . struct_or_union_specifier
    (116) type_specifier -> . type_specifier_no_typeid
    (309) empty -> .
    (124) id_init_declarator_list -> . id_init_declarator
    (125) id_init_declarator_list -> . id_init_declarator_list COMMA init_declarator
    (221) typedef_name -> . TYPEID
    (152) enum_specifier -> . ENUM ID
    (153) enum_specifier -> . ENUM TYPEID
    (154) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (155) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (156) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (132) struct_or_union_specifier -> . struct_or_union ID
    (133) struct_or_union_specifier -> . struct_or_union TYPEID
    (134) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (135) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (136) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (137) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (138) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (139) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (101) type_specifier_no_typeid -> . VOID
    (102) type_specifier_no_typeid -> . _BOOL
    (103) type_specifier_no_typeid -> . CHAR
    (104) type_specifier_no_typeid -> . SHORT
    (105) type_specifier_no_typeid -> . INT
    (106) type_specifier_no_typeid -> . LONG
    (107) type_specifier_no_typeid -> . FLOAT
    (108) type_specifier_no_typeid -> . DOUBLE
    (109) type_specifier_no_typeid -> . _COMPLEX
    (110) type_specifier_no_typeid -> . SIGNED
    (111) type_specifier_no_typeid -> . UNSIGNED
    (112) type_specifier_no_typeid -> . __INT128
    (126) id_init_declarator -> . id_declarator
    (127) id_init_declarator -> . id_declarator EQUALS initializer
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION
    (52) id_declarator -> . direct_id_declarator
    (53) id_declarator -> . pointer direct_id_declarator
    (29) direct_id_declarator -> . ID
    (30) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (31) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (35) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (36) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (164) pointer -> . TIMES type_qualifier_list_opt
    (165) pointer -> . TIMES type_qualifier_list_opt pointer

    SEMI            reduce using rule 309 (empty -> .)
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    VOID            shift and go to state 33
    _BOOL           shift and go to state 34
    CHAR            shift and go to state 35
    SHORT           shift and go to state 36
    INT             shift and go to state 37
    LONG            shift and go to state 38
    FLOAT           shift and go to state 39
    DOUBLE          shift and go to state 40
    _COMPLEX        shift and go to state 41
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 43
    __INT128        shift and go to state 44
    STRUCT          shift and go to state 53
    UNION           shift and go to state 54
    ID              shift and go to state 23
    LPAREN          shift and go to state 24
    TIMES           shift and go to state 26

    id_init_declarator_list_opt    shift and go to state 88
    type_specifier                 shift and go to state 87
    empty                          shift and go to state 89
    id_init_declarator_list        shift and go to state 90
    typedef_name                   shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union_specifier      shift and go to state 29
    type_specifier_no_typeid       shift and go to state 20
    id_init_declarator             shift and go to state 91
    struct_or_union                shift and go to state 32
    id_declarator                  shift and go to state 92
    direct_id_declarator           shift and go to state 15
    pointer                        shift and go to state 16

state 62

    (71) function_definition -> declaration_specifiers id_declarator . declaration_list_opt compound_statement
    (162) declarator -> id_declarator .
    (7) declaration_list_opt -> . empty
    (8) declaration_list_opt -> . declaration_list
    (309) empty -> .
    (84) declaration_list -> . declaration
    (85) declaration_list -> . declaration_list declaration
    (83) declaration -> . decl_body SEMI
    (81) decl_body -> . declaration_specifiers init_declarator_list_opt
    (82) decl_body -> . declaration_specifiers_no_type id_init_declarator_list_opt
    (89) declaration_specifiers -> . declaration_specifiers type_qualifier
    (90) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (91) declaration_specifiers -> . declaration_specifiers function_specifier
    (92) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (93) declaration_specifiers -> . type_specifier
    (94) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (86) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (87) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (88) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (113) type_specifier -> . typedef_name
    (114) type_specifier -> . enum_specifier
    (115) type_specifier -> . struct_or_union_specifier
    (116) type_specifier -> . type_specifier_no_typeid
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE
    (95) storage_class_specifier -> . AUTO
    (96) storage_class_specifier -> . REGISTER
    (97) storage_class_specifier -> . STATIC
    (98) storage_class_specifier -> . EXTERN
    (99) storage_class_specifier -> . TYPEDEF
    (100) function_specifier -> . INLINE
    (221) typedef_name -> . TYPEID
    (152) enum_specifier -> . ENUM ID
    (153) enum_specifier -> . ENUM TYPEID
    (154) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (155) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (156) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (132) struct_or_union_specifier -> . struct_or_union ID
    (133) struct_or_union_specifier -> . struct_or_union TYPEID
    (134) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (135) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (136) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (137) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (138) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (139) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (101) type_specifier_no_typeid -> . VOID
    (102) type_specifier_no_typeid -> . _BOOL
    (103) type_specifier_no_typeid -> . CHAR
    (104) type_specifier_no_typeid -> . SHORT
    (105) type_specifier_no_typeid -> . INT
    (106) type_specifier_no_typeid -> . LONG
    (107) type_specifier_no_typeid -> . FLOAT
    (108) type_specifier_no_typeid -> . DOUBLE
    (109) type_specifier_no_typeid -> . _COMPLEX
    (110) type_specifier_no_typeid -> . SIGNED
    (111) type_specifier_no_typeid -> . UNSIGNED
    (112) type_specifier_no_typeid -> . __INT128
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

    EQUALS          reduce using rule 162 (declarator -> id_declarator .)
    COMMA           reduce using rule 162 (declarator -> id_declarator .)
    SEMI            reduce using rule 162 (declarator -> id_declarator .)
    LBRACE          reduce using rule 309 (empty -> .)
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47
    AUTO            shift and go to state 48
    REGISTER        shift and go to state 49
    STATIC          shift and go to state 25
    EXTERN          shift and go to state 50
    TYPEDEF         shift and go to state 51
    INLINE          shift and go to state 52
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    VOID            shift and go to state 33
    _BOOL           shift and go to state 34
    CHAR            shift and go to state 35
    SHORT           shift and go to state 36
    INT             shift and go to state 37
    LONG            shift and go to state 38
    FLOAT           shift and go to state 39
    DOUBLE          shift and go to state 40
    _COMPLEX        shift and go to state 41
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 43
    __INT128        shift and go to state 44
    STRUCT          shift and go to state 53
    UNION           shift and go to state 54

    declaration_specifiers         shift and go to state 60
    declaration_list_opt           shift and go to state 109
    empty                          shift and go to state 57
    declaration_list               shift and go to state 58
    declaration                    shift and go to state 59
    decl_body                      shift and go to state 12
    declaration_specifiers_no_type shift and go to state 61
    type_qualifier                 shift and go to state 17
    storage_class_specifier        shift and go to state 18
    function_specifier             shift and go to state 19
    type_specifier_no_typeid       shift and go to state 20
    type_specifier                 shift and go to state 21
    typedef_name                   shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union_specifier      shift and go to state 29
    struct_or_union                shift and go to state 32

state 63

    (89) declaration_specifiers -> declaration_specifiers type_qualifier .

    CONST           reduce using rule 89 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    RESTRICT        reduce using rule 89 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    VOLATILE        reduce using rule 89 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    AUTO            reduce using rule 89 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    REGISTER        reduce using rule 89 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    STATIC          reduce using rule 89 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    EXTERN          reduce using rule 89 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    TYPEDEF         reduce using rule 89 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    INLINE          reduce using rule 89 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    VOID            reduce using rule 89 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    _BOOL           reduce using rule 89 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    CHAR            reduce using rule 89 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    SHORT           reduce using rule 89 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    INT             reduce using rule 89 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    LONG            reduce using rule 89 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    FLOAT           reduce using rule 89 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    DOUBLE          reduce using rule 89 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    _COMPLEX        reduce using rule 89 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    SIGNED          reduce using rule 89 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    UNSIGNED        reduce using rule 89 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    __INT128        reduce using rule 89 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    ID              reduce using rule 89 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    LPAREN          reduce using rule 89 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    TIMES           reduce using rule 89 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    TYPEID          reduce using rule 89 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    SEMI            reduce using rule 89 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    LBRACKET        reduce using rule 89 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    COMMA           reduce using rule 89 (declaration_specifiers -> declaration_specifiers type_qualifier .)
    RPAREN          reduce using rule 89 (declaration_specifiers -> declaration_specifiers type_qualifier .)


state 64

    (90) declaration_specifiers -> declaration_specifiers storage_class_specifier .

    CONST           reduce using rule 90 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    RESTRICT        reduce using rule 90 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    VOLATILE        reduce using rule 90 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    AUTO            reduce using rule 90 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    REGISTER        reduce using rule 90 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    STATIC          reduce using rule 90 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    EXTERN          reduce using rule 90 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    TYPEDEF         reduce using rule 90 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    INLINE          reduce using rule 90 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    VOID            reduce using rule 90 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    _BOOL           reduce using rule 90 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    CHAR            reduce using rule 90 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    SHORT           reduce using rule 90 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    INT             reduce using rule 90 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    LONG            reduce using rule 90 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    FLOAT           reduce using rule 90 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    DOUBLE          reduce using rule 90 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    _COMPLEX        reduce using rule 90 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    SIGNED          reduce using rule 90 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    UNSIGNED        reduce using rule 90 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    __INT128        reduce using rule 90 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    ID              reduce using rule 90 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    LPAREN          reduce using rule 90 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    TIMES           reduce using rule 90 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    TYPEID          reduce using rule 90 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    SEMI            reduce using rule 90 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    LBRACKET        reduce using rule 90 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    COMMA           reduce using rule 90 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)
    RPAREN          reduce using rule 90 (declaration_specifiers -> declaration_specifiers storage_class_specifier .)


state 65

    (91) declaration_specifiers -> declaration_specifiers function_specifier .

    CONST           reduce using rule 91 (declaration_specifiers -> declaration_specifiers function_specifier .)
    RESTRICT        reduce using rule 91 (declaration_specifiers -> declaration_specifiers function_specifier .)
    VOLATILE        reduce using rule 91 (declaration_specifiers -> declaration_specifiers function_specifier .)
    AUTO            reduce using rule 91 (declaration_specifiers -> declaration_specifiers function_specifier .)
    REGISTER        reduce using rule 91 (declaration_specifiers -> declaration_specifiers function_specifier .)
    STATIC          reduce using rule 91 (declaration_specifiers -> declaration_specifiers function_specifier .)
    EXTERN          reduce using rule 91 (declaration_specifiers -> declaration_specifiers function_specifier .)
    TYPEDEF         reduce using rule 91 (declaration_specifiers -> declaration_specifiers function_specifier .)
    INLINE          reduce using rule 91 (declaration_specifiers -> declaration_specifiers function_specifier .)
    VOID            reduce using rule 91 (declaration_specifiers -> declaration_specifiers function_specifier .)
    _BOOL           reduce using rule 91 (declaration_specifiers -> declaration_specifiers function_specifier .)
    CHAR            reduce using rule 91 (declaration_specifiers -> declaration_specifiers function_specifier .)
    SHORT           reduce using rule 91 (declaration_specifiers -> declaration_specifiers function_specifier .)
    INT             reduce using rule 91 (declaration_specifiers -> declaration_specifiers function_specifier .)
    LONG            reduce using rule 91 (declaration_specifiers -> declaration_specifiers function_specifier .)
    FLOAT           reduce using rule 91 (declaration_specifiers -> declaration_specifiers function_specifier .)
    DOUBLE          reduce using rule 91 (declaration_specifiers -> declaration_specifiers function_specifier .)
    _COMPLEX        reduce using rule 91 (declaration_specifiers -> declaration_specifiers function_specifier .)
    SIGNED          reduce using rule 91 (declaration_specifiers -> declaration_specifiers function_specifier .)
    UNSIGNED        reduce using rule 91 (declaration_specifiers -> declaration_specifiers function_specifier .)
    __INT128        reduce using rule 91 (declaration_specifiers -> declaration_specifiers function_specifier .)
    ID              reduce using rule 91 (declaration_specifiers -> declaration_specifiers function_specifier .)
    LPAREN          reduce using rule 91 (declaration_specifiers -> declaration_specifiers function_specifier .)
    TIMES           reduce using rule 91 (declaration_specifiers -> declaration_specifiers function_specifier .)
    TYPEID          reduce using rule 91 (declaration_specifiers -> declaration_specifiers function_specifier .)
    SEMI            reduce using rule 91 (declaration_specifiers -> declaration_specifiers function_specifier .)
    LBRACKET        reduce using rule 91 (declaration_specifiers -> declaration_specifiers function_specifier .)
    COMMA           reduce using rule 91 (declaration_specifiers -> declaration_specifiers function_specifier .)
    RPAREN          reduce using rule 91 (declaration_specifiers -> declaration_specifiers function_specifier .)


state 66

    (92) declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .

    CONST           reduce using rule 92 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    RESTRICT        reduce using rule 92 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    VOLATILE        reduce using rule 92 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    AUTO            reduce using rule 92 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    REGISTER        reduce using rule 92 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    STATIC          reduce using rule 92 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    EXTERN          reduce using rule 92 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    TYPEDEF         reduce using rule 92 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    INLINE          reduce using rule 92 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    VOID            reduce using rule 92 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    _BOOL           reduce using rule 92 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    CHAR            reduce using rule 92 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    SHORT           reduce using rule 92 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    INT             reduce using rule 92 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    LONG            reduce using rule 92 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    FLOAT           reduce using rule 92 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    DOUBLE          reduce using rule 92 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    _COMPLEX        reduce using rule 92 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    SIGNED          reduce using rule 92 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    UNSIGNED        reduce using rule 92 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    __INT128        reduce using rule 92 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    ID              reduce using rule 92 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    LPAREN          reduce using rule 92 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    TIMES           reduce using rule 92 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    TYPEID          reduce using rule 92 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    SEMI            reduce using rule 92 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    LBRACKET        reduce using rule 92 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    COMMA           reduce using rule 92 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)
    RPAREN          reduce using rule 92 (declaration_specifiers -> declaration_specifiers type_specifier_no_typeid .)


state 67

    (81) decl_body -> declaration_specifiers init_declarator_list_opt .

    SEMI            reduce using rule 81 (decl_body -> declaration_specifiers init_declarator_list_opt .)


state 68

    (53) id_declarator -> pointer . direct_id_declarator
    (55) typeid_declarator -> pointer . direct_typeid_declarator
    (29) direct_id_declarator -> . ID
    (30) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (31) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (35) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (36) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (37) direct_typeid_declarator -> . TYPEID
    (38) direct_typeid_declarator -> . LPAREN typeid_declarator RPAREN
    (39) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (40) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (41) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (42) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (43) direct_typeid_declarator -> . direct_typeid_declarator LPAREN parameter_type_list RPAREN
    (44) direct_typeid_declarator -> . direct_typeid_declarator LPAREN identifier_list_opt RPAREN

    ID              shift and go to state 23
    LPAREN          shift and go to state 71
    TYPEID          shift and go to state 76

    direct_id_declarator           shift and go to state 81
    direct_typeid_declarator       shift and go to state 110

state 69

    (19) init_declarator_list_opt -> empty .

    SEMI            reduce using rule 19 (init_declarator_list_opt -> empty .)


state 70

    (20) init_declarator_list_opt -> init_declarator_list .
    (121) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI            reduce using rule 20 (init_declarator_list_opt -> init_declarator_list .)
    COMMA           shift and go to state 111


state 71

    (30) direct_id_declarator -> LPAREN . id_declarator RPAREN
    (38) direct_typeid_declarator -> LPAREN . typeid_declarator RPAREN
    (52) id_declarator -> . direct_id_declarator
    (53) id_declarator -> . pointer direct_id_declarator
    (54) typeid_declarator -> . direct_typeid_declarator
    (55) typeid_declarator -> . pointer direct_typeid_declarator
    (29) direct_id_declarator -> . ID
    (30) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (31) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (35) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (36) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (164) pointer -> . TIMES type_qualifier_list_opt
    (165) pointer -> . TIMES type_qualifier_list_opt pointer
    (37) direct_typeid_declarator -> . TYPEID
    (38) direct_typeid_declarator -> . LPAREN typeid_declarator RPAREN
    (39) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (40) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (41) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (42) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (43) direct_typeid_declarator -> . direct_typeid_declarator LPAREN parameter_type_list RPAREN
    (44) direct_typeid_declarator -> . direct_typeid_declarator LPAREN identifier_list_opt RPAREN

    ID              shift and go to state 23
    LPAREN          shift and go to state 71
    TIMES           shift and go to state 26
    TYPEID          shift and go to state 76

    id_declarator                  shift and go to state 93
    typeid_declarator              shift and go to state 112
    direct_id_declarator           shift and go to state 15
    pointer                        shift and go to state 68
    direct_typeid_declarator       shift and go to state 75

state 72

    (120) init_declarator_list -> init_declarator .

    COMMA           reduce using rule 120 (init_declarator_list -> init_declarator .)
    SEMI            reduce using rule 120 (init_declarator_list -> init_declarator .)


state 73

    (122) init_declarator -> declarator .
    (123) init_declarator -> declarator . EQUALS initializer

    COMMA           reduce using rule 122 (init_declarator -> declarator .)
    SEMI            reduce using rule 122 (init_declarator -> declarator .)
    EQUALS          shift and go to state 113


state 74

    (163) declarator -> typeid_declarator .

    EQUALS          reduce using rule 163 (declarator -> typeid_declarator .)
    COMMA           reduce using rule 163 (declarator -> typeid_declarator .)
    SEMI            reduce using rule 163 (declarator -> typeid_declarator .)
    COLON           reduce using rule 163 (declarator -> typeid_declarator .)


state 75

    (54) typeid_declarator -> direct_typeid_declarator .
    (39) direct_typeid_declarator -> direct_typeid_declarator . LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (40) direct_typeid_declarator -> direct_typeid_declarator . LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (41) direct_typeid_declarator -> direct_typeid_declarator . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (42) direct_typeid_declarator -> direct_typeid_declarator . LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (43) direct_typeid_declarator -> direct_typeid_declarator . LPAREN parameter_type_list RPAREN
    (44) direct_typeid_declarator -> direct_typeid_declarator . LPAREN identifier_list_opt RPAREN

    EQUALS          reduce using rule 54 (typeid_declarator -> direct_typeid_declarator .)
    COMMA           reduce using rule 54 (typeid_declarator -> direct_typeid_declarator .)
    SEMI            reduce using rule 54 (typeid_declarator -> direct_typeid_declarator .)
    RPAREN          reduce using rule 54 (typeid_declarator -> direct_typeid_declarator .)
    COLON           reduce using rule 54 (typeid_declarator -> direct_typeid_declarator .)
    LBRACKET        shift and go to state 114
    LPAREN          shift and go to state 115


state 76

    (37) direct_typeid_declarator -> TYPEID .

    LBRACKET        reduce using rule 37 (direct_typeid_declarator -> TYPEID .)
    LPAREN          reduce using rule 37 (direct_typeid_declarator -> TYPEID .)
    EQUALS          reduce using rule 37 (direct_typeid_declarator -> TYPEID .)
    COMMA           reduce using rule 37 (direct_typeid_declarator -> TYPEID .)
    SEMI            reduce using rule 37 (direct_typeid_declarator -> TYPEID .)
    RPAREN          reduce using rule 37 (direct_typeid_declarator -> TYPEID .)
    COLON           reduce using rule 37 (direct_typeid_declarator -> TYPEID .)


state 77

    (83) declaration -> decl_body SEMI .

    SEMI            reduce using rule 83 (declaration -> decl_body SEMI .)
    PPHASH          reduce using rule 83 (declaration -> decl_body SEMI .)
    PPPRAGMA        reduce using rule 83 (declaration -> decl_body SEMI .)
    ID              reduce using rule 83 (declaration -> decl_body SEMI .)
    LPAREN          reduce using rule 83 (declaration -> decl_body SEMI .)
    TIMES           reduce using rule 83 (declaration -> decl_body SEMI .)
    TYPEID          reduce using rule 83 (declaration -> decl_body SEMI .)
    ENUM            reduce using rule 83 (declaration -> decl_body SEMI .)
    VOID            reduce using rule 83 (declaration -> decl_body SEMI .)
    _BOOL           reduce using rule 83 (declaration -> decl_body SEMI .)
    CHAR            reduce using rule 83 (declaration -> decl_body SEMI .)
    SHORT           reduce using rule 83 (declaration -> decl_body SEMI .)
    INT             reduce using rule 83 (declaration -> decl_body SEMI .)
    LONG            reduce using rule 83 (declaration -> decl_body SEMI .)
    FLOAT           reduce using rule 83 (declaration -> decl_body SEMI .)
    DOUBLE          reduce using rule 83 (declaration -> decl_body SEMI .)
    _COMPLEX        reduce using rule 83 (declaration -> decl_body SEMI .)
    SIGNED          reduce using rule 83 (declaration -> decl_body SEMI .)
    UNSIGNED        reduce using rule 83 (declaration -> decl_body SEMI .)
    __INT128        reduce using rule 83 (declaration -> decl_body SEMI .)
    CONST           reduce using rule 83 (declaration -> decl_body SEMI .)
    RESTRICT        reduce using rule 83 (declaration -> decl_body SEMI .)
    VOLATILE        reduce using rule 83 (declaration -> decl_body SEMI .)
    AUTO            reduce using rule 83 (declaration -> decl_body SEMI .)
    REGISTER        reduce using rule 83 (declaration -> decl_body SEMI .)
    STATIC          reduce using rule 83 (declaration -> decl_body SEMI .)
    EXTERN          reduce using rule 83 (declaration -> decl_body SEMI .)
    TYPEDEF         reduce using rule 83 (declaration -> decl_body SEMI .)
    INLINE          reduce using rule 83 (declaration -> decl_body SEMI .)
    STRUCT          reduce using rule 83 (declaration -> decl_body SEMI .)
    UNION           reduce using rule 83 (declaration -> decl_body SEMI .)
    $end            reduce using rule 83 (declaration -> decl_body SEMI .)
    LBRACE          reduce using rule 83 (declaration -> decl_body SEMI .)
    CASE            reduce using rule 83 (declaration -> decl_body SEMI .)
    DEFAULT         reduce using rule 83 (declaration -> decl_body SEMI .)
    IF              reduce using rule 83 (declaration -> decl_body SEMI .)
    SWITCH          reduce using rule 83 (declaration -> decl_body SEMI .)
    WHILE           reduce using rule 83 (declaration -> decl_body SEMI .)
    DO              reduce using rule 83 (declaration -> decl_body SEMI .)
    FOR             reduce using rule 83 (declaration -> decl_body SEMI .)
    GOTO            reduce using rule 83 (declaration -> decl_body SEMI .)
    BREAK           reduce using rule 83 (declaration -> decl_body SEMI .)
    CONTINUE        reduce using rule 83 (declaration -> decl_body SEMI .)
    RETURN          reduce using rule 83 (declaration -> decl_body SEMI .)
    PLUSPLUS        reduce using rule 83 (declaration -> decl_body SEMI .)
    MINUSMINUS      reduce using rule 83 (declaration -> decl_body SEMI .)
    SIZEOF          reduce using rule 83 (declaration -> decl_body SEMI .)
    AND             reduce using rule 83 (declaration -> decl_body SEMI .)
    PLUS            reduce using rule 83 (declaration -> decl_body SEMI .)
    MINUS           reduce using rule 83 (declaration -> decl_body SEMI .)
    NOT             reduce using rule 83 (declaration -> decl_body SEMI .)
    LNOT            reduce using rule 83 (declaration -> decl_body SEMI .)
    OFFSETOF        reduce using rule 83 (declaration -> decl_body SEMI .)
    INT_CONST_DEC   reduce using rule 83 (declaration -> decl_body SEMI .)
    INT_CONST_OCT   reduce using rule 83 (declaration -> decl_body SEMI .)
    INT_CONST_HEX   reduce using rule 83 (declaration -> decl_body SEMI .)
    INT_CONST_BIN   reduce using rule 83 (declaration -> decl_body SEMI .)
    FLOAT_CONST     reduce using rule 83 (declaration -> decl_body SEMI .)
    HEX_FLOAT_CONST reduce using rule 83 (declaration -> decl_body SEMI .)
    CHAR_CONST      reduce using rule 83 (declaration -> decl_body SEMI .)
    WCHAR_CONST     reduce using rule 83 (declaration -> decl_body SEMI .)
    STRING_LITERAL  reduce using rule 83 (declaration -> decl_body SEMI .)
    WSTRING_LITERAL reduce using rule 83 (declaration -> decl_body SEMI .)
    RBRACE          reduce using rule 83 (declaration -> decl_body SEMI .)


state 78

    (69) pppragma_directive -> PPPRAGMA PPPRAGMASTR .

    SEMI            reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    PPHASH          reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    PPPRAGMA        reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    ID              reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    LPAREN          reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    TIMES           reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    TYPEID          reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    ENUM            reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    VOID            reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    _BOOL           reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    CHAR            reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    SHORT           reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    INT             reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    LONG            reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    FLOAT           reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    DOUBLE          reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    _COMPLEX        reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    SIGNED          reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    UNSIGNED        reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    __INT128        reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    CONST           reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    RESTRICT        reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    VOLATILE        reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    AUTO            reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    REGISTER        reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    STATIC          reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    EXTERN          reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    TYPEDEF         reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    INLINE          reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    STRUCT          reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    UNION           reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    $end            reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    RBRACE          reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    CASE            reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    DEFAULT         reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    IF              reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    SWITCH          reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    WHILE           reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    DO              reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    FOR             reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    GOTO            reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    BREAK           reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    CONTINUE        reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    RETURN          reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    LBRACE          reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    PLUSPLUS        reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    MINUSMINUS      reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    SIZEOF          reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    AND             reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    PLUS            reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    MINUS           reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    NOT             reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    LNOT            reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    OFFSETOF        reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    INT_CONST_DEC   reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    INT_CONST_OCT   reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    INT_CONST_HEX   reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    INT_CONST_BIN   reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    FLOAT_CONST     reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    HEX_FLOAT_CONST reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    CHAR_CONST      reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    WCHAR_CONST     reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    STRING_LITERAL  reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    WSTRING_LITERAL reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    ELSE            reduce using rule 69 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)


state 79

    (31) direct_id_declarator -> direct_id_declarator LBRACKET . type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> direct_id_declarator LBRACKET . STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> direct_id_declarator LBRACKET . type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> direct_id_declarator LBRACKET . type_qualifier_list_opt TIMES RBRACKET
    (27) type_qualifier_list_opt -> . empty
    (28) type_qualifier_list_opt -> . type_qualifier_list
    (166) type_qualifier_list -> . type_qualifier
    (167) type_qualifier_list -> . type_qualifier_list type_qualifier
    (309) empty -> .
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE

    STATIC          shift and go to state 117
    TIMES           reduce using rule 309 (empty -> .)
    PLUSPLUS        reduce using rule 309 (empty -> .)
    MINUSMINUS      reduce using rule 309 (empty -> .)
    SIZEOF          reduce using rule 309 (empty -> .)
    LPAREN          reduce using rule 309 (empty -> .)
    AND             reduce using rule 309 (empty -> .)
    PLUS            reduce using rule 309 (empty -> .)
    MINUS           reduce using rule 309 (empty -> .)
    NOT             reduce using rule 309 (empty -> .)
    LNOT            reduce using rule 309 (empty -> .)
    OFFSETOF        reduce using rule 309 (empty -> .)
    ID              reduce using rule 309 (empty -> .)
    INT_CONST_DEC   reduce using rule 309 (empty -> .)
    INT_CONST_OCT   reduce using rule 309 (empty -> .)
    INT_CONST_HEX   reduce using rule 309 (empty -> .)
    INT_CONST_BIN   reduce using rule 309 (empty -> .)
    FLOAT_CONST     reduce using rule 309 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 309 (empty -> .)
    CHAR_CONST      reduce using rule 309 (empty -> .)
    WCHAR_CONST     reduce using rule 309 (empty -> .)
    STRING_LITERAL  reduce using rule 309 (empty -> .)
    WSTRING_LITERAL reduce using rule 309 (empty -> .)
    RBRACKET        reduce using rule 309 (empty -> .)
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47

    type_qualifier_list_opt        shift and go to state 116
    type_qualifier_list            shift and go to state 118
    empty                          shift and go to state 95
    type_qualifier                 shift and go to state 97

state 80

    (35) direct_id_declarator -> direct_id_declarator LPAREN . parameter_type_list RPAREN
    (36) direct_id_declarator -> direct_id_declarator LPAREN . identifier_list_opt RPAREN
    (168) parameter_type_list -> . parameter_list
    (169) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (17) identifier_list_opt -> . empty
    (18) identifier_list_opt -> . identifier_list
    (170) parameter_list -> . parameter_declaration
    (171) parameter_list -> . parameter_list COMMA parameter_declaration
    (309) empty -> .
    (175) identifier_list -> . identifier
    (176) identifier_list -> . identifier_list COMMA identifier
    (172) parameter_declaration -> . declaration_specifiers id_declarator
    (173) parameter_declaration -> . declaration_specifiers typeid_noparen_declarator
    (174) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (294) identifier -> . ID
    (89) declaration_specifiers -> . declaration_specifiers type_qualifier
    (90) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (91) declaration_specifiers -> . declaration_specifiers function_specifier
    (92) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (93) declaration_specifiers -> . type_specifier
    (94) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (113) type_specifier -> . typedef_name
    (114) type_specifier -> . enum_specifier
    (115) type_specifier -> . struct_or_union_specifier
    (116) type_specifier -> . type_specifier_no_typeid
    (86) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (87) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (88) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (221) typedef_name -> . TYPEID
    (152) enum_specifier -> . ENUM ID
    (153) enum_specifier -> . ENUM TYPEID
    (154) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (155) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (156) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (132) struct_or_union_specifier -> . struct_or_union ID
    (133) struct_or_union_specifier -> . struct_or_union TYPEID
    (134) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (135) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (136) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (137) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (138) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (139) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (101) type_specifier_no_typeid -> . VOID
    (102) type_specifier_no_typeid -> . _BOOL
    (103) type_specifier_no_typeid -> . CHAR
    (104) type_specifier_no_typeid -> . SHORT
    (105) type_specifier_no_typeid -> . INT
    (106) type_specifier_no_typeid -> . LONG
    (107) type_specifier_no_typeid -> . FLOAT
    (108) type_specifier_no_typeid -> . DOUBLE
    (109) type_specifier_no_typeid -> . _COMPLEX
    (110) type_specifier_no_typeid -> . SIGNED
    (111) type_specifier_no_typeid -> . UNSIGNED
    (112) type_specifier_no_typeid -> . __INT128
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE
    (95) storage_class_specifier -> . AUTO
    (96) storage_class_specifier -> . REGISTER
    (97) storage_class_specifier -> . STATIC
    (98) storage_class_specifier -> . EXTERN
    (99) storage_class_specifier -> . TYPEDEF
    (100) function_specifier -> . INLINE
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

    RPAREN          reduce using rule 309 (empty -> .)
    ID              shift and go to state 127
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    VOID            shift and go to state 33
    _BOOL           shift and go to state 34
    CHAR            shift and go to state 35
    SHORT           shift and go to state 36
    INT             shift and go to state 37
    LONG            shift and go to state 38
    FLOAT           shift and go to state 39
    DOUBLE          shift and go to state 40
    _COMPLEX        shift and go to state 41
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 43
    __INT128        shift and go to state 44
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47
    AUTO            shift and go to state 48
    REGISTER        shift and go to state 49
    STATIC          shift and go to state 25
    EXTERN          shift and go to state 50
    TYPEDEF         shift and go to state 51
    INLINE          shift and go to state 52
    STRUCT          shift and go to state 53
    UNION           shift and go to state 54

    parameter_type_list            shift and go to state 119
    identifier_list_opt            shift and go to state 120
    parameter_list                 shift and go to state 121
    empty                          shift and go to state 122
    identifier_list                shift and go to state 123
    parameter_declaration          shift and go to state 124
    identifier                     shift and go to state 125
    declaration_specifiers         shift and go to state 126
    type_qualifier                 shift and go to state 17
    storage_class_specifier        shift and go to state 18
    function_specifier             shift and go to state 19
    type_specifier_no_typeid       shift and go to state 20
    type_specifier                 shift and go to state 21
    declaration_specifiers_no_type shift and go to state 128
    typedef_name                   shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union_specifier      shift and go to state 29
    struct_or_union                shift and go to state 32

state 81

    (53) id_declarator -> pointer direct_id_declarator .
    (31) direct_id_declarator -> direct_id_declarator . LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> direct_id_declarator . LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> direct_id_declarator . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> direct_id_declarator . LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (35) direct_id_declarator -> direct_id_declarator . LPAREN parameter_type_list RPAREN
    (36) direct_id_declarator -> direct_id_declarator . LPAREN identifier_list_opt RPAREN

    CONST           reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    RESTRICT        reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    VOLATILE        reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    AUTO            reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    REGISTER        reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    STATIC          reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    EXTERN          reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    TYPEDEF         reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    INLINE          reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    TYPEID          reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    ENUM            reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    VOID            reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    _BOOL           reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    CHAR            reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    SHORT           reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    INT             reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    LONG            reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    FLOAT           reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    DOUBLE          reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    _COMPLEX        reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    SIGNED          reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    UNSIGNED        reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    __INT128        reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    STRUCT          reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    UNION           reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    LBRACE          reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    EQUALS          reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    COMMA           reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    SEMI            reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    RPAREN          reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    COLON           reduce using rule 53 (id_declarator -> pointer direct_id_declarator .)
    LBRACKET        shift and go to state 79
    LPAREN          shift and go to state 80


state 82

    (86) declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .

    TYPEID          reduce using rule 86 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    ENUM            reduce using rule 86 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    VOID            reduce using rule 86 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    _BOOL           reduce using rule 86 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    CHAR            reduce using rule 86 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    SHORT           reduce using rule 86 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    INT             reduce using rule 86 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    LONG            reduce using rule 86 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    FLOAT           reduce using rule 86 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    DOUBLE          reduce using rule 86 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    _COMPLEX        reduce using rule 86 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    SIGNED          reduce using rule 86 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    UNSIGNED        reduce using rule 86 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    __INT128        reduce using rule 86 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    STRUCT          reduce using rule 86 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    UNION           reduce using rule 86 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    ID              reduce using rule 86 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    LPAREN          reduce using rule 86 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    TIMES           reduce using rule 86 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)
    SEMI            reduce using rule 86 (declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt .)


state 83

    (9) declaration_specifiers_no_type_opt -> empty .

    TYPEID          reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)
    ENUM            reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)
    VOID            reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)
    _BOOL           reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)
    CHAR            reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)
    SHORT           reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)
    INT             reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)
    LONG            reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)
    FLOAT           reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)
    DOUBLE          reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)
    _COMPLEX        reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)
    SIGNED          reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)
    UNSIGNED        reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)
    __INT128        reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)
    STRUCT          reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)
    UNION           reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)
    ID              reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)
    LPAREN          reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)
    TIMES           reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)
    SEMI            reduce using rule 9 (declaration_specifiers_no_type_opt -> empty .)


state 84

    (10) declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .

    TYPEID          reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    ENUM            reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    VOID            reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    _BOOL           reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    CHAR            reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    SHORT           reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    INT             reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    LONG            reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    FLOAT           reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    DOUBLE          reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    _COMPLEX        reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    SIGNED          reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    UNSIGNED        reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    __INT128        reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    STRUCT          reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    UNION           reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    ID              reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    LPAREN          reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    TIMES           reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)
    SEMI            reduce using rule 10 (declaration_specifiers_no_type_opt -> declaration_specifiers_no_type .)


state 85

    (87) declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .

    TYPEID          reduce using rule 87 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    ENUM            reduce using rule 87 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    VOID            reduce using rule 87 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    _BOOL           reduce using rule 87 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    CHAR            reduce using rule 87 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    SHORT           reduce using rule 87 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    INT             reduce using rule 87 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    LONG            reduce using rule 87 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    FLOAT           reduce using rule 87 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    DOUBLE          reduce using rule 87 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    _COMPLEX        reduce using rule 87 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    SIGNED          reduce using rule 87 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    UNSIGNED        reduce using rule 87 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    __INT128        reduce using rule 87 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    STRUCT          reduce using rule 87 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    UNION           reduce using rule 87 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    ID              reduce using rule 87 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    LPAREN          reduce using rule 87 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    TIMES           reduce using rule 87 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)
    SEMI            reduce using rule 87 (declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt .)


state 86

    (88) declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .

    TYPEID          reduce using rule 88 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    ENUM            reduce using rule 88 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    VOID            reduce using rule 88 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    _BOOL           reduce using rule 88 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    CHAR            reduce using rule 88 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    SHORT           reduce using rule 88 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    INT             reduce using rule 88 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    LONG            reduce using rule 88 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    FLOAT           reduce using rule 88 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    DOUBLE          reduce using rule 88 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    _COMPLEX        reduce using rule 88 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    SIGNED          reduce using rule 88 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    UNSIGNED        reduce using rule 88 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    __INT128        reduce using rule 88 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    STRUCT          reduce using rule 88 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    UNION           reduce using rule 88 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    ID              reduce using rule 88 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    LPAREN          reduce using rule 88 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    TIMES           reduce using rule 88 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)
    SEMI            reduce using rule 88 (declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt .)


state 87

    (94) declaration_specifiers -> declaration_specifiers_no_type type_specifier .

    CONST           reduce using rule 94 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    RESTRICT        reduce using rule 94 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    VOLATILE        reduce using rule 94 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    AUTO            reduce using rule 94 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    REGISTER        reduce using rule 94 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    STATIC          reduce using rule 94 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    EXTERN          reduce using rule 94 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    TYPEDEF         reduce using rule 94 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    INLINE          reduce using rule 94 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    VOID            reduce using rule 94 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    _BOOL           reduce using rule 94 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    CHAR            reduce using rule 94 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    SHORT           reduce using rule 94 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    INT             reduce using rule 94 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    LONG            reduce using rule 94 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    FLOAT           reduce using rule 94 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    DOUBLE          reduce using rule 94 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    _COMPLEX        reduce using rule 94 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    SIGNED          reduce using rule 94 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    UNSIGNED        reduce using rule 94 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    __INT128        reduce using rule 94 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    ID              reduce using rule 94 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    LPAREN          reduce using rule 94 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    TIMES           reduce using rule 94 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    TYPEID          reduce using rule 94 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    SEMI            reduce using rule 94 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    LBRACKET        reduce using rule 94 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    COMMA           reduce using rule 94 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)
    RPAREN          reduce using rule 94 (declaration_specifiers -> declaration_specifiers_no_type type_specifier .)


state 88

    (82) decl_body -> declaration_specifiers_no_type id_init_declarator_list_opt .

    SEMI            reduce using rule 82 (decl_body -> declaration_specifiers_no_type id_init_declarator_list_opt .)


state 89

    (15) id_init_declarator_list_opt -> empty .

    SEMI            reduce using rule 15 (id_init_declarator_list_opt -> empty .)


state 90

    (16) id_init_declarator_list_opt -> id_init_declarator_list .
    (125) id_init_declarator_list -> id_init_declarator_list . COMMA init_declarator

    SEMI            reduce using rule 16 (id_init_declarator_list_opt -> id_init_declarator_list .)
    COMMA           shift and go to state 129


state 91

    (124) id_init_declarator_list -> id_init_declarator .

    COMMA           reduce using rule 124 (id_init_declarator_list -> id_init_declarator .)
    SEMI            reduce using rule 124 (id_init_declarator_list -> id_init_declarator .)


state 92

    (126) id_init_declarator -> id_declarator .
    (127) id_init_declarator -> id_declarator . EQUALS initializer

    COMMA           reduce using rule 126 (id_init_declarator -> id_declarator .)
    SEMI            reduce using rule 126 (id_init_declarator -> id_declarator .)
    EQUALS          shift and go to state 130


state 93

    (30) direct_id_declarator -> LPAREN id_declarator . RPAREN

    RPAREN          shift and go to state 131


state 94

    (164) pointer -> TIMES type_qualifier_list_opt .
    (165) pointer -> TIMES type_qualifier_list_opt . pointer
    (164) pointer -> . TIMES type_qualifier_list_opt
    (165) pointer -> . TIMES type_qualifier_list_opt pointer

    ID              reduce using rule 164 (pointer -> TIMES type_qualifier_list_opt .)
    LPAREN          reduce using rule 164 (pointer -> TIMES type_qualifier_list_opt .)
    TYPEID          reduce using rule 164 (pointer -> TIMES type_qualifier_list_opt .)
    LBRACKET        reduce using rule 164 (pointer -> TIMES type_qualifier_list_opt .)
    COMMA           reduce using rule 164 (pointer -> TIMES type_qualifier_list_opt .)
    RPAREN          reduce using rule 164 (pointer -> TIMES type_qualifier_list_opt .)
    TIMES           shift and go to state 26

    pointer                        shift and go to state 132

state 95

    (27) type_qualifier_list_opt -> empty .

    TIMES           reduce using rule 27 (type_qualifier_list_opt -> empty .)
    ID              reduce using rule 27 (type_qualifier_list_opt -> empty .)
    LPAREN          reduce using rule 27 (type_qualifier_list_opt -> empty .)
    TYPEID          reduce using rule 27 (type_qualifier_list_opt -> empty .)
    LBRACKET        reduce using rule 27 (type_qualifier_list_opt -> empty .)
    COMMA           reduce using rule 27 (type_qualifier_list_opt -> empty .)
    RPAREN          reduce using rule 27 (type_qualifier_list_opt -> empty .)
    PLUSPLUS        reduce using rule 27 (type_qualifier_list_opt -> empty .)
    MINUSMINUS      reduce using rule 27 (type_qualifier_list_opt -> empty .)
    SIZEOF          reduce using rule 27 (type_qualifier_list_opt -> empty .)
    AND             reduce using rule 27 (type_qualifier_list_opt -> empty .)
    PLUS            reduce using rule 27 (type_qualifier_list_opt -> empty .)
    MINUS           reduce using rule 27 (type_qualifier_list_opt -> empty .)
    NOT             reduce using rule 27 (type_qualifier_list_opt -> empty .)
    LNOT            reduce using rule 27 (type_qualifier_list_opt -> empty .)
    OFFSETOF        reduce using rule 27 (type_qualifier_list_opt -> empty .)
    INT_CONST_DEC   reduce using rule 27 (type_qualifier_list_opt -> empty .)
    INT_CONST_OCT   reduce using rule 27 (type_qualifier_list_opt -> empty .)
    INT_CONST_HEX   reduce using rule 27 (type_qualifier_list_opt -> empty .)
    INT_CONST_BIN   reduce using rule 27 (type_qualifier_list_opt -> empty .)
    FLOAT_CONST     reduce using rule 27 (type_qualifier_list_opt -> empty .)
    HEX_FLOAT_CONST reduce using rule 27 (type_qualifier_list_opt -> empty .)
    CHAR_CONST      reduce using rule 27 (type_qualifier_list_opt -> empty .)
    WCHAR_CONST     reduce using rule 27 (type_qualifier_list_opt -> empty .)
    STRING_LITERAL  reduce using rule 27 (type_qualifier_list_opt -> empty .)
    WSTRING_LITERAL reduce using rule 27 (type_qualifier_list_opt -> empty .)
    RBRACKET        reduce using rule 27 (type_qualifier_list_opt -> empty .)


state 96

    (28) type_qualifier_list_opt -> type_qualifier_list .
    (167) type_qualifier_list -> type_qualifier_list . type_qualifier
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE

    TIMES           reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    ID              reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    LPAREN          reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    TYPEID          reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    LBRACKET        reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    COMMA           reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    RPAREN          reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    PLUSPLUS        reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    MINUSMINUS      reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    SIZEOF          reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    AND             reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    PLUS            reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    MINUS           reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    NOT             reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    LNOT            reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    OFFSETOF        reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_DEC   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_OCT   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_HEX   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_BIN   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    FLOAT_CONST     reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    HEX_FLOAT_CONST reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    CHAR_CONST      reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    WCHAR_CONST     reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    STRING_LITERAL  reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    WSTRING_LITERAL reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47

    type_qualifier                 shift and go to state 133

state 97

    (166) type_qualifier_list -> type_qualifier .

    CONST           reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    RESTRICT        reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    VOLATILE        reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    TIMES           reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    ID              reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    LPAREN          reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    TYPEID          reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    LBRACKET        reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    COMMA           reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    RPAREN          reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    STATIC          reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    PLUSPLUS        reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    MINUSMINUS      reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    SIZEOF          reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    AND             reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    PLUS            reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    MINUS           reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    NOT             reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    LNOT            reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    OFFSETOF        reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    INT_CONST_DEC   reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    INT_CONST_OCT   reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    INT_CONST_HEX   reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    INT_CONST_BIN   reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    FLOAT_CONST     reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    HEX_FLOAT_CONST reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    CHAR_CONST      reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    WCHAR_CONST     reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    STRING_LITERAL  reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    WSTRING_LITERAL reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    RBRACKET        reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    ENUM            reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    VOID            reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    _BOOL           reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    CHAR            reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    SHORT           reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    INT             reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    LONG            reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    FLOAT           reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    DOUBLE          reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    _COMPLEX        reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    SIGNED          reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    UNSIGNED        reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    __INT128        reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    STRUCT          reduce using rule 166 (type_qualifier_list -> type_qualifier .)
    UNION           reduce using rule 166 (type_qualifier_list -> type_qualifier .)


state 98

    (152) enum_specifier -> ENUM ID .
    (155) enum_specifier -> ENUM ID . brace_open enumerator_list brace_close
    (307) brace_open -> . LBRACE

    CONST           reduce using rule 152 (enum_specifier -> ENUM ID .)
    RESTRICT        reduce using rule 152 (enum_specifier -> ENUM ID .)
    VOLATILE        reduce using rule 152 (enum_specifier -> ENUM ID .)
    AUTO            reduce using rule 152 (enum_specifier -> ENUM ID .)
    REGISTER        reduce using rule 152 (enum_specifier -> ENUM ID .)
    STATIC          reduce using rule 152 (enum_specifier -> ENUM ID .)
    EXTERN          reduce using rule 152 (enum_specifier -> ENUM ID .)
    TYPEDEF         reduce using rule 152 (enum_specifier -> ENUM ID .)
    INLINE          reduce using rule 152 (enum_specifier -> ENUM ID .)
    VOID            reduce using rule 152 (enum_specifier -> ENUM ID .)
    _BOOL           reduce using rule 152 (enum_specifier -> ENUM ID .)
    CHAR            reduce using rule 152 (enum_specifier -> ENUM ID .)
    SHORT           reduce using rule 152 (enum_specifier -> ENUM ID .)
    INT             reduce using rule 152 (enum_specifier -> ENUM ID .)
    LONG            reduce using rule 152 (enum_specifier -> ENUM ID .)
    FLOAT           reduce using rule 152 (enum_specifier -> ENUM ID .)
    DOUBLE          reduce using rule 152 (enum_specifier -> ENUM ID .)
    _COMPLEX        reduce using rule 152 (enum_specifier -> ENUM ID .)
    SIGNED          reduce using rule 152 (enum_specifier -> ENUM ID .)
    UNSIGNED        reduce using rule 152 (enum_specifier -> ENUM ID .)
    __INT128        reduce using rule 152 (enum_specifier -> ENUM ID .)
    ID              reduce using rule 152 (enum_specifier -> ENUM ID .)
    LPAREN          reduce using rule 152 (enum_specifier -> ENUM ID .)
    TIMES           reduce using rule 152 (enum_specifier -> ENUM ID .)
    TYPEID          reduce using rule 152 (enum_specifier -> ENUM ID .)
    SEMI            reduce using rule 152 (enum_specifier -> ENUM ID .)
    LBRACKET        reduce using rule 152 (enum_specifier -> ENUM ID .)
    COMMA           reduce using rule 152 (enum_specifier -> ENUM ID .)
    RPAREN          reduce using rule 152 (enum_specifier -> ENUM ID .)
    COLON           reduce using rule 152 (enum_specifier -> ENUM ID .)
    LBRACE          shift and go to state 101

    brace_open                     shift and go to state 134

state 99

    (153) enum_specifier -> ENUM TYPEID .
    (156) enum_specifier -> ENUM TYPEID . brace_open enumerator_list brace_close
    (307) brace_open -> . LBRACE

    CONST           reduce using rule 153 (enum_specifier -> ENUM TYPEID .)
    RESTRICT        reduce using rule 153 (enum_specifier -> ENUM TYPEID .)
    VOLATILE        reduce using rule 153 (enum_specifier -> ENUM TYPEID .)
    AUTO            reduce using rule 153 (enum_specifier -> ENUM TYPEID .)
    REGISTER        reduce using rule 153 (enum_specifier -> ENUM TYPEID .)
    STATIC          reduce using rule 153 (enum_specifier -> ENUM TYPEID .)
    EXTERN          reduce using rule 153 (enum_specifier -> ENUM TYPEID .)
    TYPEDEF         reduce using rule 153 (enum_specifier -> ENUM TYPEID .)
    INLINE          reduce using rule 153 (enum_specifier -> ENUM TYPEID .)
    VOID            reduce using rule 153 (enum_specifier -> ENUM TYPEID .)
    _BOOL           reduce using rule 153 (enum_specifier -> ENUM TYPEID .)
    CHAR            reduce using rule 153 (enum_specifier -> ENUM TYPEID .)
    SHORT           reduce using rule 153 (enum_specifier -> ENUM TYPEID .)
    INT             reduce using rule 153 (enum_specifier -> ENUM TYPEID .)
    LONG            reduce using rule 153 (enum_specifier -> ENUM TYPEID .)
    FLOAT           reduce using rule 153 (enum_specifier -> ENUM TYPEID .)
    DOUBLE          reduce using rule 153 (enum_specifier -> ENUM TYPEID .)
    _COMPLEX        reduce using rule 153 (enum_specifier -> ENUM TYPEID .)
    SIGNED          reduce using rule 153 (enum_specifier -> ENUM TYPEID .)
    UNSIGNED        reduce using rule 153 (enum_specifier -> ENUM TYPEID .)
    __INT128        reduce using rule 153 (enum_specifier -> ENUM TYPEID .)
    ID              reduce using rule 153 (enum_specifier -> ENUM TYPEID .)
    LPAREN          reduce using rule 153 (enum_specifier -> ENUM TYPEID .)
    TIMES           reduce using rule 153 (enum_specifier -> ENUM TYPEID .)
    TYPEID          reduce using rule 153 (enum_specifier -> ENUM TYPEID .)
    SEMI            reduce using rule 153 (enum_specifier -> ENUM TYPEID .)
    LBRACKET        reduce using rule 153 (enum_specifier -> ENUM TYPEID .)
    COMMA           reduce using rule 153 (enum_specifier -> ENUM TYPEID .)
    RPAREN          reduce using rule 153 (enum_specifier -> ENUM TYPEID .)
    COLON           reduce using rule 153 (enum_specifier -> ENUM TYPEID .)
    LBRACE          shift and go to state 101

    brace_open                     shift and go to state 135

state 100

    (154) enum_specifier -> ENUM brace_open . enumerator_list brace_close
    (157) enumerator_list -> . enumerator
    (158) enumerator_list -> . enumerator_list COMMA
    (159) enumerator_list -> . enumerator_list COMMA enumerator
    (160) enumerator -> . ID
    (161) enumerator -> . ID EQUALS constant_expression

    ID              shift and go to state 138

    enumerator_list                shift and go to state 136
    enumerator                     shift and go to state 137

state 101

    (307) brace_open -> LBRACE .

    ID              reduce using rule 307 (brace_open -> LBRACE .)
    RBRACE          reduce using rule 307 (brace_open -> LBRACE .)
    SEMI            reduce using rule 307 (brace_open -> LBRACE .)
    PPPRAGMA        reduce using rule 307 (brace_open -> LBRACE .)
    TYPEID          reduce using rule 307 (brace_open -> LBRACE .)
    ENUM            reduce using rule 307 (brace_open -> LBRACE .)
    VOID            reduce using rule 307 (brace_open -> LBRACE .)
    _BOOL           reduce using rule 307 (brace_open -> LBRACE .)
    CHAR            reduce using rule 307 (brace_open -> LBRACE .)
    SHORT           reduce using rule 307 (brace_open -> LBRACE .)
    INT             reduce using rule 307 (brace_open -> LBRACE .)
    LONG            reduce using rule 307 (brace_open -> LBRACE .)
    FLOAT           reduce using rule 307 (brace_open -> LBRACE .)
    DOUBLE          reduce using rule 307 (brace_open -> LBRACE .)
    _COMPLEX        reduce using rule 307 (brace_open -> LBRACE .)
    SIGNED          reduce using rule 307 (brace_open -> LBRACE .)
    UNSIGNED        reduce using rule 307 (brace_open -> LBRACE .)
    __INT128        reduce using rule 307 (brace_open -> LBRACE .)
    CONST           reduce using rule 307 (brace_open -> LBRACE .)
    RESTRICT        reduce using rule 307 (brace_open -> LBRACE .)
    VOLATILE        reduce using rule 307 (brace_open -> LBRACE .)
    STRUCT          reduce using rule 307 (brace_open -> LBRACE .)
    UNION           reduce using rule 307 (brace_open -> LBRACE .)
    CASE            reduce using rule 307 (brace_open -> LBRACE .)
    DEFAULT         reduce using rule 307 (brace_open -> LBRACE .)
    IF              reduce using rule 307 (brace_open -> LBRACE .)
    SWITCH          reduce using rule 307 (brace_open -> LBRACE .)
    WHILE           reduce using rule 307 (brace_open -> LBRACE .)
    DO              reduce using rule 307 (brace_open -> LBRACE .)
    FOR             reduce using rule 307 (brace_open -> LBRACE .)
    GOTO            reduce using rule 307 (brace_open -> LBRACE .)
    BREAK           reduce using rule 307 (brace_open -> LBRACE .)
    CONTINUE        reduce using rule 307 (brace_open -> LBRACE .)
    RETURN          reduce using rule 307 (brace_open -> LBRACE .)
    LBRACE          reduce using rule 307 (brace_open -> LBRACE .)
    AUTO            reduce using rule 307 (brace_open -> LBRACE .)
    REGISTER        reduce using rule 307 (brace_open -> LBRACE .)
    STATIC          reduce using rule 307 (brace_open -> LBRACE .)
    EXTERN          reduce using rule 307 (brace_open -> LBRACE .)
    TYPEDEF         reduce using rule 307 (brace_open -> LBRACE .)
    INLINE          reduce using rule 307 (brace_open -> LBRACE .)
    PLUSPLUS        reduce using rule 307 (brace_open -> LBRACE .)
    MINUSMINUS      reduce using rule 307 (brace_open -> LBRACE .)
    SIZEOF          reduce using rule 307 (brace_open -> LBRACE .)
    LPAREN          reduce using rule 307 (brace_open -> LBRACE .)
    AND             reduce using rule 307 (brace_open -> LBRACE .)
    TIMES           reduce using rule 307 (brace_open -> LBRACE .)
    PLUS            reduce using rule 307 (brace_open -> LBRACE .)
    MINUS           reduce using rule 307 (brace_open -> LBRACE .)
    NOT             reduce using rule 307 (brace_open -> LBRACE .)
    LNOT            reduce using rule 307 (brace_open -> LBRACE .)
    OFFSETOF        reduce using rule 307 (brace_open -> LBRACE .)
    INT_CONST_DEC   reduce using rule 307 (brace_open -> LBRACE .)
    INT_CONST_OCT   reduce using rule 307 (brace_open -> LBRACE .)
    INT_CONST_HEX   reduce using rule 307 (brace_open -> LBRACE .)
    INT_CONST_BIN   reduce using rule 307 (brace_open -> LBRACE .)
    FLOAT_CONST     reduce using rule 307 (brace_open -> LBRACE .)
    HEX_FLOAT_CONST reduce using rule 307 (brace_open -> LBRACE .)
    CHAR_CONST      reduce using rule 307 (brace_open -> LBRACE .)
    WCHAR_CONST     reduce using rule 307 (brace_open -> LBRACE .)
    STRING_LITERAL  reduce using rule 307 (brace_open -> LBRACE .)
    WSTRING_LITERAL reduce using rule 307 (brace_open -> LBRACE .)
    LBRACKET        reduce using rule 307 (brace_open -> LBRACE .)
    PERIOD          reduce using rule 307 (brace_open -> LBRACE .)


state 102

    (132) struct_or_union_specifier -> struct_or_union ID .
    (136) struct_or_union_specifier -> struct_or_union ID . brace_open struct_declaration_list brace_close
    (137) struct_or_union_specifier -> struct_or_union ID . brace_open brace_close
    (307) brace_open -> . LBRACE

    CONST           reduce using rule 132 (struct_or_union_specifier -> struct_or_union ID .)
    RESTRICT        reduce using rule 132 (struct_or_union_specifier -> struct_or_union ID .)
    VOLATILE        reduce using rule 132 (struct_or_union_specifier -> struct_or_union ID .)
    AUTO            reduce using rule 132 (struct_or_union_specifier -> struct_or_union ID .)
    REGISTER        reduce using rule 132 (struct_or_union_specifier -> struct_or_union ID .)
    STATIC          reduce using rule 132 (struct_or_union_specifier -> struct_or_union ID .)
    EXTERN          reduce using rule 132 (struct_or_union_specifier -> struct_or_union ID .)
    TYPEDEF         reduce using rule 132 (struct_or_union_specifier -> struct_or_union ID .)
    INLINE          reduce using rule 132 (struct_or_union_specifier -> struct_or_union ID .)
    VOID            reduce using rule 132 (struct_or_union_specifier -> struct_or_union ID .)
    _BOOL           reduce using rule 132 (struct_or_union_specifier -> struct_or_union ID .)
    CHAR            reduce using rule 132 (struct_or_union_specifier -> struct_or_union ID .)
    SHORT           reduce using rule 132 (struct_or_union_specifier -> struct_or_union ID .)
    INT             reduce using rule 132 (struct_or_union_specifier -> struct_or_union ID .)
    LONG            reduce using rule 132 (struct_or_union_specifier -> struct_or_union ID .)
    FLOAT           reduce using rule 132 (struct_or_union_specifier -> struct_or_union ID .)
    DOUBLE          reduce using rule 132 (struct_or_union_specifier -> struct_or_union ID .)
    _COMPLEX        reduce using rule 132 (struct_or_union_specifier -> struct_or_union ID .)
    SIGNED          reduce using rule 132 (struct_or_union_specifier -> struct_or_union ID .)
    UNSIGNED        reduce using rule 132 (struct_or_union_specifier -> struct_or_union ID .)
    __INT128        reduce using rule 132 (struct_or_union_specifier -> struct_or_union ID .)
    ID              reduce using rule 132 (struct_or_union_specifier -> struct_or_union ID .)
    LPAREN          reduce using rule 132 (struct_or_union_specifier -> struct_or_union ID .)
    TIMES           reduce using rule 132 (struct_or_union_specifier -> struct_or_union ID .)
    TYPEID          reduce using rule 132 (struct_or_union_specifier -> struct_or_union ID .)
    SEMI            reduce using rule 132 (struct_or_union_specifier -> struct_or_union ID .)
    LBRACKET        reduce using rule 132 (struct_or_union_specifier -> struct_or_union ID .)
    COMMA           reduce using rule 132 (struct_or_union_specifier -> struct_or_union ID .)
    RPAREN          reduce using rule 132 (struct_or_union_specifier -> struct_or_union ID .)
    COLON           reduce using rule 132 (struct_or_union_specifier -> struct_or_union ID .)
    LBRACE          shift and go to state 101

    brace_open                     shift and go to state 139

state 103

    (133) struct_or_union_specifier -> struct_or_union TYPEID .
    (138) struct_or_union_specifier -> struct_or_union TYPEID . brace_open struct_declaration_list brace_close
    (139) struct_or_union_specifier -> struct_or_union TYPEID . brace_open brace_close
    (307) brace_open -> . LBRACE

    CONST           reduce using rule 133 (struct_or_union_specifier -> struct_or_union TYPEID .)
    RESTRICT        reduce using rule 133 (struct_or_union_specifier -> struct_or_union TYPEID .)
    VOLATILE        reduce using rule 133 (struct_or_union_specifier -> struct_or_union TYPEID .)
    AUTO            reduce using rule 133 (struct_or_union_specifier -> struct_or_union TYPEID .)
    REGISTER        reduce using rule 133 (struct_or_union_specifier -> struct_or_union TYPEID .)
    STATIC          reduce using rule 133 (struct_or_union_specifier -> struct_or_union TYPEID .)
    EXTERN          reduce using rule 133 (struct_or_union_specifier -> struct_or_union TYPEID .)
    TYPEDEF         reduce using rule 133 (struct_or_union_specifier -> struct_or_union TYPEID .)
    INLINE          reduce using rule 133 (struct_or_union_specifier -> struct_or_union TYPEID .)
    VOID            reduce using rule 133 (struct_or_union_specifier -> struct_or_union TYPEID .)
    _BOOL           reduce using rule 133 (struct_or_union_specifier -> struct_or_union TYPEID .)
    CHAR            reduce using rule 133 (struct_or_union_specifier -> struct_or_union TYPEID .)
    SHORT           reduce using rule 133 (struct_or_union_specifier -> struct_or_union TYPEID .)
    INT             reduce using rule 133 (struct_or_union_specifier -> struct_or_union TYPEID .)
    LONG            reduce using rule 133 (struct_or_union_specifier -> struct_or_union TYPEID .)
    FLOAT           reduce using rule 133 (struct_or_union_specifier -> struct_or_union TYPEID .)
    DOUBLE          reduce using rule 133 (struct_or_union_specifier -> struct_or_union TYPEID .)
    _COMPLEX        reduce using rule 133 (struct_or_union_specifier -> struct_or_union TYPEID .)
    SIGNED          reduce using rule 133 (struct_or_union_specifier -> struct_or_union TYPEID .)
    UNSIGNED        reduce using rule 133 (struct_or_union_specifier -> struct_or_union TYPEID .)
    __INT128        reduce using rule 133 (struct_or_union_specifier -> struct_or_union TYPEID .)
    ID              reduce using rule 133 (struct_or_union_specifier -> struct_or_union TYPEID .)
    LPAREN          reduce using rule 133 (struct_or_union_specifier -> struct_or_union TYPEID .)
    TIMES           reduce using rule 133 (struct_or_union_specifier -> struct_or_union TYPEID .)
    TYPEID          reduce using rule 133 (struct_or_union_specifier -> struct_or_union TYPEID .)
    SEMI            reduce using rule 133 (struct_or_union_specifier -> struct_or_union TYPEID .)
    LBRACKET        reduce using rule 133 (struct_or_union_specifier -> struct_or_union TYPEID .)
    COMMA           reduce using rule 133 (struct_or_union_specifier -> struct_or_union TYPEID .)
    RPAREN          reduce using rule 133 (struct_or_union_specifier -> struct_or_union TYPEID .)
    COLON           reduce using rule 133 (struct_or_union_specifier -> struct_or_union TYPEID .)
    LBRACE          shift and go to state 101

    brace_open                     shift and go to state 140

state 104

    (134) struct_or_union_specifier -> struct_or_union brace_open . struct_declaration_list brace_close
    (135) struct_or_union_specifier -> struct_or_union brace_open . brace_close
    (142) struct_declaration_list -> . struct_declaration
    (143) struct_declaration_list -> . struct_declaration_list struct_declaration
    (308) brace_close -> . RBRACE
    (144) struct_declaration -> . specifier_qualifier_list struct_declarator_list_opt SEMI
    (145) struct_declaration -> . SEMI
    (146) struct_declaration -> . pppragma_directive
    (128) specifier_qualifier_list -> . specifier_qualifier_list type_specifier_no_typeid
    (129) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (130) specifier_qualifier_list -> . type_specifier
    (131) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (68) pppragma_directive -> . PPPRAGMA
    (69) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (113) type_specifier -> . typedef_name
    (114) type_specifier -> . enum_specifier
    (115) type_specifier -> . struct_or_union_specifier
    (116) type_specifier -> . type_specifier_no_typeid
    (166) type_qualifier_list -> . type_qualifier
    (167) type_qualifier_list -> . type_qualifier_list type_qualifier
    (221) typedef_name -> . TYPEID
    (152) enum_specifier -> . ENUM ID
    (153) enum_specifier -> . ENUM TYPEID
    (154) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (155) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (156) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (132) struct_or_union_specifier -> . struct_or_union ID
    (133) struct_or_union_specifier -> . struct_or_union TYPEID
    (134) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (135) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (136) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (137) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (138) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (139) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (101) type_specifier_no_typeid -> . VOID
    (102) type_specifier_no_typeid -> . _BOOL
    (103) type_specifier_no_typeid -> . CHAR
    (104) type_specifier_no_typeid -> . SHORT
    (105) type_specifier_no_typeid -> . INT
    (106) type_specifier_no_typeid -> . LONG
    (107) type_specifier_no_typeid -> . FLOAT
    (108) type_specifier_no_typeid -> . DOUBLE
    (109) type_specifier_no_typeid -> . _COMPLEX
    (110) type_specifier_no_typeid -> . SIGNED
    (111) type_specifier_no_typeid -> . UNSIGNED
    (112) type_specifier_no_typeid -> . __INT128
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

    RBRACE          shift and go to state 144
    SEMI            shift and go to state 146
    PPPRAGMA        shift and go to state 14
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    VOID            shift and go to state 33
    _BOOL           shift and go to state 34
    CHAR            shift and go to state 35
    SHORT           shift and go to state 36
    INT             shift and go to state 37
    LONG            shift and go to state 38
    FLOAT           shift and go to state 39
    DOUBLE          shift and go to state 40
    _COMPLEX        shift and go to state 41
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 43
    __INT128        shift and go to state 44
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47
    STRUCT          shift and go to state 53
    UNION           shift and go to state 54

    struct_or_union                shift and go to state 32
    struct_declaration_list        shift and go to state 141
    brace_close                    shift and go to state 142
    struct_declaration             shift and go to state 143
    specifier_qualifier_list       shift and go to state 145
    pppragma_directive             shift and go to state 147
    type_specifier_no_typeid       shift and go to state 20
    type_qualifier                 shift and go to state 97
    type_specifier                 shift and go to state 148
    type_qualifier_list            shift and go to state 149
    typedef_name                   shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union_specifier      shift and go to state 29

state 105

    (70) function_definition -> id_declarator declaration_list_opt compound_statement .

    SEMI            reduce using rule 70 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    PPHASH          reduce using rule 70 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    PPPRAGMA        reduce using rule 70 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    ID              reduce using rule 70 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    LPAREN          reduce using rule 70 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    TIMES           reduce using rule 70 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    TYPEID          reduce using rule 70 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    ENUM            reduce using rule 70 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    VOID            reduce using rule 70 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    _BOOL           reduce using rule 70 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    CHAR            reduce using rule 70 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    SHORT           reduce using rule 70 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    INT             reduce using rule 70 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    LONG            reduce using rule 70 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    FLOAT           reduce using rule 70 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    DOUBLE          reduce using rule 70 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    _COMPLEX        reduce using rule 70 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    SIGNED          reduce using rule 70 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    UNSIGNED        reduce using rule 70 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    __INT128        reduce using rule 70 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    CONST           reduce using rule 70 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    RESTRICT        reduce using rule 70 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    VOLATILE        reduce using rule 70 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    AUTO            reduce using rule 70 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    REGISTER        reduce using rule 70 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    STATIC          reduce using rule 70 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    EXTERN          reduce using rule 70 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    TYPEDEF         reduce using rule 70 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    INLINE          reduce using rule 70 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    STRUCT          reduce using rule 70 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    UNION           reduce using rule 70 (function_definition -> id_declarator declaration_list_opt compound_statement .)
    $end            reduce using rule 70 (function_definition -> id_declarator declaration_list_opt compound_statement .)


state 106

    (202) compound_statement -> brace_open . block_item_list_opt brace_close
    (5) block_item_list_opt -> . empty
    (6) block_item_list_opt -> . block_item_list
    (309) empty -> .
    (200) block_item_list -> . block_item
    (201) block_item_list -> . block_item_list block_item
    (198) block_item -> . declaration
    (199) block_item -> . statement
    (83) declaration -> . decl_body SEMI
    (72) statement -> . labeled_statement
    (73) statement -> . expression_statement
    (74) statement -> . compound_statement
    (75) statement -> . selection_statement
    (76) statement -> . iteration_statement
    (77) statement -> . jump_statement
    (78) statement -> . pppragma_directive
    (81) decl_body -> . declaration_specifiers init_declarator_list_opt
    (82) decl_body -> . declaration_specifiers_no_type id_init_declarator_list_opt
    (203) labeled_statement -> . ID COLON pragmacomp_or_statement
    (204) labeled_statement -> . CASE constant_expression COLON pragmacomp_or_statement
    (205) labeled_statement -> . DEFAULT COLON pragmacomp_or_statement
    (218) expression_statement -> . expression_opt SEMI
    (202) compound_statement -> . brace_open block_item_list_opt brace_close
    (206) selection_statement -> . IF LPAREN expression RPAREN pragmacomp_or_statement
    (207) selection_statement -> . IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
    (208) selection_statement -> . SWITCH LPAREN expression RPAREN pragmacomp_or_statement
    (209) iteration_statement -> . WHILE LPAREN expression RPAREN pragmacomp_or_statement
    (210) iteration_statement -> . DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI
    (211) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (212) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (213) jump_statement -> . GOTO ID SEMI
    (214) jump_statement -> . BREAK SEMI
    (215) jump_statement -> . CONTINUE SEMI
    (216) jump_statement -> . RETURN expression SEMI
    (217) jump_statement -> . RETURN SEMI
    (68) pppragma_directive -> . PPPRAGMA
    (69) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (89) declaration_specifiers -> . declaration_specifiers type_qualifier
    (90) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (91) declaration_specifiers -> . declaration_specifiers function_specifier
    (92) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (93) declaration_specifiers -> . type_specifier
    (94) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (86) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (87) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (88) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (307) brace_open -> . LBRACE
    (113) type_specifier -> . typedef_name
    (114) type_specifier -> . enum_specifier
    (115) type_specifier -> . struct_or_union_specifier
    (116) type_specifier -> . type_specifier_no_typeid
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE
    (95) storage_class_specifier -> . AUTO
    (96) storage_class_specifier -> . REGISTER
    (97) storage_class_specifier -> . STATIC
    (98) storage_class_specifier -> . EXTERN
    (99) storage_class_specifier -> . TYPEDEF
    (100) function_specifier -> . INLINE
    (219) expression -> . assignment_expression
    (220) expression -> . expression COMMA assignment_expression
    (221) typedef_name -> . TYPEID
    (152) enum_specifier -> . ENUM ID
    (153) enum_specifier -> . ENUM TYPEID
    (154) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (155) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (156) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (132) struct_or_union_specifier -> . struct_or_union ID
    (133) struct_or_union_specifier -> . struct_or_union TYPEID
    (134) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (135) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (136) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (137) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (138) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (139) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (101) type_specifier_no_typeid -> . VOID
    (102) type_specifier_no_typeid -> . _BOOL
    (103) type_specifier_no_typeid -> . CHAR
    (104) type_specifier_no_typeid -> . SHORT
    (105) type_specifier_no_typeid -> . INT
    (106) type_specifier_no_typeid -> . LONG
    (107) type_specifier_no_typeid -> . FLOAT
    (108) type_specifier_no_typeid -> . DOUBLE
    (109) type_specifier_no_typeid -> . _COMPLEX
    (110) type_specifier_no_typeid -> . SIGNED
    (111) type_specifier_no_typeid -> . UNSIGNED
    (112) type_specifier_no_typeid -> . __INT128
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    RBRACE          reduce using rule 309 (empty -> .)
    SEMI            reduce using rule 309 (empty -> .)
    ID              shift and go to state 163
    CASE            shift and go to state 164
    DEFAULT         shift and go to state 165
    IF              shift and go to state 167
    SWITCH          shift and go to state 170
    WHILE           shift and go to state 171
    DO              shift and go to state 172
    FOR             shift and go to state 173
    GOTO            shift and go to state 174
    BREAK           shift and go to state 175
    CONTINUE        shift and go to state 176
    RETURN          shift and go to state 177
    PPPRAGMA        shift and go to state 14
    LBRACE          shift and go to state 101
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47
    AUTO            shift and go to state 48
    REGISTER        shift and go to state 49
    STATIC          shift and go to state 25
    EXTERN          shift and go to state 50
    TYPEDEF         shift and go to state 51
    INLINE          shift and go to state 52
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    VOID            shift and go to state 33
    _BOOL           shift and go to state 34
    CHAR            shift and go to state 35
    SHORT           shift and go to state 36
    INT             shift and go to state 37
    LONG            shift and go to state 38
    FLOAT           shift and go to state 39
    DOUBLE          shift and go to state 40
    _COMPLEX        shift and go to state 41
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 43
    __INT128        shift and go to state 44
    STRUCT          shift and go to state 53
    UNION           shift and go to state 54
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    brace_open                     shift and go to state 106
    block_item_list_opt            shift and go to state 150
    empty                          shift and go to state 151
    block_item_list                shift and go to state 152
    block_item                     shift and go to state 153
    declaration                    shift and go to state 154
    statement                      shift and go to state 155
    decl_body                      shift and go to state 12
    labeled_statement              shift and go to state 156
    expression_statement           shift and go to state 157
    compound_statement             shift and go to state 158
    selection_statement            shift and go to state 159
    iteration_statement            shift and go to state 160
    jump_statement                 shift and go to state 161
    pppragma_directive             shift and go to state 162
    declaration_specifiers         shift and go to state 60
    declaration_specifiers_no_type shift and go to state 61
    expression_opt                 shift and go to state 166
    expression                     shift and go to state 169
    type_qualifier                 shift and go to state 17
    storage_class_specifier        shift and go to state 18
    function_specifier             shift and go to state 19
    type_specifier_no_typeid       shift and go to state 20
    type_specifier                 shift and go to state 21
    typedef_name                   shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union_specifier      shift and go to state 29
    assignment_expression          shift and go to state 178
    struct_or_union                shift and go to state 32
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 107

    (85) declaration_list -> declaration_list declaration .

    CONST           reduce using rule 85 (declaration_list -> declaration_list declaration .)
    RESTRICT        reduce using rule 85 (declaration_list -> declaration_list declaration .)
    VOLATILE        reduce using rule 85 (declaration_list -> declaration_list declaration .)
    AUTO            reduce using rule 85 (declaration_list -> declaration_list declaration .)
    REGISTER        reduce using rule 85 (declaration_list -> declaration_list declaration .)
    STATIC          reduce using rule 85 (declaration_list -> declaration_list declaration .)
    EXTERN          reduce using rule 85 (declaration_list -> declaration_list declaration .)
    TYPEDEF         reduce using rule 85 (declaration_list -> declaration_list declaration .)
    INLINE          reduce using rule 85 (declaration_list -> declaration_list declaration .)
    TYPEID          reduce using rule 85 (declaration_list -> declaration_list declaration .)
    ENUM            reduce using rule 85 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 85 (declaration_list -> declaration_list declaration .)
    _BOOL           reduce using rule 85 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 85 (declaration_list -> declaration_list declaration .)
    SHORT           reduce using rule 85 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 85 (declaration_list -> declaration_list declaration .)
    LONG            reduce using rule 85 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 85 (declaration_list -> declaration_list declaration .)
    DOUBLE          reduce using rule 85 (declaration_list -> declaration_list declaration .)
    _COMPLEX        reduce using rule 85 (declaration_list -> declaration_list declaration .)
    SIGNED          reduce using rule 85 (declaration_list -> declaration_list declaration .)
    UNSIGNED        reduce using rule 85 (declaration_list -> declaration_list declaration .)
    __INT128        reduce using rule 85 (declaration_list -> declaration_list declaration .)
    STRUCT          reduce using rule 85 (declaration_list -> declaration_list declaration .)
    UNION           reduce using rule 85 (declaration_list -> declaration_list declaration .)
    LBRACE          reduce using rule 85 (declaration_list -> declaration_list declaration .)


state 108

    (162) declarator -> id_declarator .

    EQUALS          reduce using rule 162 (declarator -> id_declarator .)
    COMMA           reduce using rule 162 (declarator -> id_declarator .)
    SEMI            reduce using rule 162 (declarator -> id_declarator .)
    COLON           reduce using rule 162 (declarator -> id_declarator .)


state 109

    (71) function_definition -> declaration_specifiers id_declarator declaration_list_opt . compound_statement
    (202) compound_statement -> . brace_open block_item_list_opt brace_close
    (307) brace_open -> . LBRACE

    LBRACE          shift and go to state 101

    compound_statement             shift and go to state 210
    brace_open                     shift and go to state 106

state 110

    (55) typeid_declarator -> pointer direct_typeid_declarator .
    (39) direct_typeid_declarator -> direct_typeid_declarator . LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (40) direct_typeid_declarator -> direct_typeid_declarator . LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (41) direct_typeid_declarator -> direct_typeid_declarator . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (42) direct_typeid_declarator -> direct_typeid_declarator . LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (43) direct_typeid_declarator -> direct_typeid_declarator . LPAREN parameter_type_list RPAREN
    (44) direct_typeid_declarator -> direct_typeid_declarator . LPAREN identifier_list_opt RPAREN

    EQUALS          reduce using rule 55 (typeid_declarator -> pointer direct_typeid_declarator .)
    COMMA           reduce using rule 55 (typeid_declarator -> pointer direct_typeid_declarator .)
    SEMI            reduce using rule 55 (typeid_declarator -> pointer direct_typeid_declarator .)
    RPAREN          reduce using rule 55 (typeid_declarator -> pointer direct_typeid_declarator .)
    COLON           reduce using rule 55 (typeid_declarator -> pointer direct_typeid_declarator .)
    LBRACKET        shift and go to state 114
    LPAREN          shift and go to state 115


state 111

    (121) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (122) init_declarator -> . declarator
    (123) init_declarator -> . declarator EQUALS initializer
    (162) declarator -> . id_declarator
    (163) declarator -> . typeid_declarator
    (52) id_declarator -> . direct_id_declarator
    (53) id_declarator -> . pointer direct_id_declarator
    (54) typeid_declarator -> . direct_typeid_declarator
    (55) typeid_declarator -> . pointer direct_typeid_declarator
    (29) direct_id_declarator -> . ID
    (30) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (31) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (35) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (36) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (164) pointer -> . TIMES type_qualifier_list_opt
    (165) pointer -> . TIMES type_qualifier_list_opt pointer
    (37) direct_typeid_declarator -> . TYPEID
    (38) direct_typeid_declarator -> . LPAREN typeid_declarator RPAREN
    (39) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (40) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (41) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (42) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (43) direct_typeid_declarator -> . direct_typeid_declarator LPAREN parameter_type_list RPAREN
    (44) direct_typeid_declarator -> . direct_typeid_declarator LPAREN identifier_list_opt RPAREN

    ID              shift and go to state 23
    LPAREN          shift and go to state 71
    TIMES           shift and go to state 26
    TYPEID          shift and go to state 76

    init_declarator                shift and go to state 211
    declarator                     shift and go to state 73
    id_declarator                  shift and go to state 108
    typeid_declarator              shift and go to state 74
    direct_id_declarator           shift and go to state 15
    pointer                        shift and go to state 68
    direct_typeid_declarator       shift and go to state 75

state 112

    (38) direct_typeid_declarator -> LPAREN typeid_declarator . RPAREN

    RPAREN          shift and go to state 212


state 113

    (123) init_declarator -> declarator EQUALS . initializer
    (177) initializer -> . assignment_expression
    (178) initializer -> . brace_open initializer_list_opt brace_close
    (179) initializer -> . brace_open initializer_list COMMA brace_close
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (307) brace_open -> . LBRACE
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LBRACE          shift and go to state 101
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    initializer                    shift and go to state 213
    assignment_expression          shift and go to state 214
    brace_open                     shift and go to state 215
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 114

    (39) direct_typeid_declarator -> direct_typeid_declarator LBRACKET . type_qualifier_list_opt assignment_expression_opt RBRACKET
    (40) direct_typeid_declarator -> direct_typeid_declarator LBRACKET . STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (41) direct_typeid_declarator -> direct_typeid_declarator LBRACKET . type_qualifier_list STATIC assignment_expression RBRACKET
    (42) direct_typeid_declarator -> direct_typeid_declarator LBRACKET . type_qualifier_list_opt TIMES RBRACKET
    (27) type_qualifier_list_opt -> . empty
    (28) type_qualifier_list_opt -> . type_qualifier_list
    (166) type_qualifier_list -> . type_qualifier
    (167) type_qualifier_list -> . type_qualifier_list type_qualifier
    (309) empty -> .
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE

    STATIC          shift and go to state 217
    TIMES           reduce using rule 309 (empty -> .)
    PLUSPLUS        reduce using rule 309 (empty -> .)
    MINUSMINUS      reduce using rule 309 (empty -> .)
    SIZEOF          reduce using rule 309 (empty -> .)
    LPAREN          reduce using rule 309 (empty -> .)
    AND             reduce using rule 309 (empty -> .)
    PLUS            reduce using rule 309 (empty -> .)
    MINUS           reduce using rule 309 (empty -> .)
    NOT             reduce using rule 309 (empty -> .)
    LNOT            reduce using rule 309 (empty -> .)
    OFFSETOF        reduce using rule 309 (empty -> .)
    ID              reduce using rule 309 (empty -> .)
    INT_CONST_DEC   reduce using rule 309 (empty -> .)
    INT_CONST_OCT   reduce using rule 309 (empty -> .)
    INT_CONST_HEX   reduce using rule 309 (empty -> .)
    INT_CONST_BIN   reduce using rule 309 (empty -> .)
    FLOAT_CONST     reduce using rule 309 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 309 (empty -> .)
    CHAR_CONST      reduce using rule 309 (empty -> .)
    WCHAR_CONST     reduce using rule 309 (empty -> .)
    STRING_LITERAL  reduce using rule 309 (empty -> .)
    WSTRING_LITERAL reduce using rule 309 (empty -> .)
    RBRACKET        reduce using rule 309 (empty -> .)
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47

    type_qualifier_list_opt        shift and go to state 216
    type_qualifier_list            shift and go to state 218
    empty                          shift and go to state 95
    type_qualifier                 shift and go to state 97

state 115

    (43) direct_typeid_declarator -> direct_typeid_declarator LPAREN . parameter_type_list RPAREN
    (44) direct_typeid_declarator -> direct_typeid_declarator LPAREN . identifier_list_opt RPAREN
    (168) parameter_type_list -> . parameter_list
    (169) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (17) identifier_list_opt -> . empty
    (18) identifier_list_opt -> . identifier_list
    (170) parameter_list -> . parameter_declaration
    (171) parameter_list -> . parameter_list COMMA parameter_declaration
    (309) empty -> .
    (175) identifier_list -> . identifier
    (176) identifier_list -> . identifier_list COMMA identifier
    (172) parameter_declaration -> . declaration_specifiers id_declarator
    (173) parameter_declaration -> . declaration_specifiers typeid_noparen_declarator
    (174) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (294) identifier -> . ID
    (89) declaration_specifiers -> . declaration_specifiers type_qualifier
    (90) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (91) declaration_specifiers -> . declaration_specifiers function_specifier
    (92) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (93) declaration_specifiers -> . type_specifier
    (94) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (113) type_specifier -> . typedef_name
    (114) type_specifier -> . enum_specifier
    (115) type_specifier -> . struct_or_union_specifier
    (116) type_specifier -> . type_specifier_no_typeid
    (86) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (87) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (88) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (221) typedef_name -> . TYPEID
    (152) enum_specifier -> . ENUM ID
    (153) enum_specifier -> . ENUM TYPEID
    (154) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (155) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (156) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (132) struct_or_union_specifier -> . struct_or_union ID
    (133) struct_or_union_specifier -> . struct_or_union TYPEID
    (134) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (135) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (136) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (137) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (138) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (139) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (101) type_specifier_no_typeid -> . VOID
    (102) type_specifier_no_typeid -> . _BOOL
    (103) type_specifier_no_typeid -> . CHAR
    (104) type_specifier_no_typeid -> . SHORT
    (105) type_specifier_no_typeid -> . INT
    (106) type_specifier_no_typeid -> . LONG
    (107) type_specifier_no_typeid -> . FLOAT
    (108) type_specifier_no_typeid -> . DOUBLE
    (109) type_specifier_no_typeid -> . _COMPLEX
    (110) type_specifier_no_typeid -> . SIGNED
    (111) type_specifier_no_typeid -> . UNSIGNED
    (112) type_specifier_no_typeid -> . __INT128
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE
    (95) storage_class_specifier -> . AUTO
    (96) storage_class_specifier -> . REGISTER
    (97) storage_class_specifier -> . STATIC
    (98) storage_class_specifier -> . EXTERN
    (99) storage_class_specifier -> . TYPEDEF
    (100) function_specifier -> . INLINE
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

    RPAREN          reduce using rule 309 (empty -> .)
    ID              shift and go to state 127
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    VOID            shift and go to state 33
    _BOOL           shift and go to state 34
    CHAR            shift and go to state 35
    SHORT           shift and go to state 36
    INT             shift and go to state 37
    LONG            shift and go to state 38
    FLOAT           shift and go to state 39
    DOUBLE          shift and go to state 40
    _COMPLEX        shift and go to state 41
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 43
    __INT128        shift and go to state 44
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47
    AUTO            shift and go to state 48
    REGISTER        shift and go to state 49
    STATIC          shift and go to state 25
    EXTERN          shift and go to state 50
    TYPEDEF         shift and go to state 51
    INLINE          shift and go to state 52
    STRUCT          shift and go to state 53
    UNION           shift and go to state 54

    parameter_type_list            shift and go to state 219
    identifier_list_opt            shift and go to state 220
    parameter_list                 shift and go to state 121
    empty                          shift and go to state 122
    identifier_list                shift and go to state 123
    parameter_declaration          shift and go to state 124
    identifier                     shift and go to state 125
    declaration_specifiers         shift and go to state 126
    type_qualifier                 shift and go to state 17
    storage_class_specifier        shift and go to state 18
    function_specifier             shift and go to state 19
    type_specifier_no_typeid       shift and go to state 20
    type_specifier                 shift and go to state 21
    declaration_specifiers_no_type shift and go to state 128
    typedef_name                   shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union_specifier      shift and go to state 29
    struct_or_union                shift and go to state 32

state 116

    (31) direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt . assignment_expression_opt RBRACKET
    (34) direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt . TIMES RBRACKET
    (3) assignment_expression_opt -> . empty
    (4) assignment_expression_opt -> . assignment_expression
    (309) empty -> .
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    TIMES           shift and go to state 222
    RBRACKET        reduce using rule 309 (empty -> .)
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    assignment_expression_opt      shift and go to state 221
    empty                          shift and go to state 223
    assignment_expression          shift and go to state 224
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 117

    (32) direct_id_declarator -> direct_id_declarator LBRACKET STATIC . type_qualifier_list_opt assignment_expression RBRACKET
    (27) type_qualifier_list_opt -> . empty
    (28) type_qualifier_list_opt -> . type_qualifier_list
    (309) empty -> .
    (166) type_qualifier_list -> . type_qualifier
    (167) type_qualifier_list -> . type_qualifier_list type_qualifier
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE

    PLUSPLUS        reduce using rule 309 (empty -> .)
    MINUSMINUS      reduce using rule 309 (empty -> .)
    SIZEOF          reduce using rule 309 (empty -> .)
    LPAREN          reduce using rule 309 (empty -> .)
    AND             reduce using rule 309 (empty -> .)
    TIMES           reduce using rule 309 (empty -> .)
    PLUS            reduce using rule 309 (empty -> .)
    MINUS           reduce using rule 309 (empty -> .)
    NOT             reduce using rule 309 (empty -> .)
    LNOT            reduce using rule 309 (empty -> .)
    OFFSETOF        reduce using rule 309 (empty -> .)
    ID              reduce using rule 309 (empty -> .)
    INT_CONST_DEC   reduce using rule 309 (empty -> .)
    INT_CONST_OCT   reduce using rule 309 (empty -> .)
    INT_CONST_HEX   reduce using rule 309 (empty -> .)
    INT_CONST_BIN   reduce using rule 309 (empty -> .)
    FLOAT_CONST     reduce using rule 309 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 309 (empty -> .)
    CHAR_CONST      reduce using rule 309 (empty -> .)
    WCHAR_CONST     reduce using rule 309 (empty -> .)
    STRING_LITERAL  reduce using rule 309 (empty -> .)
    WSTRING_LITERAL reduce using rule 309 (empty -> .)
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47

    type_qualifier_list_opt        shift and go to state 225
    empty                          shift and go to state 95
    type_qualifier_list            shift and go to state 96
    type_qualifier                 shift and go to state 97

state 118

    (33) direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list . STATIC assignment_expression RBRACKET
    (28) type_qualifier_list_opt -> type_qualifier_list .
    (167) type_qualifier_list -> type_qualifier_list . type_qualifier
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE

    STATIC          shift and go to state 226
    TIMES           reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    PLUSPLUS        reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    MINUSMINUS      reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    SIZEOF          reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    LPAREN          reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    AND             reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    PLUS            reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    MINUS           reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    NOT             reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    LNOT            reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    OFFSETOF        reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    ID              reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_DEC   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_OCT   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_HEX   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_BIN   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    FLOAT_CONST     reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    HEX_FLOAT_CONST reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    CHAR_CONST      reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    WCHAR_CONST     reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    STRING_LITERAL  reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    WSTRING_LITERAL reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    RBRACKET        reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47

    type_qualifier                 shift and go to state 133

state 119

    (35) direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 227


state 120

    (36) direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt . RPAREN

    RPAREN          shift and go to state 228


state 121

    (168) parameter_type_list -> parameter_list .
    (169) parameter_type_list -> parameter_list . COMMA ELLIPSIS
    (171) parameter_list -> parameter_list . COMMA parameter_declaration

    RPAREN          reduce using rule 168 (parameter_type_list -> parameter_list .)
    COMMA           shift and go to state 229


state 122

    (17) identifier_list_opt -> empty .

    RPAREN          reduce using rule 17 (identifier_list_opt -> empty .)


state 123

    (18) identifier_list_opt -> identifier_list .
    (176) identifier_list -> identifier_list . COMMA identifier

    RPAREN          reduce using rule 18 (identifier_list_opt -> identifier_list .)
    COMMA           shift and go to state 230


state 124

    (170) parameter_list -> parameter_declaration .

    COMMA           reduce using rule 170 (parameter_list -> parameter_declaration .)
    RPAREN          reduce using rule 170 (parameter_list -> parameter_declaration .)


state 125

    (175) identifier_list -> identifier .

    COMMA           reduce using rule 175 (identifier_list -> identifier .)
    RPAREN          reduce using rule 175 (identifier_list -> identifier .)


state 126

    (172) parameter_declaration -> declaration_specifiers . id_declarator
    (173) parameter_declaration -> declaration_specifiers . typeid_noparen_declarator
    (174) parameter_declaration -> declaration_specifiers . abstract_declarator_opt
    (89) declaration_specifiers -> declaration_specifiers . type_qualifier
    (90) declaration_specifiers -> declaration_specifiers . storage_class_specifier
    (91) declaration_specifiers -> declaration_specifiers . function_specifier
    (92) declaration_specifiers -> declaration_specifiers . type_specifier_no_typeid
    (52) id_declarator -> . direct_id_declarator
    (53) id_declarator -> . pointer direct_id_declarator
    (56) typeid_noparen_declarator -> . direct_typeid_noparen_declarator
    (57) typeid_noparen_declarator -> . pointer direct_typeid_noparen_declarator
    (1) abstract_declarator_opt -> . empty
    (2) abstract_declarator_opt -> . abstract_declarator
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE
    (95) storage_class_specifier -> . AUTO
    (96) storage_class_specifier -> . REGISTER
    (97) storage_class_specifier -> . STATIC
    (98) storage_class_specifier -> . EXTERN
    (99) storage_class_specifier -> . TYPEDEF
    (100) function_specifier -> . INLINE
    (101) type_specifier_no_typeid -> . VOID
    (102) type_specifier_no_typeid -> . _BOOL
    (103) type_specifier_no_typeid -> . CHAR
    (104) type_specifier_no_typeid -> . SHORT
    (105) type_specifier_no_typeid -> . INT
    (106) type_specifier_no_typeid -> . LONG
    (107) type_specifier_no_typeid -> . FLOAT
    (108) type_specifier_no_typeid -> . DOUBLE
    (109) type_specifier_no_typeid -> . _COMPLEX
    (110) type_specifier_no_typeid -> . SIGNED
    (111) type_specifier_no_typeid -> . UNSIGNED
    (112) type_specifier_no_typeid -> . __INT128
    (29) direct_id_declarator -> . ID
    (30) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (31) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (35) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (36) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (164) pointer -> . TIMES type_qualifier_list_opt
    (165) pointer -> . TIMES type_qualifier_list_opt pointer
    (45) direct_typeid_noparen_declarator -> . TYPEID
    (46) direct_typeid_noparen_declarator -> . direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (47) direct_typeid_noparen_declarator -> . direct_typeid_noparen_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (48) direct_typeid_noparen_declarator -> . direct_typeid_noparen_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (49) direct_typeid_noparen_declarator -> . direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (50) direct_typeid_noparen_declarator -> . direct_typeid_noparen_declarator LPAREN parameter_type_list RPAREN
    (51) direct_typeid_noparen_declarator -> . direct_typeid_noparen_declarator LPAREN identifier_list_opt RPAREN
    (309) empty -> .
    (188) abstract_declarator -> . pointer
    (189) abstract_declarator -> . pointer direct_abstract_declarator
    (190) abstract_declarator -> . direct_abstract_declarator
    (191) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (192) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (193) direct_abstract_declarator -> . LBRACKET assignment_expression_opt RBRACKET
    (194) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (195) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (196) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (197) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN

    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47
    AUTO            shift and go to state 48
    REGISTER        shift and go to state 49
    STATIC          shift and go to state 25
    EXTERN          shift and go to state 50
    TYPEDEF         shift and go to state 51
    INLINE          shift and go to state 52
    VOID            shift and go to state 33
    _BOOL           shift and go to state 34
    CHAR            shift and go to state 35
    SHORT           shift and go to state 36
    INT             shift and go to state 37
    LONG            shift and go to state 38
    FLOAT           shift and go to state 39
    DOUBLE          shift and go to state 40
    _COMPLEX        shift and go to state 41
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 43
    __INT128        shift and go to state 44
    ID              shift and go to state 23
    LPAREN          shift and go to state 238
    TIMES           shift and go to state 26
    TYPEID          shift and go to state 240
    COMMA           reduce using rule 309 (empty -> .)
    RPAREN          reduce using rule 309 (empty -> .)
    LBRACKET        shift and go to state 239

    id_declarator                  shift and go to state 231
    typeid_noparen_declarator      shift and go to state 232
    abstract_declarator_opt        shift and go to state 233
    type_qualifier                 shift and go to state 63
    storage_class_specifier        shift and go to state 64
    function_specifier             shift and go to state 65
    type_specifier_no_typeid       shift and go to state 66
    direct_id_declarator           shift and go to state 15
    pointer                        shift and go to state 234
    direct_typeid_noparen_declarator shift and go to state 235
    empty                          shift and go to state 236
    abstract_declarator            shift and go to state 237
    direct_abstract_declarator     shift and go to state 241

state 127

    (294) identifier -> ID .

    COMMA           reduce using rule 294 (identifier -> ID .)
    RPAREN          reduce using rule 294 (identifier -> ID .)
    LBRACKET        reduce using rule 294 (identifier -> ID .)
    LPAREN          reduce using rule 294 (identifier -> ID .)
    PERIOD          reduce using rule 294 (identifier -> ID .)
    ARROW           reduce using rule 294 (identifier -> ID .)
    PLUSPLUS        reduce using rule 294 (identifier -> ID .)
    MINUSMINUS      reduce using rule 294 (identifier -> ID .)
    EQUALS          reduce using rule 294 (identifier -> ID .)
    XOREQUAL        reduce using rule 294 (identifier -> ID .)
    TIMESEQUAL      reduce using rule 294 (identifier -> ID .)
    DIVEQUAL        reduce using rule 294 (identifier -> ID .)
    MODEQUAL        reduce using rule 294 (identifier -> ID .)
    PLUSEQUAL       reduce using rule 294 (identifier -> ID .)
    MINUSEQUAL      reduce using rule 294 (identifier -> ID .)
    LSHIFTEQUAL     reduce using rule 294 (identifier -> ID .)
    RSHIFTEQUAL     reduce using rule 294 (identifier -> ID .)
    ANDEQUAL        reduce using rule 294 (identifier -> ID .)
    OREQUAL         reduce using rule 294 (identifier -> ID .)
    CONDOP          reduce using rule 294 (identifier -> ID .)
    TIMES           reduce using rule 294 (identifier -> ID .)
    DIVIDE          reduce using rule 294 (identifier -> ID .)
    MOD             reduce using rule 294 (identifier -> ID .)
    PLUS            reduce using rule 294 (identifier -> ID .)
    MINUS           reduce using rule 294 (identifier -> ID .)
    RSHIFT          reduce using rule 294 (identifier -> ID .)
    LSHIFT          reduce using rule 294 (identifier -> ID .)
    LT              reduce using rule 294 (identifier -> ID .)
    LE              reduce using rule 294 (identifier -> ID .)
    GE              reduce using rule 294 (identifier -> ID .)
    GT              reduce using rule 294 (identifier -> ID .)
    EQ              reduce using rule 294 (identifier -> ID .)
    NE              reduce using rule 294 (identifier -> ID .)
    AND             reduce using rule 294 (identifier -> ID .)
    OR              reduce using rule 294 (identifier -> ID .)
    XOR             reduce using rule 294 (identifier -> ID .)
    LAND            reduce using rule 294 (identifier -> ID .)
    LOR             reduce using rule 294 (identifier -> ID .)
    SEMI            reduce using rule 294 (identifier -> ID .)
    RBRACKET        reduce using rule 294 (identifier -> ID .)
    COLON           reduce using rule 294 (identifier -> ID .)
    RBRACE          reduce using rule 294 (identifier -> ID .)


state 128

    (94) declaration_specifiers -> declaration_specifiers_no_type . type_specifier
    (113) type_specifier -> . typedef_name
    (114) type_specifier -> . enum_specifier
    (115) type_specifier -> . struct_or_union_specifier
    (116) type_specifier -> . type_specifier_no_typeid
    (221) typedef_name -> . TYPEID
    (152) enum_specifier -> . ENUM ID
    (153) enum_specifier -> . ENUM TYPEID
    (154) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (155) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (156) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (132) struct_or_union_specifier -> . struct_or_union ID
    (133) struct_or_union_specifier -> . struct_or_union TYPEID
    (134) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (135) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (136) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (137) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (138) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (139) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (101) type_specifier_no_typeid -> . VOID
    (102) type_specifier_no_typeid -> . _BOOL
    (103) type_specifier_no_typeid -> . CHAR
    (104) type_specifier_no_typeid -> . SHORT
    (105) type_specifier_no_typeid -> . INT
    (106) type_specifier_no_typeid -> . LONG
    (107) type_specifier_no_typeid -> . FLOAT
    (108) type_specifier_no_typeid -> . DOUBLE
    (109) type_specifier_no_typeid -> . _COMPLEX
    (110) type_specifier_no_typeid -> . SIGNED
    (111) type_specifier_no_typeid -> . UNSIGNED
    (112) type_specifier_no_typeid -> . __INT128
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    VOID            shift and go to state 33
    _BOOL           shift and go to state 34
    CHAR            shift and go to state 35
    SHORT           shift and go to state 36
    INT             shift and go to state 37
    LONG            shift and go to state 38
    FLOAT           shift and go to state 39
    DOUBLE          shift and go to state 40
    _COMPLEX        shift and go to state 41
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 43
    __INT128        shift and go to state 44
    STRUCT          shift and go to state 53
    UNION           shift and go to state 54

    type_specifier                 shift and go to state 87
    typedef_name                   shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union_specifier      shift and go to state 29
    type_specifier_no_typeid       shift and go to state 20
    struct_or_union                shift and go to state 32

state 129

    (125) id_init_declarator_list -> id_init_declarator_list COMMA . init_declarator
    (122) init_declarator -> . declarator
    (123) init_declarator -> . declarator EQUALS initializer
    (162) declarator -> . id_declarator
    (163) declarator -> . typeid_declarator
    (52) id_declarator -> . direct_id_declarator
    (53) id_declarator -> . pointer direct_id_declarator
    (54) typeid_declarator -> . direct_typeid_declarator
    (55) typeid_declarator -> . pointer direct_typeid_declarator
    (29) direct_id_declarator -> . ID
    (30) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (31) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (35) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (36) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (164) pointer -> . TIMES type_qualifier_list_opt
    (165) pointer -> . TIMES type_qualifier_list_opt pointer
    (37) direct_typeid_declarator -> . TYPEID
    (38) direct_typeid_declarator -> . LPAREN typeid_declarator RPAREN
    (39) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (40) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (41) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (42) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (43) direct_typeid_declarator -> . direct_typeid_declarator LPAREN parameter_type_list RPAREN
    (44) direct_typeid_declarator -> . direct_typeid_declarator LPAREN identifier_list_opt RPAREN

    ID              shift and go to state 23
    LPAREN          shift and go to state 71
    TIMES           shift and go to state 26
    TYPEID          shift and go to state 76

    init_declarator                shift and go to state 242
    declarator                     shift and go to state 73
    id_declarator                  shift and go to state 108
    typeid_declarator              shift and go to state 74
    direct_id_declarator           shift and go to state 15
    pointer                        shift and go to state 68
    direct_typeid_declarator       shift and go to state 75

state 130

    (127) id_init_declarator -> id_declarator EQUALS . initializer
    (177) initializer -> . assignment_expression
    (178) initializer -> . brace_open initializer_list_opt brace_close
    (179) initializer -> . brace_open initializer_list COMMA brace_close
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (307) brace_open -> . LBRACE
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LBRACE          shift and go to state 101
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    initializer                    shift and go to state 243
    assignment_expression          shift and go to state 214
    brace_open                     shift and go to state 215
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 131

    (30) direct_id_declarator -> LPAREN id_declarator RPAREN .

    LBRACKET        reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    LPAREN          reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    CONST           reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    RESTRICT        reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    VOLATILE        reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    AUTO            reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    REGISTER        reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    STATIC          reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    EXTERN          reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    TYPEDEF         reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    INLINE          reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    TYPEID          reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    ENUM            reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    VOID            reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    _BOOL           reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    CHAR            reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    SHORT           reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    INT             reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    LONG            reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    FLOAT           reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    DOUBLE          reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    _COMPLEX        reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    SIGNED          reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    UNSIGNED        reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    __INT128        reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    STRUCT          reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    UNION           reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    LBRACE          reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    EQUALS          reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    COMMA           reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    SEMI            reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    RPAREN          reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)
    COLON           reduce using rule 30 (direct_id_declarator -> LPAREN id_declarator RPAREN .)


state 132

    (165) pointer -> TIMES type_qualifier_list_opt pointer .

    ID              reduce using rule 165 (pointer -> TIMES type_qualifier_list_opt pointer .)
    LPAREN          reduce using rule 165 (pointer -> TIMES type_qualifier_list_opt pointer .)
    TYPEID          reduce using rule 165 (pointer -> TIMES type_qualifier_list_opt pointer .)
    LBRACKET        reduce using rule 165 (pointer -> TIMES type_qualifier_list_opt pointer .)
    COMMA           reduce using rule 165 (pointer -> TIMES type_qualifier_list_opt pointer .)
    RPAREN          reduce using rule 165 (pointer -> TIMES type_qualifier_list_opt pointer .)


state 133

    (167) type_qualifier_list -> type_qualifier_list type_qualifier .

    CONST           reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    RESTRICT        reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    VOLATILE        reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    TIMES           reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    ID              reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LPAREN          reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    TYPEID          reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LBRACKET        reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    COMMA           reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    RPAREN          reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    STATIC          reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    PLUSPLUS        reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    MINUSMINUS      reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    SIZEOF          reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    AND             reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    PLUS            reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    MINUS           reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    NOT             reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LNOT            reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    OFFSETOF        reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    INT_CONST_DEC   reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    INT_CONST_OCT   reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    INT_CONST_HEX   reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    INT_CONST_BIN   reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    FLOAT_CONST     reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    HEX_FLOAT_CONST reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    CHAR_CONST      reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    WCHAR_CONST     reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    STRING_LITERAL  reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    WSTRING_LITERAL reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    RBRACKET        reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    ENUM            reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    VOID            reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    _BOOL           reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    CHAR            reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    SHORT           reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    INT             reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LONG            reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    FLOAT           reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    DOUBLE          reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    _COMPLEX        reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    SIGNED          reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    UNSIGNED        reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    __INT128        reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    STRUCT          reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    UNION           reduce using rule 167 (type_qualifier_list -> type_qualifier_list type_qualifier .)


state 134

    (155) enum_specifier -> ENUM ID brace_open . enumerator_list brace_close
    (157) enumerator_list -> . enumerator
    (158) enumerator_list -> . enumerator_list COMMA
    (159) enumerator_list -> . enumerator_list COMMA enumerator
    (160) enumerator -> . ID
    (161) enumerator -> . ID EQUALS constant_expression

    ID              shift and go to state 138

    enumerator_list                shift and go to state 244
    enumerator                     shift and go to state 137

state 135

    (156) enum_specifier -> ENUM TYPEID brace_open . enumerator_list brace_close
    (157) enumerator_list -> . enumerator
    (158) enumerator_list -> . enumerator_list COMMA
    (159) enumerator_list -> . enumerator_list COMMA enumerator
    (160) enumerator -> . ID
    (161) enumerator -> . ID EQUALS constant_expression

    ID              shift and go to state 138

    enumerator_list                shift and go to state 245
    enumerator                     shift and go to state 137

state 136

    (154) enum_specifier -> ENUM brace_open enumerator_list . brace_close
    (158) enumerator_list -> enumerator_list . COMMA
    (159) enumerator_list -> enumerator_list . COMMA enumerator
    (308) brace_close -> . RBRACE

    COMMA           shift and go to state 247
    RBRACE          shift and go to state 144

    brace_close                    shift and go to state 246

state 137

    (157) enumerator_list -> enumerator .

    COMMA           reduce using rule 157 (enumerator_list -> enumerator .)
    RBRACE          reduce using rule 157 (enumerator_list -> enumerator .)


state 138

    (160) enumerator -> ID .
    (161) enumerator -> ID . EQUALS constant_expression

    COMMA           reduce using rule 160 (enumerator -> ID .)
    RBRACE          reduce using rule 160 (enumerator -> ID .)
    EQUALS          shift and go to state 248


state 139

    (136) struct_or_union_specifier -> struct_or_union ID brace_open . struct_declaration_list brace_close
    (137) struct_or_union_specifier -> struct_or_union ID brace_open . brace_close
    (142) struct_declaration_list -> . struct_declaration
    (143) struct_declaration_list -> . struct_declaration_list struct_declaration
    (308) brace_close -> . RBRACE
    (144) struct_declaration -> . specifier_qualifier_list struct_declarator_list_opt SEMI
    (145) struct_declaration -> . SEMI
    (146) struct_declaration -> . pppragma_directive
    (128) specifier_qualifier_list -> . specifier_qualifier_list type_specifier_no_typeid
    (129) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (130) specifier_qualifier_list -> . type_specifier
    (131) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (68) pppragma_directive -> . PPPRAGMA
    (69) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (113) type_specifier -> . typedef_name
    (114) type_specifier -> . enum_specifier
    (115) type_specifier -> . struct_or_union_specifier
    (116) type_specifier -> . type_specifier_no_typeid
    (166) type_qualifier_list -> . type_qualifier
    (167) type_qualifier_list -> . type_qualifier_list type_qualifier
    (221) typedef_name -> . TYPEID
    (152) enum_specifier -> . ENUM ID
    (153) enum_specifier -> . ENUM TYPEID
    (154) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (155) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (156) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (132) struct_or_union_specifier -> . struct_or_union ID
    (133) struct_or_union_specifier -> . struct_or_union TYPEID
    (134) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (135) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (136) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (137) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (138) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (139) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (101) type_specifier_no_typeid -> . VOID
    (102) type_specifier_no_typeid -> . _BOOL
    (103) type_specifier_no_typeid -> . CHAR
    (104) type_specifier_no_typeid -> . SHORT
    (105) type_specifier_no_typeid -> . INT
    (106) type_specifier_no_typeid -> . LONG
    (107) type_specifier_no_typeid -> . FLOAT
    (108) type_specifier_no_typeid -> . DOUBLE
    (109) type_specifier_no_typeid -> . _COMPLEX
    (110) type_specifier_no_typeid -> . SIGNED
    (111) type_specifier_no_typeid -> . UNSIGNED
    (112) type_specifier_no_typeid -> . __INT128
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

    RBRACE          shift and go to state 144
    SEMI            shift and go to state 146
    PPPRAGMA        shift and go to state 14
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    VOID            shift and go to state 33
    _BOOL           shift and go to state 34
    CHAR            shift and go to state 35
    SHORT           shift and go to state 36
    INT             shift and go to state 37
    LONG            shift and go to state 38
    FLOAT           shift and go to state 39
    DOUBLE          shift and go to state 40
    _COMPLEX        shift and go to state 41
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 43
    __INT128        shift and go to state 44
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47
    STRUCT          shift and go to state 53
    UNION           shift and go to state 54

    struct_or_union                shift and go to state 32
    struct_declaration_list        shift and go to state 249
    brace_close                    shift and go to state 250
    struct_declaration             shift and go to state 143
    specifier_qualifier_list       shift and go to state 145
    pppragma_directive             shift and go to state 147
    type_specifier_no_typeid       shift and go to state 20
    type_qualifier                 shift and go to state 97
    type_specifier                 shift and go to state 148
    type_qualifier_list            shift and go to state 149
    typedef_name                   shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union_specifier      shift and go to state 29

state 140

    (138) struct_or_union_specifier -> struct_or_union TYPEID brace_open . struct_declaration_list brace_close
    (139) struct_or_union_specifier -> struct_or_union TYPEID brace_open . brace_close
    (142) struct_declaration_list -> . struct_declaration
    (143) struct_declaration_list -> . struct_declaration_list struct_declaration
    (308) brace_close -> . RBRACE
    (144) struct_declaration -> . specifier_qualifier_list struct_declarator_list_opt SEMI
    (145) struct_declaration -> . SEMI
    (146) struct_declaration -> . pppragma_directive
    (128) specifier_qualifier_list -> . specifier_qualifier_list type_specifier_no_typeid
    (129) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (130) specifier_qualifier_list -> . type_specifier
    (131) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (68) pppragma_directive -> . PPPRAGMA
    (69) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (113) type_specifier -> . typedef_name
    (114) type_specifier -> . enum_specifier
    (115) type_specifier -> . struct_or_union_specifier
    (116) type_specifier -> . type_specifier_no_typeid
    (166) type_qualifier_list -> . type_qualifier
    (167) type_qualifier_list -> . type_qualifier_list type_qualifier
    (221) typedef_name -> . TYPEID
    (152) enum_specifier -> . ENUM ID
    (153) enum_specifier -> . ENUM TYPEID
    (154) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (155) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (156) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (132) struct_or_union_specifier -> . struct_or_union ID
    (133) struct_or_union_specifier -> . struct_or_union TYPEID
    (134) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (135) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (136) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (137) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (138) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (139) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (101) type_specifier_no_typeid -> . VOID
    (102) type_specifier_no_typeid -> . _BOOL
    (103) type_specifier_no_typeid -> . CHAR
    (104) type_specifier_no_typeid -> . SHORT
    (105) type_specifier_no_typeid -> . INT
    (106) type_specifier_no_typeid -> . LONG
    (107) type_specifier_no_typeid -> . FLOAT
    (108) type_specifier_no_typeid -> . DOUBLE
    (109) type_specifier_no_typeid -> . _COMPLEX
    (110) type_specifier_no_typeid -> . SIGNED
    (111) type_specifier_no_typeid -> . UNSIGNED
    (112) type_specifier_no_typeid -> . __INT128
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

    RBRACE          shift and go to state 144
    SEMI            shift and go to state 146
    PPPRAGMA        shift and go to state 14
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    VOID            shift and go to state 33
    _BOOL           shift and go to state 34
    CHAR            shift and go to state 35
    SHORT           shift and go to state 36
    INT             shift and go to state 37
    LONG            shift and go to state 38
    FLOAT           shift and go to state 39
    DOUBLE          shift and go to state 40
    _COMPLEX        shift and go to state 41
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 43
    __INT128        shift and go to state 44
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47
    STRUCT          shift and go to state 53
    UNION           shift and go to state 54

    struct_or_union                shift and go to state 32
    struct_declaration_list        shift and go to state 251
    brace_close                    shift and go to state 252
    struct_declaration             shift and go to state 143
    specifier_qualifier_list       shift and go to state 145
    pppragma_directive             shift and go to state 147
    type_specifier_no_typeid       shift and go to state 20
    type_qualifier                 shift and go to state 97
    type_specifier                 shift and go to state 148
    type_qualifier_list            shift and go to state 149
    typedef_name                   shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union_specifier      shift and go to state 29

state 141

    (134) struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list . brace_close
    (143) struct_declaration_list -> struct_declaration_list . struct_declaration
    (308) brace_close -> . RBRACE
    (144) struct_declaration -> . specifier_qualifier_list struct_declarator_list_opt SEMI
    (145) struct_declaration -> . SEMI
    (146) struct_declaration -> . pppragma_directive
    (128) specifier_qualifier_list -> . specifier_qualifier_list type_specifier_no_typeid
    (129) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (130) specifier_qualifier_list -> . type_specifier
    (131) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (68) pppragma_directive -> . PPPRAGMA
    (69) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (113) type_specifier -> . typedef_name
    (114) type_specifier -> . enum_specifier
    (115) type_specifier -> . struct_or_union_specifier
    (116) type_specifier -> . type_specifier_no_typeid
    (166) type_qualifier_list -> . type_qualifier
    (167) type_qualifier_list -> . type_qualifier_list type_qualifier
    (221) typedef_name -> . TYPEID
    (152) enum_specifier -> . ENUM ID
    (153) enum_specifier -> . ENUM TYPEID
    (154) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (155) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (156) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (132) struct_or_union_specifier -> . struct_or_union ID
    (133) struct_or_union_specifier -> . struct_or_union TYPEID
    (134) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (135) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (136) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (137) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (138) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (139) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (101) type_specifier_no_typeid -> . VOID
    (102) type_specifier_no_typeid -> . _BOOL
    (103) type_specifier_no_typeid -> . CHAR
    (104) type_specifier_no_typeid -> . SHORT
    (105) type_specifier_no_typeid -> . INT
    (106) type_specifier_no_typeid -> . LONG
    (107) type_specifier_no_typeid -> . FLOAT
    (108) type_specifier_no_typeid -> . DOUBLE
    (109) type_specifier_no_typeid -> . _COMPLEX
    (110) type_specifier_no_typeid -> . SIGNED
    (111) type_specifier_no_typeid -> . UNSIGNED
    (112) type_specifier_no_typeid -> . __INT128
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

    RBRACE          shift and go to state 144
    SEMI            shift and go to state 146
    PPPRAGMA        shift and go to state 14
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    VOID            shift and go to state 33
    _BOOL           shift and go to state 34
    CHAR            shift and go to state 35
    SHORT           shift and go to state 36
    INT             shift and go to state 37
    LONG            shift and go to state 38
    FLOAT           shift and go to state 39
    DOUBLE          shift and go to state 40
    _COMPLEX        shift and go to state 41
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 43
    __INT128        shift and go to state 44
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47
    STRUCT          shift and go to state 53
    UNION           shift and go to state 54

    struct_or_union                shift and go to state 32
    brace_close                    shift and go to state 253
    struct_declaration             shift and go to state 254
    specifier_qualifier_list       shift and go to state 145
    pppragma_directive             shift and go to state 147
    type_specifier_no_typeid       shift and go to state 20
    type_qualifier                 shift and go to state 97
    type_specifier                 shift and go to state 148
    type_qualifier_list            shift and go to state 149
    typedef_name                   shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union_specifier      shift and go to state 29

state 142

    (135) struct_or_union_specifier -> struct_or_union brace_open brace_close .

    CONST           reduce using rule 135 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    RESTRICT        reduce using rule 135 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    VOLATILE        reduce using rule 135 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    AUTO            reduce using rule 135 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    REGISTER        reduce using rule 135 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    STATIC          reduce using rule 135 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    EXTERN          reduce using rule 135 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    TYPEDEF         reduce using rule 135 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    INLINE          reduce using rule 135 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    VOID            reduce using rule 135 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    _BOOL           reduce using rule 135 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    CHAR            reduce using rule 135 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    SHORT           reduce using rule 135 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    INT             reduce using rule 135 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    LONG            reduce using rule 135 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    FLOAT           reduce using rule 135 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    DOUBLE          reduce using rule 135 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    _COMPLEX        reduce using rule 135 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    SIGNED          reduce using rule 135 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    UNSIGNED        reduce using rule 135 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    __INT128        reduce using rule 135 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    ID              reduce using rule 135 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    LPAREN          reduce using rule 135 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    TIMES           reduce using rule 135 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    TYPEID          reduce using rule 135 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    SEMI            reduce using rule 135 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    LBRACKET        reduce using rule 135 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    COMMA           reduce using rule 135 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    RPAREN          reduce using rule 135 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)
    COLON           reduce using rule 135 (struct_or_union_specifier -> struct_or_union brace_open brace_close .)


state 143

    (142) struct_declaration_list -> struct_declaration .

    RBRACE          reduce using rule 142 (struct_declaration_list -> struct_declaration .)
    SEMI            reduce using rule 142 (struct_declaration_list -> struct_declaration .)
    PPPRAGMA        reduce using rule 142 (struct_declaration_list -> struct_declaration .)
    TYPEID          reduce using rule 142 (struct_declaration_list -> struct_declaration .)
    ENUM            reduce using rule 142 (struct_declaration_list -> struct_declaration .)
    VOID            reduce using rule 142 (struct_declaration_list -> struct_declaration .)
    _BOOL           reduce using rule 142 (struct_declaration_list -> struct_declaration .)
    CHAR            reduce using rule 142 (struct_declaration_list -> struct_declaration .)
    SHORT           reduce using rule 142 (struct_declaration_list -> struct_declaration .)
    INT             reduce using rule 142 (struct_declaration_list -> struct_declaration .)
    LONG            reduce using rule 142 (struct_declaration_list -> struct_declaration .)
    FLOAT           reduce using rule 142 (struct_declaration_list -> struct_declaration .)
    DOUBLE          reduce using rule 142 (struct_declaration_list -> struct_declaration .)
    _COMPLEX        reduce using rule 142 (struct_declaration_list -> struct_declaration .)
    SIGNED          reduce using rule 142 (struct_declaration_list -> struct_declaration .)
    UNSIGNED        reduce using rule 142 (struct_declaration_list -> struct_declaration .)
    __INT128        reduce using rule 142 (struct_declaration_list -> struct_declaration .)
    CONST           reduce using rule 142 (struct_declaration_list -> struct_declaration .)
    RESTRICT        reduce using rule 142 (struct_declaration_list -> struct_declaration .)
    VOLATILE        reduce using rule 142 (struct_declaration_list -> struct_declaration .)
    STRUCT          reduce using rule 142 (struct_declaration_list -> struct_declaration .)
    UNION           reduce using rule 142 (struct_declaration_list -> struct_declaration .)


state 144

    (308) brace_close -> RBRACE .

    CONST           reduce using rule 308 (brace_close -> RBRACE .)
    RESTRICT        reduce using rule 308 (brace_close -> RBRACE .)
    VOLATILE        reduce using rule 308 (brace_close -> RBRACE .)
    AUTO            reduce using rule 308 (brace_close -> RBRACE .)
    REGISTER        reduce using rule 308 (brace_close -> RBRACE .)
    STATIC          reduce using rule 308 (brace_close -> RBRACE .)
    EXTERN          reduce using rule 308 (brace_close -> RBRACE .)
    TYPEDEF         reduce using rule 308 (brace_close -> RBRACE .)
    INLINE          reduce using rule 308 (brace_close -> RBRACE .)
    VOID            reduce using rule 308 (brace_close -> RBRACE .)
    _BOOL           reduce using rule 308 (brace_close -> RBRACE .)
    CHAR            reduce using rule 308 (brace_close -> RBRACE .)
    SHORT           reduce using rule 308 (brace_close -> RBRACE .)
    INT             reduce using rule 308 (brace_close -> RBRACE .)
    LONG            reduce using rule 308 (brace_close -> RBRACE .)
    FLOAT           reduce using rule 308 (brace_close -> RBRACE .)
    DOUBLE          reduce using rule 308 (brace_close -> RBRACE .)
    _COMPLEX        reduce using rule 308 (brace_close -> RBRACE .)
    SIGNED          reduce using rule 308 (brace_close -> RBRACE .)
    UNSIGNED        reduce using rule 308 (brace_close -> RBRACE .)
    __INT128        reduce using rule 308 (brace_close -> RBRACE .)
    ID              reduce using rule 308 (brace_close -> RBRACE .)
    LPAREN          reduce using rule 308 (brace_close -> RBRACE .)
    TIMES           reduce using rule 308 (brace_close -> RBRACE .)
    TYPEID          reduce using rule 308 (brace_close -> RBRACE .)
    SEMI            reduce using rule 308 (brace_close -> RBRACE .)
    LBRACKET        reduce using rule 308 (brace_close -> RBRACE .)
    COMMA           reduce using rule 308 (brace_close -> RBRACE .)
    RPAREN          reduce using rule 308 (brace_close -> RBRACE .)
    COLON           reduce using rule 308 (brace_close -> RBRACE .)
    PPHASH          reduce using rule 308 (brace_close -> RBRACE .)
    PPPRAGMA        reduce using rule 308 (brace_close -> RBRACE .)
    ENUM            reduce using rule 308 (brace_close -> RBRACE .)
    STRUCT          reduce using rule 308 (brace_close -> RBRACE .)
    UNION           reduce using rule 308 (brace_close -> RBRACE .)
    $end            reduce using rule 308 (brace_close -> RBRACE .)
    CASE            reduce using rule 308 (brace_close -> RBRACE .)
    DEFAULT         reduce using rule 308 (brace_close -> RBRACE .)
    IF              reduce using rule 308 (brace_close -> RBRACE .)
    SWITCH          reduce using rule 308 (brace_close -> RBRACE .)
    WHILE           reduce using rule 308 (brace_close -> RBRACE .)
    DO              reduce using rule 308 (brace_close -> RBRACE .)
    FOR             reduce using rule 308 (brace_close -> RBRACE .)
    GOTO            reduce using rule 308 (brace_close -> RBRACE .)
    BREAK           reduce using rule 308 (brace_close -> RBRACE .)
    CONTINUE        reduce using rule 308 (brace_close -> RBRACE .)
    RETURN          reduce using rule 308 (brace_close -> RBRACE .)
    LBRACE          reduce using rule 308 (brace_close -> RBRACE .)
    PLUSPLUS        reduce using rule 308 (brace_close -> RBRACE .)
    MINUSMINUS      reduce using rule 308 (brace_close -> RBRACE .)
    SIZEOF          reduce using rule 308 (brace_close -> RBRACE .)
    AND             reduce using rule 308 (brace_close -> RBRACE .)
    PLUS            reduce using rule 308 (brace_close -> RBRACE .)
    MINUS           reduce using rule 308 (brace_close -> RBRACE .)
    NOT             reduce using rule 308 (brace_close -> RBRACE .)
    LNOT            reduce using rule 308 (brace_close -> RBRACE .)
    OFFSETOF        reduce using rule 308 (brace_close -> RBRACE .)
    INT_CONST_DEC   reduce using rule 308 (brace_close -> RBRACE .)
    INT_CONST_OCT   reduce using rule 308 (brace_close -> RBRACE .)
    INT_CONST_HEX   reduce using rule 308 (brace_close -> RBRACE .)
    INT_CONST_BIN   reduce using rule 308 (brace_close -> RBRACE .)
    FLOAT_CONST     reduce using rule 308 (brace_close -> RBRACE .)
    HEX_FLOAT_CONST reduce using rule 308 (brace_close -> RBRACE .)
    CHAR_CONST      reduce using rule 308 (brace_close -> RBRACE .)
    WCHAR_CONST     reduce using rule 308 (brace_close -> RBRACE .)
    STRING_LITERAL  reduce using rule 308 (brace_close -> RBRACE .)
    WSTRING_LITERAL reduce using rule 308 (brace_close -> RBRACE .)
    RBRACE          reduce using rule 308 (brace_close -> RBRACE .)
    ELSE            reduce using rule 308 (brace_close -> RBRACE .)
    PERIOD          reduce using rule 308 (brace_close -> RBRACE .)
    ARROW           reduce using rule 308 (brace_close -> RBRACE .)
    EQUALS          reduce using rule 308 (brace_close -> RBRACE .)
    XOREQUAL        reduce using rule 308 (brace_close -> RBRACE .)
    TIMESEQUAL      reduce using rule 308 (brace_close -> RBRACE .)
    DIVEQUAL        reduce using rule 308 (brace_close -> RBRACE .)
    MODEQUAL        reduce using rule 308 (brace_close -> RBRACE .)
    PLUSEQUAL       reduce using rule 308 (brace_close -> RBRACE .)
    MINUSEQUAL      reduce using rule 308 (brace_close -> RBRACE .)
    LSHIFTEQUAL     reduce using rule 308 (brace_close -> RBRACE .)
    RSHIFTEQUAL     reduce using rule 308 (brace_close -> RBRACE .)
    ANDEQUAL        reduce using rule 308 (brace_close -> RBRACE .)
    OREQUAL         reduce using rule 308 (brace_close -> RBRACE .)
    CONDOP          reduce using rule 308 (brace_close -> RBRACE .)
    DIVIDE          reduce using rule 308 (brace_close -> RBRACE .)
    MOD             reduce using rule 308 (brace_close -> RBRACE .)
    RSHIFT          reduce using rule 308 (brace_close -> RBRACE .)
    LSHIFT          reduce using rule 308 (brace_close -> RBRACE .)
    LT              reduce using rule 308 (brace_close -> RBRACE .)
    LE              reduce using rule 308 (brace_close -> RBRACE .)
    GE              reduce using rule 308 (brace_close -> RBRACE .)
    GT              reduce using rule 308 (brace_close -> RBRACE .)
    EQ              reduce using rule 308 (brace_close -> RBRACE .)
    NE              reduce using rule 308 (brace_close -> RBRACE .)
    OR              reduce using rule 308 (brace_close -> RBRACE .)
    XOR             reduce using rule 308 (brace_close -> RBRACE .)
    LAND            reduce using rule 308 (brace_close -> RBRACE .)
    LOR             reduce using rule 308 (brace_close -> RBRACE .)
    RBRACKET        reduce using rule 308 (brace_close -> RBRACE .)


state 145

    (144) struct_declaration -> specifier_qualifier_list . struct_declarator_list_opt SEMI
    (128) specifier_qualifier_list -> specifier_qualifier_list . type_specifier_no_typeid
    (129) specifier_qualifier_list -> specifier_qualifier_list . type_qualifier
    (25) struct_declarator_list_opt -> . empty
    (26) struct_declarator_list_opt -> . struct_declarator_list
    (101) type_specifier_no_typeid -> . VOID
    (102) type_specifier_no_typeid -> . _BOOL
    (103) type_specifier_no_typeid -> . CHAR
    (104) type_specifier_no_typeid -> . SHORT
    (105) type_specifier_no_typeid -> . INT
    (106) type_specifier_no_typeid -> . LONG
    (107) type_specifier_no_typeid -> . FLOAT
    (108) type_specifier_no_typeid -> . DOUBLE
    (109) type_specifier_no_typeid -> . _COMPLEX
    (110) type_specifier_no_typeid -> . SIGNED
    (111) type_specifier_no_typeid -> . UNSIGNED
    (112) type_specifier_no_typeid -> . __INT128
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE
    (309) empty -> .
    (147) struct_declarator_list -> . struct_declarator
    (148) struct_declarator_list -> . struct_declarator_list COMMA struct_declarator
    (149) struct_declarator -> . declarator
    (150) struct_declarator -> . declarator COLON constant_expression
    (151) struct_declarator -> . COLON constant_expression
    (162) declarator -> . id_declarator
    (163) declarator -> . typeid_declarator
    (52) id_declarator -> . direct_id_declarator
    (53) id_declarator -> . pointer direct_id_declarator
    (54) typeid_declarator -> . direct_typeid_declarator
    (55) typeid_declarator -> . pointer direct_typeid_declarator
    (29) direct_id_declarator -> . ID
    (30) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (31) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (35) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (36) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (164) pointer -> . TIMES type_qualifier_list_opt
    (165) pointer -> . TIMES type_qualifier_list_opt pointer
    (37) direct_typeid_declarator -> . TYPEID
    (38) direct_typeid_declarator -> . LPAREN typeid_declarator RPAREN
    (39) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (40) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (41) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (42) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (43) direct_typeid_declarator -> . direct_typeid_declarator LPAREN parameter_type_list RPAREN
    (44) direct_typeid_declarator -> . direct_typeid_declarator LPAREN identifier_list_opt RPAREN

    VOID            shift and go to state 33
    _BOOL           shift and go to state 34
    CHAR            shift and go to state 35
    SHORT           shift and go to state 36
    INT             shift and go to state 37
    LONG            shift and go to state 38
    FLOAT           shift and go to state 39
    DOUBLE          shift and go to state 40
    _COMPLEX        shift and go to state 41
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 43
    __INT128        shift and go to state 44
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47
    SEMI            reduce using rule 309 (empty -> .)
    COLON           shift and go to state 262
    ID              shift and go to state 23
    LPAREN          shift and go to state 71
    TIMES           shift and go to state 26
    TYPEID          shift and go to state 76

    struct_declarator_list_opt     shift and go to state 255
    type_specifier_no_typeid       shift and go to state 256
    type_qualifier                 shift and go to state 257
    empty                          shift and go to state 258
    struct_declarator_list         shift and go to state 259
    struct_declarator              shift and go to state 260
    declarator                     shift and go to state 261
    id_declarator                  shift and go to state 108
    typeid_declarator              shift and go to state 74
    direct_id_declarator           shift and go to state 15
    pointer                        shift and go to state 68
    direct_typeid_declarator       shift and go to state 75

state 146

    (145) struct_declaration -> SEMI .

    RBRACE          reduce using rule 145 (struct_declaration -> SEMI .)
    SEMI            reduce using rule 145 (struct_declaration -> SEMI .)
    PPPRAGMA        reduce using rule 145 (struct_declaration -> SEMI .)
    TYPEID          reduce using rule 145 (struct_declaration -> SEMI .)
    ENUM            reduce using rule 145 (struct_declaration -> SEMI .)
    VOID            reduce using rule 145 (struct_declaration -> SEMI .)
    _BOOL           reduce using rule 145 (struct_declaration -> SEMI .)
    CHAR            reduce using rule 145 (struct_declaration -> SEMI .)
    SHORT           reduce using rule 145 (struct_declaration -> SEMI .)
    INT             reduce using rule 145 (struct_declaration -> SEMI .)
    LONG            reduce using rule 145 (struct_declaration -> SEMI .)
    FLOAT           reduce using rule 145 (struct_declaration -> SEMI .)
    DOUBLE          reduce using rule 145 (struct_declaration -> SEMI .)
    _COMPLEX        reduce using rule 145 (struct_declaration -> SEMI .)
    SIGNED          reduce using rule 145 (struct_declaration -> SEMI .)
    UNSIGNED        reduce using rule 145 (struct_declaration -> SEMI .)
    __INT128        reduce using rule 145 (struct_declaration -> SEMI .)
    CONST           reduce using rule 145 (struct_declaration -> SEMI .)
    RESTRICT        reduce using rule 145 (struct_declaration -> SEMI .)
    VOLATILE        reduce using rule 145 (struct_declaration -> SEMI .)
    STRUCT          reduce using rule 145 (struct_declaration -> SEMI .)
    UNION           reduce using rule 145 (struct_declaration -> SEMI .)


state 147

    (146) struct_declaration -> pppragma_directive .

    RBRACE          reduce using rule 146 (struct_declaration -> pppragma_directive .)
    SEMI            reduce using rule 146 (struct_declaration -> pppragma_directive .)
    PPPRAGMA        reduce using rule 146 (struct_declaration -> pppragma_directive .)
    TYPEID          reduce using rule 146 (struct_declaration -> pppragma_directive .)
    ENUM            reduce using rule 146 (struct_declaration -> pppragma_directive .)
    VOID            reduce using rule 146 (struct_declaration -> pppragma_directive .)
    _BOOL           reduce using rule 146 (struct_declaration -> pppragma_directive .)
    CHAR            reduce using rule 146 (struct_declaration -> pppragma_directive .)
    SHORT           reduce using rule 146 (struct_declaration -> pppragma_directive .)
    INT             reduce using rule 146 (struct_declaration -> pppragma_directive .)
    LONG            reduce using rule 146 (struct_declaration -> pppragma_directive .)
    FLOAT           reduce using rule 146 (struct_declaration -> pppragma_directive .)
    DOUBLE          reduce using rule 146 (struct_declaration -> pppragma_directive .)
    _COMPLEX        reduce using rule 146 (struct_declaration -> pppragma_directive .)
    SIGNED          reduce using rule 146 (struct_declaration -> pppragma_directive .)
    UNSIGNED        reduce using rule 146 (struct_declaration -> pppragma_directive .)
    __INT128        reduce using rule 146 (struct_declaration -> pppragma_directive .)
    CONST           reduce using rule 146 (struct_declaration -> pppragma_directive .)
    RESTRICT        reduce using rule 146 (struct_declaration -> pppragma_directive .)
    VOLATILE        reduce using rule 146 (struct_declaration -> pppragma_directive .)
    STRUCT          reduce using rule 146 (struct_declaration -> pppragma_directive .)
    UNION           reduce using rule 146 (struct_declaration -> pppragma_directive .)


state 148

    (130) specifier_qualifier_list -> type_specifier .

    VOID            reduce using rule 130 (specifier_qualifier_list -> type_specifier .)
    _BOOL           reduce using rule 130 (specifier_qualifier_list -> type_specifier .)
    CHAR            reduce using rule 130 (specifier_qualifier_list -> type_specifier .)
    SHORT           reduce using rule 130 (specifier_qualifier_list -> type_specifier .)
    INT             reduce using rule 130 (specifier_qualifier_list -> type_specifier .)
    LONG            reduce using rule 130 (specifier_qualifier_list -> type_specifier .)
    FLOAT           reduce using rule 130 (specifier_qualifier_list -> type_specifier .)
    DOUBLE          reduce using rule 130 (specifier_qualifier_list -> type_specifier .)
    _COMPLEX        reduce using rule 130 (specifier_qualifier_list -> type_specifier .)
    SIGNED          reduce using rule 130 (specifier_qualifier_list -> type_specifier .)
    UNSIGNED        reduce using rule 130 (specifier_qualifier_list -> type_specifier .)
    __INT128        reduce using rule 130 (specifier_qualifier_list -> type_specifier .)
    CONST           reduce using rule 130 (specifier_qualifier_list -> type_specifier .)
    RESTRICT        reduce using rule 130 (specifier_qualifier_list -> type_specifier .)
    VOLATILE        reduce using rule 130 (specifier_qualifier_list -> type_specifier .)
    COLON           reduce using rule 130 (specifier_qualifier_list -> type_specifier .)
    ID              reduce using rule 130 (specifier_qualifier_list -> type_specifier .)
    LPAREN          reduce using rule 130 (specifier_qualifier_list -> type_specifier .)
    TIMES           reduce using rule 130 (specifier_qualifier_list -> type_specifier .)
    TYPEID          reduce using rule 130 (specifier_qualifier_list -> type_specifier .)
    SEMI            reduce using rule 130 (specifier_qualifier_list -> type_specifier .)
    LBRACKET        reduce using rule 130 (specifier_qualifier_list -> type_specifier .)
    RPAREN          reduce using rule 130 (specifier_qualifier_list -> type_specifier .)
    COMMA           reduce using rule 130 (specifier_qualifier_list -> type_specifier .)


state 149

    (131) specifier_qualifier_list -> type_qualifier_list . type_specifier
    (167) type_qualifier_list -> type_qualifier_list . type_qualifier
    (113) type_specifier -> . typedef_name
    (114) type_specifier -> . enum_specifier
    (115) type_specifier -> . struct_or_union_specifier
    (116) type_specifier -> . type_specifier_no_typeid
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE
    (221) typedef_name -> . TYPEID
    (152) enum_specifier -> . ENUM ID
    (153) enum_specifier -> . ENUM TYPEID
    (154) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (155) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (156) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (132) struct_or_union_specifier -> . struct_or_union ID
    (133) struct_or_union_specifier -> . struct_or_union TYPEID
    (134) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (135) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (136) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (137) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (138) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (139) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (101) type_specifier_no_typeid -> . VOID
    (102) type_specifier_no_typeid -> . _BOOL
    (103) type_specifier_no_typeid -> . CHAR
    (104) type_specifier_no_typeid -> . SHORT
    (105) type_specifier_no_typeid -> . INT
    (106) type_specifier_no_typeid -> . LONG
    (107) type_specifier_no_typeid -> . FLOAT
    (108) type_specifier_no_typeid -> . DOUBLE
    (109) type_specifier_no_typeid -> . _COMPLEX
    (110) type_specifier_no_typeid -> . SIGNED
    (111) type_specifier_no_typeid -> . UNSIGNED
    (112) type_specifier_no_typeid -> . __INT128
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    VOID            shift and go to state 33
    _BOOL           shift and go to state 34
    CHAR            shift and go to state 35
    SHORT           shift and go to state 36
    INT             shift and go to state 37
    LONG            shift and go to state 38
    FLOAT           shift and go to state 39
    DOUBLE          shift and go to state 40
    _COMPLEX        shift and go to state 41
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 43
    __INT128        shift and go to state 44
    STRUCT          shift and go to state 53
    UNION           shift and go to state 54

    type_specifier                 shift and go to state 263
    type_qualifier                 shift and go to state 133
    typedef_name                   shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union_specifier      shift and go to state 29
    type_specifier_no_typeid       shift and go to state 20
    struct_or_union                shift and go to state 32

state 150

    (202) compound_statement -> brace_open block_item_list_opt . brace_close
    (308) brace_close -> . RBRACE

    RBRACE          shift and go to state 144

    brace_close                    shift and go to state 264

state 151

    (5) block_item_list_opt -> empty .
    (13) expression_opt -> empty .

    RBRACE          reduce using rule 5 (block_item_list_opt -> empty .)
    SEMI            reduce using rule 13 (expression_opt -> empty .)


state 152

    (6) block_item_list_opt -> block_item_list .
    (201) block_item_list -> block_item_list . block_item
    (198) block_item -> . declaration
    (199) block_item -> . statement
    (83) declaration -> . decl_body SEMI
    (72) statement -> . labeled_statement
    (73) statement -> . expression_statement
    (74) statement -> . compound_statement
    (75) statement -> . selection_statement
    (76) statement -> . iteration_statement
    (77) statement -> . jump_statement
    (78) statement -> . pppragma_directive
    (81) decl_body -> . declaration_specifiers init_declarator_list_opt
    (82) decl_body -> . declaration_specifiers_no_type id_init_declarator_list_opt
    (203) labeled_statement -> . ID COLON pragmacomp_or_statement
    (204) labeled_statement -> . CASE constant_expression COLON pragmacomp_or_statement
    (205) labeled_statement -> . DEFAULT COLON pragmacomp_or_statement
    (218) expression_statement -> . expression_opt SEMI
    (202) compound_statement -> . brace_open block_item_list_opt brace_close
    (206) selection_statement -> . IF LPAREN expression RPAREN pragmacomp_or_statement
    (207) selection_statement -> . IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
    (208) selection_statement -> . SWITCH LPAREN expression RPAREN pragmacomp_or_statement
    (209) iteration_statement -> . WHILE LPAREN expression RPAREN pragmacomp_or_statement
    (210) iteration_statement -> . DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI
    (211) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (212) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (213) jump_statement -> . GOTO ID SEMI
    (214) jump_statement -> . BREAK SEMI
    (215) jump_statement -> . CONTINUE SEMI
    (216) jump_statement -> . RETURN expression SEMI
    (217) jump_statement -> . RETURN SEMI
    (68) pppragma_directive -> . PPPRAGMA
    (69) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (89) declaration_specifiers -> . declaration_specifiers type_qualifier
    (90) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (91) declaration_specifiers -> . declaration_specifiers function_specifier
    (92) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (93) declaration_specifiers -> . type_specifier
    (94) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (86) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (87) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (88) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (307) brace_open -> . LBRACE
    (113) type_specifier -> . typedef_name
    (114) type_specifier -> . enum_specifier
    (115) type_specifier -> . struct_or_union_specifier
    (116) type_specifier -> . type_specifier_no_typeid
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE
    (95) storage_class_specifier -> . AUTO
    (96) storage_class_specifier -> . REGISTER
    (97) storage_class_specifier -> . STATIC
    (98) storage_class_specifier -> . EXTERN
    (99) storage_class_specifier -> . TYPEDEF
    (100) function_specifier -> . INLINE
    (309) empty -> .
    (219) expression -> . assignment_expression
    (220) expression -> . expression COMMA assignment_expression
    (221) typedef_name -> . TYPEID
    (152) enum_specifier -> . ENUM ID
    (153) enum_specifier -> . ENUM TYPEID
    (154) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (155) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (156) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (132) struct_or_union_specifier -> . struct_or_union ID
    (133) struct_or_union_specifier -> . struct_or_union TYPEID
    (134) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (135) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (136) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (137) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (138) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (139) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (101) type_specifier_no_typeid -> . VOID
    (102) type_specifier_no_typeid -> . _BOOL
    (103) type_specifier_no_typeid -> . CHAR
    (104) type_specifier_no_typeid -> . SHORT
    (105) type_specifier_no_typeid -> . INT
    (106) type_specifier_no_typeid -> . LONG
    (107) type_specifier_no_typeid -> . FLOAT
    (108) type_specifier_no_typeid -> . DOUBLE
    (109) type_specifier_no_typeid -> . _COMPLEX
    (110) type_specifier_no_typeid -> . SIGNED
    (111) type_specifier_no_typeid -> . UNSIGNED
    (112) type_specifier_no_typeid -> . __INT128
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    RBRACE          reduce using rule 6 (block_item_list_opt -> block_item_list .)
    ID              shift and go to state 163
    CASE            shift and go to state 164
    DEFAULT         shift and go to state 165
    IF              shift and go to state 167
    SWITCH          shift and go to state 170
    WHILE           shift and go to state 171
    DO              shift and go to state 172
    FOR             shift and go to state 173
    GOTO            shift and go to state 174
    BREAK           shift and go to state 175
    CONTINUE        shift and go to state 176
    RETURN          shift and go to state 177
    PPPRAGMA        shift and go to state 14
    LBRACE          shift and go to state 101
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47
    AUTO            shift and go to state 48
    REGISTER        shift and go to state 49
    STATIC          shift and go to state 25
    EXTERN          shift and go to state 50
    TYPEDEF         shift and go to state 51
    INLINE          shift and go to state 52
    SEMI            reduce using rule 309 (empty -> .)
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    VOID            shift and go to state 33
    _BOOL           shift and go to state 34
    CHAR            shift and go to state 35
    SHORT           shift and go to state 36
    INT             shift and go to state 37
    LONG            shift and go to state 38
    FLOAT           shift and go to state 39
    DOUBLE          shift and go to state 40
    _COMPLEX        shift and go to state 41
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 43
    __INT128        shift and go to state 44
    STRUCT          shift and go to state 53
    UNION           shift and go to state 54
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    block_item                     shift and go to state 265
    declaration                    shift and go to state 154
    statement                      shift and go to state 155
    decl_body                      shift and go to state 12
    labeled_statement              shift and go to state 156
    expression_statement           shift and go to state 157
    compound_statement             shift and go to state 158
    selection_statement            shift and go to state 159
    iteration_statement            shift and go to state 160
    jump_statement                 shift and go to state 161
    pppragma_directive             shift and go to state 162
    declaration_specifiers         shift and go to state 60
    declaration_specifiers_no_type shift and go to state 61
    expression_opt                 shift and go to state 166
    brace_open                     shift and go to state 106
    expression                     shift and go to state 169
    type_qualifier                 shift and go to state 17
    storage_class_specifier        shift and go to state 18
    function_specifier             shift and go to state 19
    type_specifier_no_typeid       shift and go to state 20
    type_specifier                 shift and go to state 21
    empty                          shift and go to state 266
    typedef_name                   shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union_specifier      shift and go to state 29
    assignment_expression          shift and go to state 178
    struct_or_union                shift and go to state 32
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 153

    (200) block_item_list -> block_item .

    ID              reduce using rule 200 (block_item_list -> block_item .)
    CASE            reduce using rule 200 (block_item_list -> block_item .)
    DEFAULT         reduce using rule 200 (block_item_list -> block_item .)
    IF              reduce using rule 200 (block_item_list -> block_item .)
    SWITCH          reduce using rule 200 (block_item_list -> block_item .)
    WHILE           reduce using rule 200 (block_item_list -> block_item .)
    DO              reduce using rule 200 (block_item_list -> block_item .)
    FOR             reduce using rule 200 (block_item_list -> block_item .)
    GOTO            reduce using rule 200 (block_item_list -> block_item .)
    BREAK           reduce using rule 200 (block_item_list -> block_item .)
    CONTINUE        reduce using rule 200 (block_item_list -> block_item .)
    RETURN          reduce using rule 200 (block_item_list -> block_item .)
    PPPRAGMA        reduce using rule 200 (block_item_list -> block_item .)
    LBRACE          reduce using rule 200 (block_item_list -> block_item .)
    CONST           reduce using rule 200 (block_item_list -> block_item .)
    RESTRICT        reduce using rule 200 (block_item_list -> block_item .)
    VOLATILE        reduce using rule 200 (block_item_list -> block_item .)
    AUTO            reduce using rule 200 (block_item_list -> block_item .)
    REGISTER        reduce using rule 200 (block_item_list -> block_item .)
    STATIC          reduce using rule 200 (block_item_list -> block_item .)
    EXTERN          reduce using rule 200 (block_item_list -> block_item .)
    TYPEDEF         reduce using rule 200 (block_item_list -> block_item .)
    INLINE          reduce using rule 200 (block_item_list -> block_item .)
    TYPEID          reduce using rule 200 (block_item_list -> block_item .)
    ENUM            reduce using rule 200 (block_item_list -> block_item .)
    VOID            reduce using rule 200 (block_item_list -> block_item .)
    _BOOL           reduce using rule 200 (block_item_list -> block_item .)
    CHAR            reduce using rule 200 (block_item_list -> block_item .)
    SHORT           reduce using rule 200 (block_item_list -> block_item .)
    INT             reduce using rule 200 (block_item_list -> block_item .)
    LONG            reduce using rule 200 (block_item_list -> block_item .)
    FLOAT           reduce using rule 200 (block_item_list -> block_item .)
    DOUBLE          reduce using rule 200 (block_item_list -> block_item .)
    _COMPLEX        reduce using rule 200 (block_item_list -> block_item .)
    SIGNED          reduce using rule 200 (block_item_list -> block_item .)
    UNSIGNED        reduce using rule 200 (block_item_list -> block_item .)
    __INT128        reduce using rule 200 (block_item_list -> block_item .)
    STRUCT          reduce using rule 200 (block_item_list -> block_item .)
    UNION           reduce using rule 200 (block_item_list -> block_item .)
    PLUSPLUS        reduce using rule 200 (block_item_list -> block_item .)
    MINUSMINUS      reduce using rule 200 (block_item_list -> block_item .)
    SIZEOF          reduce using rule 200 (block_item_list -> block_item .)
    LPAREN          reduce using rule 200 (block_item_list -> block_item .)
    AND             reduce using rule 200 (block_item_list -> block_item .)
    TIMES           reduce using rule 200 (block_item_list -> block_item .)
    PLUS            reduce using rule 200 (block_item_list -> block_item .)
    MINUS           reduce using rule 200 (block_item_list -> block_item .)
    NOT             reduce using rule 200 (block_item_list -> block_item .)
    LNOT            reduce using rule 200 (block_item_list -> block_item .)
    OFFSETOF        reduce using rule 200 (block_item_list -> block_item .)
    INT_CONST_DEC   reduce using rule 200 (block_item_list -> block_item .)
    INT_CONST_OCT   reduce using rule 200 (block_item_list -> block_item .)
    INT_CONST_HEX   reduce using rule 200 (block_item_list -> block_item .)
    INT_CONST_BIN   reduce using rule 200 (block_item_list -> block_item .)
    FLOAT_CONST     reduce using rule 200 (block_item_list -> block_item .)
    HEX_FLOAT_CONST reduce using rule 200 (block_item_list -> block_item .)
    CHAR_CONST      reduce using rule 200 (block_item_list -> block_item .)
    WCHAR_CONST     reduce using rule 200 (block_item_list -> block_item .)
    STRING_LITERAL  reduce using rule 200 (block_item_list -> block_item .)
    WSTRING_LITERAL reduce using rule 200 (block_item_list -> block_item .)
    SEMI            reduce using rule 200 (block_item_list -> block_item .)
    RBRACE          reduce using rule 200 (block_item_list -> block_item .)


state 154

    (198) block_item -> declaration .

    ID              reduce using rule 198 (block_item -> declaration .)
    CASE            reduce using rule 198 (block_item -> declaration .)
    DEFAULT         reduce using rule 198 (block_item -> declaration .)
    IF              reduce using rule 198 (block_item -> declaration .)
    SWITCH          reduce using rule 198 (block_item -> declaration .)
    WHILE           reduce using rule 198 (block_item -> declaration .)
    DO              reduce using rule 198 (block_item -> declaration .)
    FOR             reduce using rule 198 (block_item -> declaration .)
    GOTO            reduce using rule 198 (block_item -> declaration .)
    BREAK           reduce using rule 198 (block_item -> declaration .)
    CONTINUE        reduce using rule 198 (block_item -> declaration .)
    RETURN          reduce using rule 198 (block_item -> declaration .)
    PPPRAGMA        reduce using rule 198 (block_item -> declaration .)
    LBRACE          reduce using rule 198 (block_item -> declaration .)
    CONST           reduce using rule 198 (block_item -> declaration .)
    RESTRICT        reduce using rule 198 (block_item -> declaration .)
    VOLATILE        reduce using rule 198 (block_item -> declaration .)
    AUTO            reduce using rule 198 (block_item -> declaration .)
    REGISTER        reduce using rule 198 (block_item -> declaration .)
    STATIC          reduce using rule 198 (block_item -> declaration .)
    EXTERN          reduce using rule 198 (block_item -> declaration .)
    TYPEDEF         reduce using rule 198 (block_item -> declaration .)
    INLINE          reduce using rule 198 (block_item -> declaration .)
    TYPEID          reduce using rule 198 (block_item -> declaration .)
    ENUM            reduce using rule 198 (block_item -> declaration .)
    VOID            reduce using rule 198 (block_item -> declaration .)
    _BOOL           reduce using rule 198 (block_item -> declaration .)
    CHAR            reduce using rule 198 (block_item -> declaration .)
    SHORT           reduce using rule 198 (block_item -> declaration .)
    INT             reduce using rule 198 (block_item -> declaration .)
    LONG            reduce using rule 198 (block_item -> declaration .)
    FLOAT           reduce using rule 198 (block_item -> declaration .)
    DOUBLE          reduce using rule 198 (block_item -> declaration .)
    _COMPLEX        reduce using rule 198 (block_item -> declaration .)
    SIGNED          reduce using rule 198 (block_item -> declaration .)
    UNSIGNED        reduce using rule 198 (block_item -> declaration .)
    __INT128        reduce using rule 198 (block_item -> declaration .)
    STRUCT          reduce using rule 198 (block_item -> declaration .)
    UNION           reduce using rule 198 (block_item -> declaration .)
    PLUSPLUS        reduce using rule 198 (block_item -> declaration .)
    MINUSMINUS      reduce using rule 198 (block_item -> declaration .)
    SIZEOF          reduce using rule 198 (block_item -> declaration .)
    LPAREN          reduce using rule 198 (block_item -> declaration .)
    AND             reduce using rule 198 (block_item -> declaration .)
    TIMES           reduce using rule 198 (block_item -> declaration .)
    PLUS            reduce using rule 198 (block_item -> declaration .)
    MINUS           reduce using rule 198 (block_item -> declaration .)
    NOT             reduce using rule 198 (block_item -> declaration .)
    LNOT            reduce using rule 198 (block_item -> declaration .)
    OFFSETOF        reduce using rule 198 (block_item -> declaration .)
    INT_CONST_DEC   reduce using rule 198 (block_item -> declaration .)
    INT_CONST_OCT   reduce using rule 198 (block_item -> declaration .)
    INT_CONST_HEX   reduce using rule 198 (block_item -> declaration .)
    INT_CONST_BIN   reduce using rule 198 (block_item -> declaration .)
    FLOAT_CONST     reduce using rule 198 (block_item -> declaration .)
    HEX_FLOAT_CONST reduce using rule 198 (block_item -> declaration .)
    CHAR_CONST      reduce using rule 198 (block_item -> declaration .)
    WCHAR_CONST     reduce using rule 198 (block_item -> declaration .)
    STRING_LITERAL  reduce using rule 198 (block_item -> declaration .)
    WSTRING_LITERAL reduce using rule 198 (block_item -> declaration .)
    SEMI            reduce using rule 198 (block_item -> declaration .)
    RBRACE          reduce using rule 198 (block_item -> declaration .)


state 155

    (199) block_item -> statement .

    ID              reduce using rule 199 (block_item -> statement .)
    CASE            reduce using rule 199 (block_item -> statement .)
    DEFAULT         reduce using rule 199 (block_item -> statement .)
    IF              reduce using rule 199 (block_item -> statement .)
    SWITCH          reduce using rule 199 (block_item -> statement .)
    WHILE           reduce using rule 199 (block_item -> statement .)
    DO              reduce using rule 199 (block_item -> statement .)
    FOR             reduce using rule 199 (block_item -> statement .)
    GOTO            reduce using rule 199 (block_item -> statement .)
    BREAK           reduce using rule 199 (block_item -> statement .)
    CONTINUE        reduce using rule 199 (block_item -> statement .)
    RETURN          reduce using rule 199 (block_item -> statement .)
    PPPRAGMA        reduce using rule 199 (block_item -> statement .)
    LBRACE          reduce using rule 199 (block_item -> statement .)
    CONST           reduce using rule 199 (block_item -> statement .)
    RESTRICT        reduce using rule 199 (block_item -> statement .)
    VOLATILE        reduce using rule 199 (block_item -> statement .)
    AUTO            reduce using rule 199 (block_item -> statement .)
    REGISTER        reduce using rule 199 (block_item -> statement .)
    STATIC          reduce using rule 199 (block_item -> statement .)
    EXTERN          reduce using rule 199 (block_item -> statement .)
    TYPEDEF         reduce using rule 199 (block_item -> statement .)
    INLINE          reduce using rule 199 (block_item -> statement .)
    TYPEID          reduce using rule 199 (block_item -> statement .)
    ENUM            reduce using rule 199 (block_item -> statement .)
    VOID            reduce using rule 199 (block_item -> statement .)
    _BOOL           reduce using rule 199 (block_item -> statement .)
    CHAR            reduce using rule 199 (block_item -> statement .)
    SHORT           reduce using rule 199 (block_item -> statement .)
    INT             reduce using rule 199 (block_item -> statement .)
    LONG            reduce using rule 199 (block_item -> statement .)
    FLOAT           reduce using rule 199 (block_item -> statement .)
    DOUBLE          reduce using rule 199 (block_item -> statement .)
    _COMPLEX        reduce using rule 199 (block_item -> statement .)
    SIGNED          reduce using rule 199 (block_item -> statement .)
    UNSIGNED        reduce using rule 199 (block_item -> statement .)
    __INT128        reduce using rule 199 (block_item -> statement .)
    STRUCT          reduce using rule 199 (block_item -> statement .)
    UNION           reduce using rule 199 (block_item -> statement .)
    PLUSPLUS        reduce using rule 199 (block_item -> statement .)
    MINUSMINUS      reduce using rule 199 (block_item -> statement .)
    SIZEOF          reduce using rule 199 (block_item -> statement .)
    LPAREN          reduce using rule 199 (block_item -> statement .)
    AND             reduce using rule 199 (block_item -> statement .)
    TIMES           reduce using rule 199 (block_item -> statement .)
    PLUS            reduce using rule 199 (block_item -> statement .)
    MINUS           reduce using rule 199 (block_item -> statement .)
    NOT             reduce using rule 199 (block_item -> statement .)
    LNOT            reduce using rule 199 (block_item -> statement .)
    OFFSETOF        reduce using rule 199 (block_item -> statement .)
    INT_CONST_DEC   reduce using rule 199 (block_item -> statement .)
    INT_CONST_OCT   reduce using rule 199 (block_item -> statement .)
    INT_CONST_HEX   reduce using rule 199 (block_item -> statement .)
    INT_CONST_BIN   reduce using rule 199 (block_item -> statement .)
    FLOAT_CONST     reduce using rule 199 (block_item -> statement .)
    HEX_FLOAT_CONST reduce using rule 199 (block_item -> statement .)
    CHAR_CONST      reduce using rule 199 (block_item -> statement .)
    WCHAR_CONST     reduce using rule 199 (block_item -> statement .)
    STRING_LITERAL  reduce using rule 199 (block_item -> statement .)
    WSTRING_LITERAL reduce using rule 199 (block_item -> statement .)
    SEMI            reduce using rule 199 (block_item -> statement .)
    RBRACE          reduce using rule 199 (block_item -> statement .)


state 156

    (72) statement -> labeled_statement .

    ID              reduce using rule 72 (statement -> labeled_statement .)
    CASE            reduce using rule 72 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 72 (statement -> labeled_statement .)
    IF              reduce using rule 72 (statement -> labeled_statement .)
    SWITCH          reduce using rule 72 (statement -> labeled_statement .)
    WHILE           reduce using rule 72 (statement -> labeled_statement .)
    DO              reduce using rule 72 (statement -> labeled_statement .)
    FOR             reduce using rule 72 (statement -> labeled_statement .)
    GOTO            reduce using rule 72 (statement -> labeled_statement .)
    BREAK           reduce using rule 72 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 72 (statement -> labeled_statement .)
    RETURN          reduce using rule 72 (statement -> labeled_statement .)
    PPPRAGMA        reduce using rule 72 (statement -> labeled_statement .)
    LBRACE          reduce using rule 72 (statement -> labeled_statement .)
    CONST           reduce using rule 72 (statement -> labeled_statement .)
    RESTRICT        reduce using rule 72 (statement -> labeled_statement .)
    VOLATILE        reduce using rule 72 (statement -> labeled_statement .)
    AUTO            reduce using rule 72 (statement -> labeled_statement .)
    REGISTER        reduce using rule 72 (statement -> labeled_statement .)
    STATIC          reduce using rule 72 (statement -> labeled_statement .)
    EXTERN          reduce using rule 72 (statement -> labeled_statement .)
    TYPEDEF         reduce using rule 72 (statement -> labeled_statement .)
    INLINE          reduce using rule 72 (statement -> labeled_statement .)
    TYPEID          reduce using rule 72 (statement -> labeled_statement .)
    ENUM            reduce using rule 72 (statement -> labeled_statement .)
    VOID            reduce using rule 72 (statement -> labeled_statement .)
    _BOOL           reduce using rule 72 (statement -> labeled_statement .)
    CHAR            reduce using rule 72 (statement -> labeled_statement .)
    SHORT           reduce using rule 72 (statement -> labeled_statement .)
    INT             reduce using rule 72 (statement -> labeled_statement .)
    LONG            reduce using rule 72 (statement -> labeled_statement .)
    FLOAT           reduce using rule 72 (statement -> labeled_statement .)
    DOUBLE          reduce using rule 72 (statement -> labeled_statement .)
    _COMPLEX        reduce using rule 72 (statement -> labeled_statement .)
    SIGNED          reduce using rule 72 (statement -> labeled_statement .)
    UNSIGNED        reduce using rule 72 (statement -> labeled_statement .)
    __INT128        reduce using rule 72 (statement -> labeled_statement .)
    STRUCT          reduce using rule 72 (statement -> labeled_statement .)
    UNION           reduce using rule 72 (statement -> labeled_statement .)
    PLUSPLUS        reduce using rule 72 (statement -> labeled_statement .)
    MINUSMINUS      reduce using rule 72 (statement -> labeled_statement .)
    SIZEOF          reduce using rule 72 (statement -> labeled_statement .)
    LPAREN          reduce using rule 72 (statement -> labeled_statement .)
    AND             reduce using rule 72 (statement -> labeled_statement .)
    TIMES           reduce using rule 72 (statement -> labeled_statement .)
    PLUS            reduce using rule 72 (statement -> labeled_statement .)
    MINUS           reduce using rule 72 (statement -> labeled_statement .)
    NOT             reduce using rule 72 (statement -> labeled_statement .)
    LNOT            reduce using rule 72 (statement -> labeled_statement .)
    OFFSETOF        reduce using rule 72 (statement -> labeled_statement .)
    INT_CONST_DEC   reduce using rule 72 (statement -> labeled_statement .)
    INT_CONST_OCT   reduce using rule 72 (statement -> labeled_statement .)
    INT_CONST_HEX   reduce using rule 72 (statement -> labeled_statement .)
    INT_CONST_BIN   reduce using rule 72 (statement -> labeled_statement .)
    FLOAT_CONST     reduce using rule 72 (statement -> labeled_statement .)
    HEX_FLOAT_CONST reduce using rule 72 (statement -> labeled_statement .)
    CHAR_CONST      reduce using rule 72 (statement -> labeled_statement .)
    WCHAR_CONST     reduce using rule 72 (statement -> labeled_statement .)
    STRING_LITERAL  reduce using rule 72 (statement -> labeled_statement .)
    WSTRING_LITERAL reduce using rule 72 (statement -> labeled_statement .)
    SEMI            reduce using rule 72 (statement -> labeled_statement .)
    RBRACE          reduce using rule 72 (statement -> labeled_statement .)
    ELSE            reduce using rule 72 (statement -> labeled_statement .)


state 157

    (73) statement -> expression_statement .

    ID              reduce using rule 73 (statement -> expression_statement .)
    CASE            reduce using rule 73 (statement -> expression_statement .)
    DEFAULT         reduce using rule 73 (statement -> expression_statement .)
    IF              reduce using rule 73 (statement -> expression_statement .)
    SWITCH          reduce using rule 73 (statement -> expression_statement .)
    WHILE           reduce using rule 73 (statement -> expression_statement .)
    DO              reduce using rule 73 (statement -> expression_statement .)
    FOR             reduce using rule 73 (statement -> expression_statement .)
    GOTO            reduce using rule 73 (statement -> expression_statement .)
    BREAK           reduce using rule 73 (statement -> expression_statement .)
    CONTINUE        reduce using rule 73 (statement -> expression_statement .)
    RETURN          reduce using rule 73 (statement -> expression_statement .)
    PPPRAGMA        reduce using rule 73 (statement -> expression_statement .)
    LBRACE          reduce using rule 73 (statement -> expression_statement .)
    CONST           reduce using rule 73 (statement -> expression_statement .)
    RESTRICT        reduce using rule 73 (statement -> expression_statement .)
    VOLATILE        reduce using rule 73 (statement -> expression_statement .)
    AUTO            reduce using rule 73 (statement -> expression_statement .)
    REGISTER        reduce using rule 73 (statement -> expression_statement .)
    STATIC          reduce using rule 73 (statement -> expression_statement .)
    EXTERN          reduce using rule 73 (statement -> expression_statement .)
    TYPEDEF         reduce using rule 73 (statement -> expression_statement .)
    INLINE          reduce using rule 73 (statement -> expression_statement .)
    TYPEID          reduce using rule 73 (statement -> expression_statement .)
    ENUM            reduce using rule 73 (statement -> expression_statement .)
    VOID            reduce using rule 73 (statement -> expression_statement .)
    _BOOL           reduce using rule 73 (statement -> expression_statement .)
    CHAR            reduce using rule 73 (statement -> expression_statement .)
    SHORT           reduce using rule 73 (statement -> expression_statement .)
    INT             reduce using rule 73 (statement -> expression_statement .)
    LONG            reduce using rule 73 (statement -> expression_statement .)
    FLOAT           reduce using rule 73 (statement -> expression_statement .)
    DOUBLE          reduce using rule 73 (statement -> expression_statement .)
    _COMPLEX        reduce using rule 73 (statement -> expression_statement .)
    SIGNED          reduce using rule 73 (statement -> expression_statement .)
    UNSIGNED        reduce using rule 73 (statement -> expression_statement .)
    __INT128        reduce using rule 73 (statement -> expression_statement .)
    STRUCT          reduce using rule 73 (statement -> expression_statement .)
    UNION           reduce using rule 73 (statement -> expression_statement .)
    PLUSPLUS        reduce using rule 73 (statement -> expression_statement .)
    MINUSMINUS      reduce using rule 73 (statement -> expression_statement .)
    SIZEOF          reduce using rule 73 (statement -> expression_statement .)
    LPAREN          reduce using rule 73 (statement -> expression_statement .)
    AND             reduce using rule 73 (statement -> expression_statement .)
    TIMES           reduce using rule 73 (statement -> expression_statement .)
    PLUS            reduce using rule 73 (statement -> expression_statement .)
    MINUS           reduce using rule 73 (statement -> expression_statement .)
    NOT             reduce using rule 73 (statement -> expression_statement .)
    LNOT            reduce using rule 73 (statement -> expression_statement .)
    OFFSETOF        reduce using rule 73 (statement -> expression_statement .)
    INT_CONST_DEC   reduce using rule 73 (statement -> expression_statement .)
    INT_CONST_OCT   reduce using rule 73 (statement -> expression_statement .)
    INT_CONST_HEX   reduce using rule 73 (statement -> expression_statement .)
    INT_CONST_BIN   reduce using rule 73 (statement -> expression_statement .)
    FLOAT_CONST     reduce using rule 73 (statement -> expression_statement .)
    HEX_FLOAT_CONST reduce using rule 73 (statement -> expression_statement .)
    CHAR_CONST      reduce using rule 73 (statement -> expression_statement .)
    WCHAR_CONST     reduce using rule 73 (statement -> expression_statement .)
    STRING_LITERAL  reduce using rule 73 (statement -> expression_statement .)
    WSTRING_LITERAL reduce using rule 73 (statement -> expression_statement .)
    SEMI            reduce using rule 73 (statement -> expression_statement .)
    RBRACE          reduce using rule 73 (statement -> expression_statement .)
    ELSE            reduce using rule 73 (statement -> expression_statement .)


state 158

    (74) statement -> compound_statement .

    ID              reduce using rule 74 (statement -> compound_statement .)
    CASE            reduce using rule 74 (statement -> compound_statement .)
    DEFAULT         reduce using rule 74 (statement -> compound_statement .)
    IF              reduce using rule 74 (statement -> compound_statement .)
    SWITCH          reduce using rule 74 (statement -> compound_statement .)
    WHILE           reduce using rule 74 (statement -> compound_statement .)
    DO              reduce using rule 74 (statement -> compound_statement .)
    FOR             reduce using rule 74 (statement -> compound_statement .)
    GOTO            reduce using rule 74 (statement -> compound_statement .)
    BREAK           reduce using rule 74 (statement -> compound_statement .)
    CONTINUE        reduce using rule 74 (statement -> compound_statement .)
    RETURN          reduce using rule 74 (statement -> compound_statement .)
    PPPRAGMA        reduce using rule 74 (statement -> compound_statement .)
    LBRACE          reduce using rule 74 (statement -> compound_statement .)
    CONST           reduce using rule 74 (statement -> compound_statement .)
    RESTRICT        reduce using rule 74 (statement -> compound_statement .)
    VOLATILE        reduce using rule 74 (statement -> compound_statement .)
    AUTO            reduce using rule 74 (statement -> compound_statement .)
    REGISTER        reduce using rule 74 (statement -> compound_statement .)
    STATIC          reduce using rule 74 (statement -> compound_statement .)
    EXTERN          reduce using rule 74 (statement -> compound_statement .)
    TYPEDEF         reduce using rule 74 (statement -> compound_statement .)
    INLINE          reduce using rule 74 (statement -> compound_statement .)
    TYPEID          reduce using rule 74 (statement -> compound_statement .)
    ENUM            reduce using rule 74 (statement -> compound_statement .)
    VOID            reduce using rule 74 (statement -> compound_statement .)
    _BOOL           reduce using rule 74 (statement -> compound_statement .)
    CHAR            reduce using rule 74 (statement -> compound_statement .)
    SHORT           reduce using rule 74 (statement -> compound_statement .)
    INT             reduce using rule 74 (statement -> compound_statement .)
    LONG            reduce using rule 74 (statement -> compound_statement .)
    FLOAT           reduce using rule 74 (statement -> compound_statement .)
    DOUBLE          reduce using rule 74 (statement -> compound_statement .)
    _COMPLEX        reduce using rule 74 (statement -> compound_statement .)
    SIGNED          reduce using rule 74 (statement -> compound_statement .)
    UNSIGNED        reduce using rule 74 (statement -> compound_statement .)
    __INT128        reduce using rule 74 (statement -> compound_statement .)
    STRUCT          reduce using rule 74 (statement -> compound_statement .)
    UNION           reduce using rule 74 (statement -> compound_statement .)
    PLUSPLUS        reduce using rule 74 (statement -> compound_statement .)
    MINUSMINUS      reduce using rule 74 (statement -> compound_statement .)
    SIZEOF          reduce using rule 74 (statement -> compound_statement .)
    LPAREN          reduce using rule 74 (statement -> compound_statement .)
    AND             reduce using rule 74 (statement -> compound_statement .)
    TIMES           reduce using rule 74 (statement -> compound_statement .)
    PLUS            reduce using rule 74 (statement -> compound_statement .)
    MINUS           reduce using rule 74 (statement -> compound_statement .)
    NOT             reduce using rule 74 (statement -> compound_statement .)
    LNOT            reduce using rule 74 (statement -> compound_statement .)
    OFFSETOF        reduce using rule 74 (statement -> compound_statement .)
    INT_CONST_DEC   reduce using rule 74 (statement -> compound_statement .)
    INT_CONST_OCT   reduce using rule 74 (statement -> compound_statement .)
    INT_CONST_HEX   reduce using rule 74 (statement -> compound_statement .)
    INT_CONST_BIN   reduce using rule 74 (statement -> compound_statement .)
    FLOAT_CONST     reduce using rule 74 (statement -> compound_statement .)
    HEX_FLOAT_CONST reduce using rule 74 (statement -> compound_statement .)
    CHAR_CONST      reduce using rule 74 (statement -> compound_statement .)
    WCHAR_CONST     reduce using rule 74 (statement -> compound_statement .)
    STRING_LITERAL  reduce using rule 74 (statement -> compound_statement .)
    WSTRING_LITERAL reduce using rule 74 (statement -> compound_statement .)
    SEMI            reduce using rule 74 (statement -> compound_statement .)
    RBRACE          reduce using rule 74 (statement -> compound_statement .)
    ELSE            reduce using rule 74 (statement -> compound_statement .)


state 159

    (75) statement -> selection_statement .

    ID              reduce using rule 75 (statement -> selection_statement .)
    CASE            reduce using rule 75 (statement -> selection_statement .)
    DEFAULT         reduce using rule 75 (statement -> selection_statement .)
    IF              reduce using rule 75 (statement -> selection_statement .)
    SWITCH          reduce using rule 75 (statement -> selection_statement .)
    WHILE           reduce using rule 75 (statement -> selection_statement .)
    DO              reduce using rule 75 (statement -> selection_statement .)
    FOR             reduce using rule 75 (statement -> selection_statement .)
    GOTO            reduce using rule 75 (statement -> selection_statement .)
    BREAK           reduce using rule 75 (statement -> selection_statement .)
    CONTINUE        reduce using rule 75 (statement -> selection_statement .)
    RETURN          reduce using rule 75 (statement -> selection_statement .)
    PPPRAGMA        reduce using rule 75 (statement -> selection_statement .)
    LBRACE          reduce using rule 75 (statement -> selection_statement .)
    CONST           reduce using rule 75 (statement -> selection_statement .)
    RESTRICT        reduce using rule 75 (statement -> selection_statement .)
    VOLATILE        reduce using rule 75 (statement -> selection_statement .)
    AUTO            reduce using rule 75 (statement -> selection_statement .)
    REGISTER        reduce using rule 75 (statement -> selection_statement .)
    STATIC          reduce using rule 75 (statement -> selection_statement .)
    EXTERN          reduce using rule 75 (statement -> selection_statement .)
    TYPEDEF         reduce using rule 75 (statement -> selection_statement .)
    INLINE          reduce using rule 75 (statement -> selection_statement .)
    TYPEID          reduce using rule 75 (statement -> selection_statement .)
    ENUM            reduce using rule 75 (statement -> selection_statement .)
    VOID            reduce using rule 75 (statement -> selection_statement .)
    _BOOL           reduce using rule 75 (statement -> selection_statement .)
    CHAR            reduce using rule 75 (statement -> selection_statement .)
    SHORT           reduce using rule 75 (statement -> selection_statement .)
    INT             reduce using rule 75 (statement -> selection_statement .)
    LONG            reduce using rule 75 (statement -> selection_statement .)
    FLOAT           reduce using rule 75 (statement -> selection_statement .)
    DOUBLE          reduce using rule 75 (statement -> selection_statement .)
    _COMPLEX        reduce using rule 75 (statement -> selection_statement .)
    SIGNED          reduce using rule 75 (statement -> selection_statement .)
    UNSIGNED        reduce using rule 75 (statement -> selection_statement .)
    __INT128        reduce using rule 75 (statement -> selection_statement .)
    STRUCT          reduce using rule 75 (statement -> selection_statement .)
    UNION           reduce using rule 75 (statement -> selection_statement .)
    PLUSPLUS        reduce using rule 75 (statement -> selection_statement .)
    MINUSMINUS      reduce using rule 75 (statement -> selection_statement .)
    SIZEOF          reduce using rule 75 (statement -> selection_statement .)
    LPAREN          reduce using rule 75 (statement -> selection_statement .)
    AND             reduce using rule 75 (statement -> selection_statement .)
    TIMES           reduce using rule 75 (statement -> selection_statement .)
    PLUS            reduce using rule 75 (statement -> selection_statement .)
    MINUS           reduce using rule 75 (statement -> selection_statement .)
    NOT             reduce using rule 75 (statement -> selection_statement .)
    LNOT            reduce using rule 75 (statement -> selection_statement .)
    OFFSETOF        reduce using rule 75 (statement -> selection_statement .)
    INT_CONST_DEC   reduce using rule 75 (statement -> selection_statement .)
    INT_CONST_OCT   reduce using rule 75 (statement -> selection_statement .)
    INT_CONST_HEX   reduce using rule 75 (statement -> selection_statement .)
    INT_CONST_BIN   reduce using rule 75 (statement -> selection_statement .)
    FLOAT_CONST     reduce using rule 75 (statement -> selection_statement .)
    HEX_FLOAT_CONST reduce using rule 75 (statement -> selection_statement .)
    CHAR_CONST      reduce using rule 75 (statement -> selection_statement .)
    WCHAR_CONST     reduce using rule 75 (statement -> selection_statement .)
    STRING_LITERAL  reduce using rule 75 (statement -> selection_statement .)
    WSTRING_LITERAL reduce using rule 75 (statement -> selection_statement .)
    SEMI            reduce using rule 75 (statement -> selection_statement .)
    RBRACE          reduce using rule 75 (statement -> selection_statement .)
    ELSE            reduce using rule 75 (statement -> selection_statement .)


state 160

    (76) statement -> iteration_statement .

    ID              reduce using rule 76 (statement -> iteration_statement .)
    CASE            reduce using rule 76 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 76 (statement -> iteration_statement .)
    IF              reduce using rule 76 (statement -> iteration_statement .)
    SWITCH          reduce using rule 76 (statement -> iteration_statement .)
    WHILE           reduce using rule 76 (statement -> iteration_statement .)
    DO              reduce using rule 76 (statement -> iteration_statement .)
    FOR             reduce using rule 76 (statement -> iteration_statement .)
    GOTO            reduce using rule 76 (statement -> iteration_statement .)
    BREAK           reduce using rule 76 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 76 (statement -> iteration_statement .)
    RETURN          reduce using rule 76 (statement -> iteration_statement .)
    PPPRAGMA        reduce using rule 76 (statement -> iteration_statement .)
    LBRACE          reduce using rule 76 (statement -> iteration_statement .)
    CONST           reduce using rule 76 (statement -> iteration_statement .)
    RESTRICT        reduce using rule 76 (statement -> iteration_statement .)
    VOLATILE        reduce using rule 76 (statement -> iteration_statement .)
    AUTO            reduce using rule 76 (statement -> iteration_statement .)
    REGISTER        reduce using rule 76 (statement -> iteration_statement .)
    STATIC          reduce using rule 76 (statement -> iteration_statement .)
    EXTERN          reduce using rule 76 (statement -> iteration_statement .)
    TYPEDEF         reduce using rule 76 (statement -> iteration_statement .)
    INLINE          reduce using rule 76 (statement -> iteration_statement .)
    TYPEID          reduce using rule 76 (statement -> iteration_statement .)
    ENUM            reduce using rule 76 (statement -> iteration_statement .)
    VOID            reduce using rule 76 (statement -> iteration_statement .)
    _BOOL           reduce using rule 76 (statement -> iteration_statement .)
    CHAR            reduce using rule 76 (statement -> iteration_statement .)
    SHORT           reduce using rule 76 (statement -> iteration_statement .)
    INT             reduce using rule 76 (statement -> iteration_statement .)
    LONG            reduce using rule 76 (statement -> iteration_statement .)
    FLOAT           reduce using rule 76 (statement -> iteration_statement .)
    DOUBLE          reduce using rule 76 (statement -> iteration_statement .)
    _COMPLEX        reduce using rule 76 (statement -> iteration_statement .)
    SIGNED          reduce using rule 76 (statement -> iteration_statement .)
    UNSIGNED        reduce using rule 76 (statement -> iteration_statement .)
    __INT128        reduce using rule 76 (statement -> iteration_statement .)
    STRUCT          reduce using rule 76 (statement -> iteration_statement .)
    UNION           reduce using rule 76 (statement -> iteration_statement .)
    PLUSPLUS        reduce using rule 76 (statement -> iteration_statement .)
    MINUSMINUS      reduce using rule 76 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 76 (statement -> iteration_statement .)
    LPAREN          reduce using rule 76 (statement -> iteration_statement .)
    AND             reduce using rule 76 (statement -> iteration_statement .)
    TIMES           reduce using rule 76 (statement -> iteration_statement .)
    PLUS            reduce using rule 76 (statement -> iteration_statement .)
    MINUS           reduce using rule 76 (statement -> iteration_statement .)
    NOT             reduce using rule 76 (statement -> iteration_statement .)
    LNOT            reduce using rule 76 (statement -> iteration_statement .)
    OFFSETOF        reduce using rule 76 (statement -> iteration_statement .)
    INT_CONST_DEC   reduce using rule 76 (statement -> iteration_statement .)
    INT_CONST_OCT   reduce using rule 76 (statement -> iteration_statement .)
    INT_CONST_HEX   reduce using rule 76 (statement -> iteration_statement .)
    INT_CONST_BIN   reduce using rule 76 (statement -> iteration_statement .)
    FLOAT_CONST     reduce using rule 76 (statement -> iteration_statement .)
    HEX_FLOAT_CONST reduce using rule 76 (statement -> iteration_statement .)
    CHAR_CONST      reduce using rule 76 (statement -> iteration_statement .)
    WCHAR_CONST     reduce using rule 76 (statement -> iteration_statement .)
    STRING_LITERAL  reduce using rule 76 (statement -> iteration_statement .)
    WSTRING_LITERAL reduce using rule 76 (statement -> iteration_statement .)
    SEMI            reduce using rule 76 (statement -> iteration_statement .)
    RBRACE          reduce using rule 76 (statement -> iteration_statement .)
    ELSE            reduce using rule 76 (statement -> iteration_statement .)


state 161

    (77) statement -> jump_statement .

    ID              reduce using rule 77 (statement -> jump_statement .)
    CASE            reduce using rule 77 (statement -> jump_statement .)
    DEFAULT         reduce using rule 77 (statement -> jump_statement .)
    IF              reduce using rule 77 (statement -> jump_statement .)
    SWITCH          reduce using rule 77 (statement -> jump_statement .)
    WHILE           reduce using rule 77 (statement -> jump_statement .)
    DO              reduce using rule 77 (statement -> jump_statement .)
    FOR             reduce using rule 77 (statement -> jump_statement .)
    GOTO            reduce using rule 77 (statement -> jump_statement .)
    BREAK           reduce using rule 77 (statement -> jump_statement .)
    CONTINUE        reduce using rule 77 (statement -> jump_statement .)
    RETURN          reduce using rule 77 (statement -> jump_statement .)
    PPPRAGMA        reduce using rule 77 (statement -> jump_statement .)
    LBRACE          reduce using rule 77 (statement -> jump_statement .)
    CONST           reduce using rule 77 (statement -> jump_statement .)
    RESTRICT        reduce using rule 77 (statement -> jump_statement .)
    VOLATILE        reduce using rule 77 (statement -> jump_statement .)
    AUTO            reduce using rule 77 (statement -> jump_statement .)
    REGISTER        reduce using rule 77 (statement -> jump_statement .)
    STATIC          reduce using rule 77 (statement -> jump_statement .)
    EXTERN          reduce using rule 77 (statement -> jump_statement .)
    TYPEDEF         reduce using rule 77 (statement -> jump_statement .)
    INLINE          reduce using rule 77 (statement -> jump_statement .)
    TYPEID          reduce using rule 77 (statement -> jump_statement .)
    ENUM            reduce using rule 77 (statement -> jump_statement .)
    VOID            reduce using rule 77 (statement -> jump_statement .)
    _BOOL           reduce using rule 77 (statement -> jump_statement .)
    CHAR            reduce using rule 77 (statement -> jump_statement .)
    SHORT           reduce using rule 77 (statement -> jump_statement .)
    INT             reduce using rule 77 (statement -> jump_statement .)
    LONG            reduce using rule 77 (statement -> jump_statement .)
    FLOAT           reduce using rule 77 (statement -> jump_statement .)
    DOUBLE          reduce using rule 77 (statement -> jump_statement .)
    _COMPLEX        reduce using rule 77 (statement -> jump_statement .)
    SIGNED          reduce using rule 77 (statement -> jump_statement .)
    UNSIGNED        reduce using rule 77 (statement -> jump_statement .)
    __INT128        reduce using rule 77 (statement -> jump_statement .)
    STRUCT          reduce using rule 77 (statement -> jump_statement .)
    UNION           reduce using rule 77 (statement -> jump_statement .)
    PLUSPLUS        reduce using rule 77 (statement -> jump_statement .)
    MINUSMINUS      reduce using rule 77 (statement -> jump_statement .)
    SIZEOF          reduce using rule 77 (statement -> jump_statement .)
    LPAREN          reduce using rule 77 (statement -> jump_statement .)
    AND             reduce using rule 77 (statement -> jump_statement .)
    TIMES           reduce using rule 77 (statement -> jump_statement .)
    PLUS            reduce using rule 77 (statement -> jump_statement .)
    MINUS           reduce using rule 77 (statement -> jump_statement .)
    NOT             reduce using rule 77 (statement -> jump_statement .)
    LNOT            reduce using rule 77 (statement -> jump_statement .)
    OFFSETOF        reduce using rule 77 (statement -> jump_statement .)
    INT_CONST_DEC   reduce using rule 77 (statement -> jump_statement .)
    INT_CONST_OCT   reduce using rule 77 (statement -> jump_statement .)
    INT_CONST_HEX   reduce using rule 77 (statement -> jump_statement .)
    INT_CONST_BIN   reduce using rule 77 (statement -> jump_statement .)
    FLOAT_CONST     reduce using rule 77 (statement -> jump_statement .)
    HEX_FLOAT_CONST reduce using rule 77 (statement -> jump_statement .)
    CHAR_CONST      reduce using rule 77 (statement -> jump_statement .)
    WCHAR_CONST     reduce using rule 77 (statement -> jump_statement .)
    STRING_LITERAL  reduce using rule 77 (statement -> jump_statement .)
    WSTRING_LITERAL reduce using rule 77 (statement -> jump_statement .)
    SEMI            reduce using rule 77 (statement -> jump_statement .)
    RBRACE          reduce using rule 77 (statement -> jump_statement .)
    ELSE            reduce using rule 77 (statement -> jump_statement .)


state 162

    (78) statement -> pppragma_directive .

    ID              reduce using rule 78 (statement -> pppragma_directive .)
    CASE            reduce using rule 78 (statement -> pppragma_directive .)
    DEFAULT         reduce using rule 78 (statement -> pppragma_directive .)
    IF              reduce using rule 78 (statement -> pppragma_directive .)
    SWITCH          reduce using rule 78 (statement -> pppragma_directive .)
    WHILE           reduce using rule 78 (statement -> pppragma_directive .)
    DO              reduce using rule 78 (statement -> pppragma_directive .)
    FOR             reduce using rule 78 (statement -> pppragma_directive .)
    GOTO            reduce using rule 78 (statement -> pppragma_directive .)
    BREAK           reduce using rule 78 (statement -> pppragma_directive .)
    CONTINUE        reduce using rule 78 (statement -> pppragma_directive .)
    RETURN          reduce using rule 78 (statement -> pppragma_directive .)
    PPPRAGMA        reduce using rule 78 (statement -> pppragma_directive .)
    LBRACE          reduce using rule 78 (statement -> pppragma_directive .)
    CONST           reduce using rule 78 (statement -> pppragma_directive .)
    RESTRICT        reduce using rule 78 (statement -> pppragma_directive .)
    VOLATILE        reduce using rule 78 (statement -> pppragma_directive .)
    AUTO            reduce using rule 78 (statement -> pppragma_directive .)
    REGISTER        reduce using rule 78 (statement -> pppragma_directive .)
    STATIC          reduce using rule 78 (statement -> pppragma_directive .)
    EXTERN          reduce using rule 78 (statement -> pppragma_directive .)
    TYPEDEF         reduce using rule 78 (statement -> pppragma_directive .)
    INLINE          reduce using rule 78 (statement -> pppragma_directive .)
    TYPEID          reduce using rule 78 (statement -> pppragma_directive .)
    ENUM            reduce using rule 78 (statement -> pppragma_directive .)
    VOID            reduce using rule 78 (statement -> pppragma_directive .)
    _BOOL           reduce using rule 78 (statement -> pppragma_directive .)
    CHAR            reduce using rule 78 (statement -> pppragma_directive .)
    SHORT           reduce using rule 78 (statement -> pppragma_directive .)
    INT             reduce using rule 78 (statement -> pppragma_directive .)
    LONG            reduce using rule 78 (statement -> pppragma_directive .)
    FLOAT           reduce using rule 78 (statement -> pppragma_directive .)
    DOUBLE          reduce using rule 78 (statement -> pppragma_directive .)
    _COMPLEX        reduce using rule 78 (statement -> pppragma_directive .)
    SIGNED          reduce using rule 78 (statement -> pppragma_directive .)
    UNSIGNED        reduce using rule 78 (statement -> pppragma_directive .)
    __INT128        reduce using rule 78 (statement -> pppragma_directive .)
    STRUCT          reduce using rule 78 (statement -> pppragma_directive .)
    UNION           reduce using rule 78 (statement -> pppragma_directive .)
    PLUSPLUS        reduce using rule 78 (statement -> pppragma_directive .)
    MINUSMINUS      reduce using rule 78 (statement -> pppragma_directive .)
    SIZEOF          reduce using rule 78 (statement -> pppragma_directive .)
    LPAREN          reduce using rule 78 (statement -> pppragma_directive .)
    AND             reduce using rule 78 (statement -> pppragma_directive .)
    TIMES           reduce using rule 78 (statement -> pppragma_directive .)
    PLUS            reduce using rule 78 (statement -> pppragma_directive .)
    MINUS           reduce using rule 78 (statement -> pppragma_directive .)
    NOT             reduce using rule 78 (statement -> pppragma_directive .)
    LNOT            reduce using rule 78 (statement -> pppragma_directive .)
    OFFSETOF        reduce using rule 78 (statement -> pppragma_directive .)
    INT_CONST_DEC   reduce using rule 78 (statement -> pppragma_directive .)
    INT_CONST_OCT   reduce using rule 78 (statement -> pppragma_directive .)
    INT_CONST_HEX   reduce using rule 78 (statement -> pppragma_directive .)
    INT_CONST_BIN   reduce using rule 78 (statement -> pppragma_directive .)
    FLOAT_CONST     reduce using rule 78 (statement -> pppragma_directive .)
    HEX_FLOAT_CONST reduce using rule 78 (statement -> pppragma_directive .)
    CHAR_CONST      reduce using rule 78 (statement -> pppragma_directive .)
    WCHAR_CONST     reduce using rule 78 (statement -> pppragma_directive .)
    STRING_LITERAL  reduce using rule 78 (statement -> pppragma_directive .)
    WSTRING_LITERAL reduce using rule 78 (statement -> pppragma_directive .)
    SEMI            reduce using rule 78 (statement -> pppragma_directive .)
    RBRACE          reduce using rule 78 (statement -> pppragma_directive .)
    ELSE            reduce using rule 78 (statement -> pppragma_directive .)


state 163

    (203) labeled_statement -> ID . COLON pragmacomp_or_statement
    (294) identifier -> ID .

    COLON           shift and go to state 267
    LBRACKET        reduce using rule 294 (identifier -> ID .)
    LPAREN          reduce using rule 294 (identifier -> ID .)
    PERIOD          reduce using rule 294 (identifier -> ID .)
    ARROW           reduce using rule 294 (identifier -> ID .)
    PLUSPLUS        reduce using rule 294 (identifier -> ID .)
    MINUSMINUS      reduce using rule 294 (identifier -> ID .)
    EQUALS          reduce using rule 294 (identifier -> ID .)
    XOREQUAL        reduce using rule 294 (identifier -> ID .)
    TIMESEQUAL      reduce using rule 294 (identifier -> ID .)
    DIVEQUAL        reduce using rule 294 (identifier -> ID .)
    MODEQUAL        reduce using rule 294 (identifier -> ID .)
    PLUSEQUAL       reduce using rule 294 (identifier -> ID .)
    MINUSEQUAL      reduce using rule 294 (identifier -> ID .)
    LSHIFTEQUAL     reduce using rule 294 (identifier -> ID .)
    RSHIFTEQUAL     reduce using rule 294 (identifier -> ID .)
    ANDEQUAL        reduce using rule 294 (identifier -> ID .)
    OREQUAL         reduce using rule 294 (identifier -> ID .)
    CONDOP          reduce using rule 294 (identifier -> ID .)
    TIMES           reduce using rule 294 (identifier -> ID .)
    DIVIDE          reduce using rule 294 (identifier -> ID .)
    MOD             reduce using rule 294 (identifier -> ID .)
    PLUS            reduce using rule 294 (identifier -> ID .)
    MINUS           reduce using rule 294 (identifier -> ID .)
    RSHIFT          reduce using rule 294 (identifier -> ID .)
    LSHIFT          reduce using rule 294 (identifier -> ID .)
    LT              reduce using rule 294 (identifier -> ID .)
    LE              reduce using rule 294 (identifier -> ID .)
    GE              reduce using rule 294 (identifier -> ID .)
    GT              reduce using rule 294 (identifier -> ID .)
    EQ              reduce using rule 294 (identifier -> ID .)
    NE              reduce using rule 294 (identifier -> ID .)
    AND             reduce using rule 294 (identifier -> ID .)
    OR              reduce using rule 294 (identifier -> ID .)
    XOR             reduce using rule 294 (identifier -> ID .)
    LAND            reduce using rule 294 (identifier -> ID .)
    LOR             reduce using rule 294 (identifier -> ID .)
    COMMA           reduce using rule 294 (identifier -> ID .)
    SEMI            reduce using rule 294 (identifier -> ID .)


state 164

    (204) labeled_statement -> CASE . constant_expression COLON pragmacomp_or_statement
    (235) constant_expression -> . conditional_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 271
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    constant_expression            shift and go to state 268
    conditional_expression         shift and go to state 269
    binary_expression              shift and go to state 181
    cast_expression                shift and go to state 186
    unary_expression               shift and go to state 270
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 165

    (205) labeled_statement -> DEFAULT . COLON pragmacomp_or_statement

    COLON           shift and go to state 272


state 166

    (218) expression_statement -> expression_opt . SEMI

    SEMI            shift and go to state 273


state 167

    (206) selection_statement -> IF . LPAREN expression RPAREN pragmacomp_or_statement
    (207) selection_statement -> IF . LPAREN expression RPAREN statement ELSE pragmacomp_or_statement

    LPAREN          shift and go to state 274


state 168

    (281) postfix_expression -> LPAREN . type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> LPAREN . type_name RPAREN brace_open initializer_list COMMA brace_close
    (258) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (287) primary_expression -> LPAREN . expression RPAREN
    (187) type_name -> . specifier_qualifier_list abstract_declarator_opt
    (219) expression -> . assignment_expression
    (220) expression -> . expression COMMA assignment_expression
    (128) specifier_qualifier_list -> . specifier_qualifier_list type_specifier_no_typeid
    (129) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (130) specifier_qualifier_list -> . type_specifier
    (131) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (113) type_specifier -> . typedef_name
    (114) type_specifier -> . enum_specifier
    (115) type_specifier -> . struct_or_union_specifier
    (116) type_specifier -> . type_specifier_no_typeid
    (166) type_qualifier_list -> . type_qualifier
    (167) type_qualifier_list -> . type_qualifier_list type_qualifier
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (221) typedef_name -> . TYPEID
    (152) enum_specifier -> . ENUM ID
    (153) enum_specifier -> . ENUM TYPEID
    (154) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (155) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (156) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (132) struct_or_union_specifier -> . struct_or_union ID
    (133) struct_or_union_specifier -> . struct_or_union TYPEID
    (134) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (135) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (136) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (137) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (138) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (139) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (101) type_specifier_no_typeid -> . VOID
    (102) type_specifier_no_typeid -> . _BOOL
    (103) type_specifier_no_typeid -> . CHAR
    (104) type_specifier_no_typeid -> . SHORT
    (105) type_specifier_no_typeid -> . INT
    (106) type_specifier_no_typeid -> . LONG
    (107) type_specifier_no_typeid -> . FLOAT
    (108) type_specifier_no_typeid -> . DOUBLE
    (109) type_specifier_no_typeid -> . _COMPLEX
    (110) type_specifier_no_typeid -> . SIGNED
    (111) type_specifier_no_typeid -> . UNSIGNED
    (112) type_specifier_no_typeid -> . __INT128
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    VOID            shift and go to state 33
    _BOOL           shift and go to state 34
    CHAR            shift and go to state 35
    SHORT           shift and go to state 36
    INT             shift and go to state 37
    LONG            shift and go to state 38
    FLOAT           shift and go to state 39
    DOUBLE          shift and go to state 40
    _COMPLEX        shift and go to state 41
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 43
    __INT128        shift and go to state 44
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    STRUCT          shift and go to state 53
    UNION           shift and go to state 54
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    type_name                      shift and go to state 275
    cast_expression                shift and go to state 186
    expression                     shift and go to state 276
    specifier_qualifier_list       shift and go to state 277
    assignment_expression          shift and go to state 178
    type_specifier_no_typeid       shift and go to state 20
    type_qualifier                 shift and go to state 97
    type_specifier                 shift and go to state 148
    type_qualifier_list            shift and go to state 149
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    typedef_name                   shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union_specifier      shift and go to state 29
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    struct_or_union                shift and go to state 32
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 169

    (14) expression_opt -> expression .
    (220) expression -> expression . COMMA assignment_expression

    SEMI            reduce using rule 14 (expression_opt -> expression .)
    RPAREN          reduce using rule 14 (expression_opt -> expression .)
    COMMA           shift and go to state 278


state 170

    (208) selection_statement -> SWITCH . LPAREN expression RPAREN pragmacomp_or_statement

    LPAREN          shift and go to state 279


state 171

    (209) iteration_statement -> WHILE . LPAREN expression RPAREN pragmacomp_or_statement

    LPAREN          shift and go to state 280


state 172

    (210) iteration_statement -> DO . pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI
    (79) pragmacomp_or_statement -> . pppragma_directive statement
    (80) pragmacomp_or_statement -> . statement
    (68) pppragma_directive -> . PPPRAGMA
    (69) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (72) statement -> . labeled_statement
    (73) statement -> . expression_statement
    (74) statement -> . compound_statement
    (75) statement -> . selection_statement
    (76) statement -> . iteration_statement
    (77) statement -> . jump_statement
    (78) statement -> . pppragma_directive
    (203) labeled_statement -> . ID COLON pragmacomp_or_statement
    (204) labeled_statement -> . CASE constant_expression COLON pragmacomp_or_statement
    (205) labeled_statement -> . DEFAULT COLON pragmacomp_or_statement
    (218) expression_statement -> . expression_opt SEMI
    (202) compound_statement -> . brace_open block_item_list_opt brace_close
    (206) selection_statement -> . IF LPAREN expression RPAREN pragmacomp_or_statement
    (207) selection_statement -> . IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
    (208) selection_statement -> . SWITCH LPAREN expression RPAREN pragmacomp_or_statement
    (209) iteration_statement -> . WHILE LPAREN expression RPAREN pragmacomp_or_statement
    (210) iteration_statement -> . DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI
    (211) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (212) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (213) jump_statement -> . GOTO ID SEMI
    (214) jump_statement -> . BREAK SEMI
    (215) jump_statement -> . CONTINUE SEMI
    (216) jump_statement -> . RETURN expression SEMI
    (217) jump_statement -> . RETURN SEMI
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (307) brace_open -> . LBRACE
    (309) empty -> .
    (219) expression -> . assignment_expression
    (220) expression -> . expression COMMA assignment_expression
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PPPRAGMA        shift and go to state 14
    ID              shift and go to state 163
    CASE            shift and go to state 164
    DEFAULT         shift and go to state 165
    IF              shift and go to state 167
    SWITCH          shift and go to state 170
    WHILE           shift and go to state 171
    DO              shift and go to state 172
    FOR             shift and go to state 173
    GOTO            shift and go to state 174
    BREAK           shift and go to state 175
    CONTINUE        shift and go to state 176
    RETURN          shift and go to state 177
    LBRACE          shift and go to state 101
    SEMI            reduce using rule 309 (empty -> .)
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    pragmacomp_or_statement        shift and go to state 281
    expression                     shift and go to state 169
    pppragma_directive             shift and go to state 282
    statement                      shift and go to state 283
    labeled_statement              shift and go to state 156
    expression_statement           shift and go to state 157
    compound_statement             shift and go to state 158
    selection_statement            shift and go to state 159
    iteration_statement            shift and go to state 160
    jump_statement                 shift and go to state 161
    expression_opt                 shift and go to state 166
    brace_open                     shift and go to state 106
    empty                          shift and go to state 266
    assignment_expression          shift and go to state 178
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 173

    (211) iteration_statement -> FOR . LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (212) iteration_statement -> FOR . LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement

    LPAREN          shift and go to state 284


state 174

    (213) jump_statement -> GOTO . ID SEMI

    ID              shift and go to state 285


state 175

    (214) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 286


state 176

    (215) jump_statement -> CONTINUE . SEMI

    SEMI            shift and go to state 287


state 177

    (216) jump_statement -> RETURN . expression SEMI
    (217) jump_statement -> RETURN . SEMI
    (219) expression -> . assignment_expression
    (220) expression -> . expression COMMA assignment_expression
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    SEMI            shift and go to state 289
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    expression                     shift and go to state 288
    assignment_expression          shift and go to state 178
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 178

    (219) expression -> assignment_expression .

    COMMA           reduce using rule 219 (expression -> assignment_expression .)
    SEMI            reduce using rule 219 (expression -> assignment_expression .)
    RPAREN          reduce using rule 219 (expression -> assignment_expression .)
    COLON           reduce using rule 219 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 219 (expression -> assignment_expression .)


state 179

    (222) assignment_expression -> conditional_expression .

    COMMA           reduce using rule 222 (assignment_expression -> conditional_expression .)
    SEMI            reduce using rule 222 (assignment_expression -> conditional_expression .)
    RBRACKET        reduce using rule 222 (assignment_expression -> conditional_expression .)
    RPAREN          reduce using rule 222 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 222 (assignment_expression -> conditional_expression .)
    RBRACE          reduce using rule 222 (assignment_expression -> conditional_expression .)


state 180

    (223) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (257) cast_expression -> unary_expression .
    (224) assignment_operator -> . EQUALS
    (225) assignment_operator -> . XOREQUAL
    (226) assignment_operator -> . TIMESEQUAL
    (227) assignment_operator -> . DIVEQUAL
    (228) assignment_operator -> . MODEQUAL
    (229) assignment_operator -> . PLUSEQUAL
    (230) assignment_operator -> . MINUSEQUAL
    (231) assignment_operator -> . LSHIFTEQUAL
    (232) assignment_operator -> . RSHIFTEQUAL
    (233) assignment_operator -> . ANDEQUAL
    (234) assignment_operator -> . OREQUAL

    CONDOP          reduce using rule 257 (cast_expression -> unary_expression .)
    TIMES           reduce using rule 257 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 257 (cast_expression -> unary_expression .)
    MOD             reduce using rule 257 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 257 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 257 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 257 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 257 (cast_expression -> unary_expression .)
    LT              reduce using rule 257 (cast_expression -> unary_expression .)
    LE              reduce using rule 257 (cast_expression -> unary_expression .)
    GE              reduce using rule 257 (cast_expression -> unary_expression .)
    GT              reduce using rule 257 (cast_expression -> unary_expression .)
    EQ              reduce using rule 257 (cast_expression -> unary_expression .)
    NE              reduce using rule 257 (cast_expression -> unary_expression .)
    AND             reduce using rule 257 (cast_expression -> unary_expression .)
    OR              reduce using rule 257 (cast_expression -> unary_expression .)
    XOR             reduce using rule 257 (cast_expression -> unary_expression .)
    LAND            reduce using rule 257 (cast_expression -> unary_expression .)
    LOR             reduce using rule 257 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 257 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 257 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 257 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 257 (cast_expression -> unary_expression .)
    COLON           reduce using rule 257 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 257 (cast_expression -> unary_expression .)
    EQUALS          shift and go to state 291
    XOREQUAL        shift and go to state 292
    TIMESEQUAL      shift and go to state 293
    DIVEQUAL        shift and go to state 294
    MODEQUAL        shift and go to state 295
    PLUSEQUAL       shift and go to state 296
    MINUSEQUAL      shift and go to state 297
    LSHIFTEQUAL     shift and go to state 298
    RSHIFTEQUAL     shift and go to state 299
    ANDEQUAL        shift and go to state 300
    OREQUAL         shift and go to state 301

    assignment_operator            shift and go to state 290

state 181

    (236) conditional_expression -> binary_expression .
    (237) conditional_expression -> binary_expression . CONDOP expression COLON conditional_expression
    (239) binary_expression -> binary_expression . TIMES binary_expression
    (240) binary_expression -> binary_expression . DIVIDE binary_expression
    (241) binary_expression -> binary_expression . MOD binary_expression
    (242) binary_expression -> binary_expression . PLUS binary_expression
    (243) binary_expression -> binary_expression . MINUS binary_expression
    (244) binary_expression -> binary_expression . RSHIFT binary_expression
    (245) binary_expression -> binary_expression . LSHIFT binary_expression
    (246) binary_expression -> binary_expression . LT binary_expression
    (247) binary_expression -> binary_expression . LE binary_expression
    (248) binary_expression -> binary_expression . GE binary_expression
    (249) binary_expression -> binary_expression . GT binary_expression
    (250) binary_expression -> binary_expression . EQ binary_expression
    (251) binary_expression -> binary_expression . NE binary_expression
    (252) binary_expression -> binary_expression . AND binary_expression
    (253) binary_expression -> binary_expression . OR binary_expression
    (254) binary_expression -> binary_expression . XOR binary_expression
    (255) binary_expression -> binary_expression . LAND binary_expression
    (256) binary_expression -> binary_expression . LOR binary_expression

    COMMA           reduce using rule 236 (conditional_expression -> binary_expression .)
    SEMI            reduce using rule 236 (conditional_expression -> binary_expression .)
    RBRACKET        reduce using rule 236 (conditional_expression -> binary_expression .)
    COLON           reduce using rule 236 (conditional_expression -> binary_expression .)
    RPAREN          reduce using rule 236 (conditional_expression -> binary_expression .)
    RBRACE          reduce using rule 236 (conditional_expression -> binary_expression .)
    CONDOP          shift and go to state 302
    TIMES           shift and go to state 303
    DIVIDE          shift and go to state 304
    MOD             shift and go to state 305
    PLUS            shift and go to state 306
    MINUS           shift and go to state 307
    RSHIFT          shift and go to state 308
    LSHIFT          shift and go to state 309
    LT              shift and go to state 310
    LE              shift and go to state 311
    GE              shift and go to state 312
    GT              shift and go to state 313
    EQ              shift and go to state 314
    NE              shift and go to state 315
    AND             shift and go to state 316
    OR              shift and go to state 317
    XOR             shift and go to state 318
    LAND            shift and go to state 319
    LOR             shift and go to state 320


state 182

    (259) unary_expression -> postfix_expression .
    (272) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    (273) postfix_expression -> postfix_expression . LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> postfix_expression . LPAREN RPAREN
    (275) postfix_expression -> postfix_expression . PERIOD ID
    (276) postfix_expression -> postfix_expression . PERIOD TYPEID
    (277) postfix_expression -> postfix_expression . ARROW ID
    (278) postfix_expression -> postfix_expression . ARROW TYPEID
    (279) postfix_expression -> postfix_expression . PLUSPLUS
    (280) postfix_expression -> postfix_expression . MINUSMINUS

    EQUALS          reduce using rule 259 (unary_expression -> postfix_expression .)
    XOREQUAL        reduce using rule 259 (unary_expression -> postfix_expression .)
    TIMESEQUAL      reduce using rule 259 (unary_expression -> postfix_expression .)
    DIVEQUAL        reduce using rule 259 (unary_expression -> postfix_expression .)
    MODEQUAL        reduce using rule 259 (unary_expression -> postfix_expression .)
    PLUSEQUAL       reduce using rule 259 (unary_expression -> postfix_expression .)
    MINUSEQUAL      reduce using rule 259 (unary_expression -> postfix_expression .)
    LSHIFTEQUAL     reduce using rule 259 (unary_expression -> postfix_expression .)
    RSHIFTEQUAL     reduce using rule 259 (unary_expression -> postfix_expression .)
    ANDEQUAL        reduce using rule 259 (unary_expression -> postfix_expression .)
    OREQUAL         reduce using rule 259 (unary_expression -> postfix_expression .)
    CONDOP          reduce using rule 259 (unary_expression -> postfix_expression .)
    TIMES           reduce using rule 259 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 259 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 259 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 259 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 259 (unary_expression -> postfix_expression .)
    RSHIFT          reduce using rule 259 (unary_expression -> postfix_expression .)
    LSHIFT          reduce using rule 259 (unary_expression -> postfix_expression .)
    LT              reduce using rule 259 (unary_expression -> postfix_expression .)
    LE              reduce using rule 259 (unary_expression -> postfix_expression .)
    GE              reduce using rule 259 (unary_expression -> postfix_expression .)
    GT              reduce using rule 259 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 259 (unary_expression -> postfix_expression .)
    NE              reduce using rule 259 (unary_expression -> postfix_expression .)
    AND             reduce using rule 259 (unary_expression -> postfix_expression .)
    OR              reduce using rule 259 (unary_expression -> postfix_expression .)
    XOR             reduce using rule 259 (unary_expression -> postfix_expression .)
    LAND            reduce using rule 259 (unary_expression -> postfix_expression .)
    LOR             reduce using rule 259 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 259 (unary_expression -> postfix_expression .)
    SEMI            reduce using rule 259 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 259 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 259 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 259 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 259 (unary_expression -> postfix_expression .)
    LBRACKET        shift and go to state 321
    LPAREN          shift and go to state 322
    PERIOD          shift and go to state 323
    ARROW           shift and go to state 324
    PLUSPLUS        shift and go to state 325
    MINUSMINUS      shift and go to state 326


state 183

    (260) unary_expression -> PLUSPLUS . unary_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 328
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    unary_expression               shift and go to state 327
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 184

    (261) unary_expression -> MINUSMINUS . unary_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 328
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    unary_expression               shift and go to state 329
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 185

    (262) unary_expression -> unary_operator . cast_expression
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 271
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 330
    unary_expression               shift and go to state 270
    postfix_expression             shift and go to state 182
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 186

    (238) binary_expression -> cast_expression .

    CONDOP          reduce using rule 238 (binary_expression -> cast_expression .)
    TIMES           reduce using rule 238 (binary_expression -> cast_expression .)
    DIVIDE          reduce using rule 238 (binary_expression -> cast_expression .)
    MOD             reduce using rule 238 (binary_expression -> cast_expression .)
    PLUS            reduce using rule 238 (binary_expression -> cast_expression .)
    MINUS           reduce using rule 238 (binary_expression -> cast_expression .)
    RSHIFT          reduce using rule 238 (binary_expression -> cast_expression .)
    LSHIFT          reduce using rule 238 (binary_expression -> cast_expression .)
    LT              reduce using rule 238 (binary_expression -> cast_expression .)
    LE              reduce using rule 238 (binary_expression -> cast_expression .)
    GE              reduce using rule 238 (binary_expression -> cast_expression .)
    GT              reduce using rule 238 (binary_expression -> cast_expression .)
    EQ              reduce using rule 238 (binary_expression -> cast_expression .)
    NE              reduce using rule 238 (binary_expression -> cast_expression .)
    AND             reduce using rule 238 (binary_expression -> cast_expression .)
    OR              reduce using rule 238 (binary_expression -> cast_expression .)
    XOR             reduce using rule 238 (binary_expression -> cast_expression .)
    LAND            reduce using rule 238 (binary_expression -> cast_expression .)
    LOR             reduce using rule 238 (binary_expression -> cast_expression .)
    COMMA           reduce using rule 238 (binary_expression -> cast_expression .)
    SEMI            reduce using rule 238 (binary_expression -> cast_expression .)
    RBRACKET        reduce using rule 238 (binary_expression -> cast_expression .)
    COLON           reduce using rule 238 (binary_expression -> cast_expression .)
    RPAREN          reduce using rule 238 (binary_expression -> cast_expression .)
    RBRACE          reduce using rule 238 (binary_expression -> cast_expression .)


state 187

    (263) unary_expression -> SIZEOF . unary_expression
    (264) unary_expression -> SIZEOF . LPAREN type_name RPAREN
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 332
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    unary_expression               shift and go to state 331
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 188

    (266) unary_operator -> TIMES .

    LPAREN          reduce using rule 266 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 266 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 266 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 266 (unary_operator -> TIMES .)
    AND             reduce using rule 266 (unary_operator -> TIMES .)
    TIMES           reduce using rule 266 (unary_operator -> TIMES .)
    PLUS            reduce using rule 266 (unary_operator -> TIMES .)
    MINUS           reduce using rule 266 (unary_operator -> TIMES .)
    NOT             reduce using rule 266 (unary_operator -> TIMES .)
    LNOT            reduce using rule 266 (unary_operator -> TIMES .)
    OFFSETOF        reduce using rule 266 (unary_operator -> TIMES .)
    ID              reduce using rule 266 (unary_operator -> TIMES .)
    INT_CONST_DEC   reduce using rule 266 (unary_operator -> TIMES .)
    INT_CONST_OCT   reduce using rule 266 (unary_operator -> TIMES .)
    INT_CONST_HEX   reduce using rule 266 (unary_operator -> TIMES .)
    INT_CONST_BIN   reduce using rule 266 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 266 (unary_operator -> TIMES .)
    HEX_FLOAT_CONST reduce using rule 266 (unary_operator -> TIMES .)
    CHAR_CONST      reduce using rule 266 (unary_operator -> TIMES .)
    WCHAR_CONST     reduce using rule 266 (unary_operator -> TIMES .)
    STRING_LITERAL  reduce using rule 266 (unary_operator -> TIMES .)
    WSTRING_LITERAL reduce using rule 266 (unary_operator -> TIMES .)


state 189

    (267) unary_operator -> PLUS .

    LPAREN          reduce using rule 267 (unary_operator -> PLUS .)
    PLUSPLUS        reduce using rule 267 (unary_operator -> PLUS .)
    MINUSMINUS      reduce using rule 267 (unary_operator -> PLUS .)
    SIZEOF          reduce using rule 267 (unary_operator -> PLUS .)
    AND             reduce using rule 267 (unary_operator -> PLUS .)
    TIMES           reduce using rule 267 (unary_operator -> PLUS .)
    PLUS            reduce using rule 267 (unary_operator -> PLUS .)
    MINUS           reduce using rule 267 (unary_operator -> PLUS .)
    NOT             reduce using rule 267 (unary_operator -> PLUS .)
    LNOT            reduce using rule 267 (unary_operator -> PLUS .)
    OFFSETOF        reduce using rule 267 (unary_operator -> PLUS .)
    ID              reduce using rule 267 (unary_operator -> PLUS .)
    INT_CONST_DEC   reduce using rule 267 (unary_operator -> PLUS .)
    INT_CONST_OCT   reduce using rule 267 (unary_operator -> PLUS .)
    INT_CONST_HEX   reduce using rule 267 (unary_operator -> PLUS .)
    INT_CONST_BIN   reduce using rule 267 (unary_operator -> PLUS .)
    FLOAT_CONST     reduce using rule 267 (unary_operator -> PLUS .)
    HEX_FLOAT_CONST reduce using rule 267 (unary_operator -> PLUS .)
    CHAR_CONST      reduce using rule 267 (unary_operator -> PLUS .)
    WCHAR_CONST     reduce using rule 267 (unary_operator -> PLUS .)
    STRING_LITERAL  reduce using rule 267 (unary_operator -> PLUS .)
    WSTRING_LITERAL reduce using rule 267 (unary_operator -> PLUS .)


state 190

    (268) unary_operator -> MINUS .

    LPAREN          reduce using rule 268 (unary_operator -> MINUS .)
    PLUSPLUS        reduce using rule 268 (unary_operator -> MINUS .)
    MINUSMINUS      reduce using rule 268 (unary_operator -> MINUS .)
    SIZEOF          reduce using rule 268 (unary_operator -> MINUS .)
    AND             reduce using rule 268 (unary_operator -> MINUS .)
    TIMES           reduce using rule 268 (unary_operator -> MINUS .)
    PLUS            reduce using rule 268 (unary_operator -> MINUS .)
    MINUS           reduce using rule 268 (unary_operator -> MINUS .)
    NOT             reduce using rule 268 (unary_operator -> MINUS .)
    LNOT            reduce using rule 268 (unary_operator -> MINUS .)
    OFFSETOF        reduce using rule 268 (unary_operator -> MINUS .)
    ID              reduce using rule 268 (unary_operator -> MINUS .)
    INT_CONST_DEC   reduce using rule 268 (unary_operator -> MINUS .)
    INT_CONST_OCT   reduce using rule 268 (unary_operator -> MINUS .)
    INT_CONST_HEX   reduce using rule 268 (unary_operator -> MINUS .)
    INT_CONST_BIN   reduce using rule 268 (unary_operator -> MINUS .)
    FLOAT_CONST     reduce using rule 268 (unary_operator -> MINUS .)
    HEX_FLOAT_CONST reduce using rule 268 (unary_operator -> MINUS .)
    CHAR_CONST      reduce using rule 268 (unary_operator -> MINUS .)
    WCHAR_CONST     reduce using rule 268 (unary_operator -> MINUS .)
    STRING_LITERAL  reduce using rule 268 (unary_operator -> MINUS .)
    WSTRING_LITERAL reduce using rule 268 (unary_operator -> MINUS .)


state 191

    (265) unary_operator -> AND .

    LPAREN          reduce using rule 265 (unary_operator -> AND .)
    PLUSPLUS        reduce using rule 265 (unary_operator -> AND .)
    MINUSMINUS      reduce using rule 265 (unary_operator -> AND .)
    SIZEOF          reduce using rule 265 (unary_operator -> AND .)
    AND             reduce using rule 265 (unary_operator -> AND .)
    TIMES           reduce using rule 265 (unary_operator -> AND .)
    PLUS            reduce using rule 265 (unary_operator -> AND .)
    MINUS           reduce using rule 265 (unary_operator -> AND .)
    NOT             reduce using rule 265 (unary_operator -> AND .)
    LNOT            reduce using rule 265 (unary_operator -> AND .)
    OFFSETOF        reduce using rule 265 (unary_operator -> AND .)
    ID              reduce using rule 265 (unary_operator -> AND .)
    INT_CONST_DEC   reduce using rule 265 (unary_operator -> AND .)
    INT_CONST_OCT   reduce using rule 265 (unary_operator -> AND .)
    INT_CONST_HEX   reduce using rule 265 (unary_operator -> AND .)
    INT_CONST_BIN   reduce using rule 265 (unary_operator -> AND .)
    FLOAT_CONST     reduce using rule 265 (unary_operator -> AND .)
    HEX_FLOAT_CONST reduce using rule 265 (unary_operator -> AND .)
    CHAR_CONST      reduce using rule 265 (unary_operator -> AND .)
    WCHAR_CONST     reduce using rule 265 (unary_operator -> AND .)
    STRING_LITERAL  reduce using rule 265 (unary_operator -> AND .)
    WSTRING_LITERAL reduce using rule 265 (unary_operator -> AND .)


state 192

    (271) postfix_expression -> primary_expression .

    LBRACKET        reduce using rule 271 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 271 (postfix_expression -> primary_expression .)
    PERIOD          reduce using rule 271 (postfix_expression -> primary_expression .)
    ARROW           reduce using rule 271 (postfix_expression -> primary_expression .)
    PLUSPLUS        reduce using rule 271 (postfix_expression -> primary_expression .)
    MINUSMINUS      reduce using rule 271 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 271 (postfix_expression -> primary_expression .)
    XOREQUAL        reduce using rule 271 (postfix_expression -> primary_expression .)
    TIMESEQUAL      reduce using rule 271 (postfix_expression -> primary_expression .)
    DIVEQUAL        reduce using rule 271 (postfix_expression -> primary_expression .)
    MODEQUAL        reduce using rule 271 (postfix_expression -> primary_expression .)
    PLUSEQUAL       reduce using rule 271 (postfix_expression -> primary_expression .)
    MINUSEQUAL      reduce using rule 271 (postfix_expression -> primary_expression .)
    LSHIFTEQUAL     reduce using rule 271 (postfix_expression -> primary_expression .)
    RSHIFTEQUAL     reduce using rule 271 (postfix_expression -> primary_expression .)
    ANDEQUAL        reduce using rule 271 (postfix_expression -> primary_expression .)
    OREQUAL         reduce using rule 271 (postfix_expression -> primary_expression .)
    CONDOP          reduce using rule 271 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 271 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 271 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 271 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 271 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 271 (postfix_expression -> primary_expression .)
    RSHIFT          reduce using rule 271 (postfix_expression -> primary_expression .)
    LSHIFT          reduce using rule 271 (postfix_expression -> primary_expression .)
    LT              reduce using rule 271 (postfix_expression -> primary_expression .)
    LE              reduce using rule 271 (postfix_expression -> primary_expression .)
    GE              reduce using rule 271 (postfix_expression -> primary_expression .)
    GT              reduce using rule 271 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 271 (postfix_expression -> primary_expression .)
    NE              reduce using rule 271 (postfix_expression -> primary_expression .)
    AND             reduce using rule 271 (postfix_expression -> primary_expression .)
    OR              reduce using rule 271 (postfix_expression -> primary_expression .)
    XOR             reduce using rule 271 (postfix_expression -> primary_expression .)
    LAND            reduce using rule 271 (postfix_expression -> primary_expression .)
    LOR             reduce using rule 271 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 271 (postfix_expression -> primary_expression .)
    SEMI            reduce using rule 271 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 271 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 271 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 271 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 271 (postfix_expression -> primary_expression .)


state 193

    (269) unary_operator -> NOT .

    LPAREN          reduce using rule 269 (unary_operator -> NOT .)
    PLUSPLUS        reduce using rule 269 (unary_operator -> NOT .)
    MINUSMINUS      reduce using rule 269 (unary_operator -> NOT .)
    SIZEOF          reduce using rule 269 (unary_operator -> NOT .)
    AND             reduce using rule 269 (unary_operator -> NOT .)
    TIMES           reduce using rule 269 (unary_operator -> NOT .)
    PLUS            reduce using rule 269 (unary_operator -> NOT .)
    MINUS           reduce using rule 269 (unary_operator -> NOT .)
    NOT             reduce using rule 269 (unary_operator -> NOT .)
    LNOT            reduce using rule 269 (unary_operator -> NOT .)
    OFFSETOF        reduce using rule 269 (unary_operator -> NOT .)
    ID              reduce using rule 269 (unary_operator -> NOT .)
    INT_CONST_DEC   reduce using rule 269 (unary_operator -> NOT .)
    INT_CONST_OCT   reduce using rule 269 (unary_operator -> NOT .)
    INT_CONST_HEX   reduce using rule 269 (unary_operator -> NOT .)
    INT_CONST_BIN   reduce using rule 269 (unary_operator -> NOT .)
    FLOAT_CONST     reduce using rule 269 (unary_operator -> NOT .)
    HEX_FLOAT_CONST reduce using rule 269 (unary_operator -> NOT .)
    CHAR_CONST      reduce using rule 269 (unary_operator -> NOT .)
    WCHAR_CONST     reduce using rule 269 (unary_operator -> NOT .)
    STRING_LITERAL  reduce using rule 269 (unary_operator -> NOT .)
    WSTRING_LITERAL reduce using rule 269 (unary_operator -> NOT .)


state 194

    (270) unary_operator -> LNOT .

    LPAREN          reduce using rule 270 (unary_operator -> LNOT .)
    PLUSPLUS        reduce using rule 270 (unary_operator -> LNOT .)
    MINUSMINUS      reduce using rule 270 (unary_operator -> LNOT .)
    SIZEOF          reduce using rule 270 (unary_operator -> LNOT .)
    AND             reduce using rule 270 (unary_operator -> LNOT .)
    TIMES           reduce using rule 270 (unary_operator -> LNOT .)
    PLUS            reduce using rule 270 (unary_operator -> LNOT .)
    MINUS           reduce using rule 270 (unary_operator -> LNOT .)
    NOT             reduce using rule 270 (unary_operator -> LNOT .)
    LNOT            reduce using rule 270 (unary_operator -> LNOT .)
    OFFSETOF        reduce using rule 270 (unary_operator -> LNOT .)
    ID              reduce using rule 270 (unary_operator -> LNOT .)
    INT_CONST_DEC   reduce using rule 270 (unary_operator -> LNOT .)
    INT_CONST_OCT   reduce using rule 270 (unary_operator -> LNOT .)
    INT_CONST_HEX   reduce using rule 270 (unary_operator -> LNOT .)
    INT_CONST_BIN   reduce using rule 270 (unary_operator -> LNOT .)
    FLOAT_CONST     reduce using rule 270 (unary_operator -> LNOT .)
    HEX_FLOAT_CONST reduce using rule 270 (unary_operator -> LNOT .)
    CHAR_CONST      reduce using rule 270 (unary_operator -> LNOT .)
    WCHAR_CONST     reduce using rule 270 (unary_operator -> LNOT .)
    STRING_LITERAL  reduce using rule 270 (unary_operator -> LNOT .)
    WSTRING_LITERAL reduce using rule 270 (unary_operator -> LNOT .)


state 195

    (283) primary_expression -> identifier .

    LBRACKET        reduce using rule 283 (primary_expression -> identifier .)
    LPAREN          reduce using rule 283 (primary_expression -> identifier .)
    PERIOD          reduce using rule 283 (primary_expression -> identifier .)
    ARROW           reduce using rule 283 (primary_expression -> identifier .)
    PLUSPLUS        reduce using rule 283 (primary_expression -> identifier .)
    MINUSMINUS      reduce using rule 283 (primary_expression -> identifier .)
    EQUALS          reduce using rule 283 (primary_expression -> identifier .)
    XOREQUAL        reduce using rule 283 (primary_expression -> identifier .)
    TIMESEQUAL      reduce using rule 283 (primary_expression -> identifier .)
    DIVEQUAL        reduce using rule 283 (primary_expression -> identifier .)
    MODEQUAL        reduce using rule 283 (primary_expression -> identifier .)
    PLUSEQUAL       reduce using rule 283 (primary_expression -> identifier .)
    MINUSEQUAL      reduce using rule 283 (primary_expression -> identifier .)
    LSHIFTEQUAL     reduce using rule 283 (primary_expression -> identifier .)
    RSHIFTEQUAL     reduce using rule 283 (primary_expression -> identifier .)
    ANDEQUAL        reduce using rule 283 (primary_expression -> identifier .)
    OREQUAL         reduce using rule 283 (primary_expression -> identifier .)
    CONDOP          reduce using rule 283 (primary_expression -> identifier .)
    TIMES           reduce using rule 283 (primary_expression -> identifier .)
    DIVIDE          reduce using rule 283 (primary_expression -> identifier .)
    MOD             reduce using rule 283 (primary_expression -> identifier .)
    PLUS            reduce using rule 283 (primary_expression -> identifier .)
    MINUS           reduce using rule 283 (primary_expression -> identifier .)
    RSHIFT          reduce using rule 283 (primary_expression -> identifier .)
    LSHIFT          reduce using rule 283 (primary_expression -> identifier .)
    LT              reduce using rule 283 (primary_expression -> identifier .)
    LE              reduce using rule 283 (primary_expression -> identifier .)
    GE              reduce using rule 283 (primary_expression -> identifier .)
    GT              reduce using rule 283 (primary_expression -> identifier .)
    EQ              reduce using rule 283 (primary_expression -> identifier .)
    NE              reduce using rule 283 (primary_expression -> identifier .)
    AND             reduce using rule 283 (primary_expression -> identifier .)
    OR              reduce using rule 283 (primary_expression -> identifier .)
    XOR             reduce using rule 283 (primary_expression -> identifier .)
    LAND            reduce using rule 283 (primary_expression -> identifier .)
    LOR             reduce using rule 283 (primary_expression -> identifier .)
    COMMA           reduce using rule 283 (primary_expression -> identifier .)
    SEMI            reduce using rule 283 (primary_expression -> identifier .)
    RBRACKET        reduce using rule 283 (primary_expression -> identifier .)
    COLON           reduce using rule 283 (primary_expression -> identifier .)
    RPAREN          reduce using rule 283 (primary_expression -> identifier .)
    RBRACE          reduce using rule 283 (primary_expression -> identifier .)


state 196

    (284) primary_expression -> constant .

    LBRACKET        reduce using rule 284 (primary_expression -> constant .)
    LPAREN          reduce using rule 284 (primary_expression -> constant .)
    PERIOD          reduce using rule 284 (primary_expression -> constant .)
    ARROW           reduce using rule 284 (primary_expression -> constant .)
    PLUSPLUS        reduce using rule 284 (primary_expression -> constant .)
    MINUSMINUS      reduce using rule 284 (primary_expression -> constant .)
    EQUALS          reduce using rule 284 (primary_expression -> constant .)
    XOREQUAL        reduce using rule 284 (primary_expression -> constant .)
    TIMESEQUAL      reduce using rule 284 (primary_expression -> constant .)
    DIVEQUAL        reduce using rule 284 (primary_expression -> constant .)
    MODEQUAL        reduce using rule 284 (primary_expression -> constant .)
    PLUSEQUAL       reduce using rule 284 (primary_expression -> constant .)
    MINUSEQUAL      reduce using rule 284 (primary_expression -> constant .)
    LSHIFTEQUAL     reduce using rule 284 (primary_expression -> constant .)
    RSHIFTEQUAL     reduce using rule 284 (primary_expression -> constant .)
    ANDEQUAL        reduce using rule 284 (primary_expression -> constant .)
    OREQUAL         reduce using rule 284 (primary_expression -> constant .)
    CONDOP          reduce using rule 284 (primary_expression -> constant .)
    TIMES           reduce using rule 284 (primary_expression -> constant .)
    DIVIDE          reduce using rule 284 (primary_expression -> constant .)
    MOD             reduce using rule 284 (primary_expression -> constant .)
    PLUS            reduce using rule 284 (primary_expression -> constant .)
    MINUS           reduce using rule 284 (primary_expression -> constant .)
    RSHIFT          reduce using rule 284 (primary_expression -> constant .)
    LSHIFT          reduce using rule 284 (primary_expression -> constant .)
    LT              reduce using rule 284 (primary_expression -> constant .)
    LE              reduce using rule 284 (primary_expression -> constant .)
    GE              reduce using rule 284 (primary_expression -> constant .)
    GT              reduce using rule 284 (primary_expression -> constant .)
    EQ              reduce using rule 284 (primary_expression -> constant .)
    NE              reduce using rule 284 (primary_expression -> constant .)
    AND             reduce using rule 284 (primary_expression -> constant .)
    OR              reduce using rule 284 (primary_expression -> constant .)
    XOR             reduce using rule 284 (primary_expression -> constant .)
    LAND            reduce using rule 284 (primary_expression -> constant .)
    LOR             reduce using rule 284 (primary_expression -> constant .)
    COMMA           reduce using rule 284 (primary_expression -> constant .)
    SEMI            reduce using rule 284 (primary_expression -> constant .)
    RBRACKET        reduce using rule 284 (primary_expression -> constant .)
    COLON           reduce using rule 284 (primary_expression -> constant .)
    RPAREN          reduce using rule 284 (primary_expression -> constant .)
    RBRACE          reduce using rule 284 (primary_expression -> constant .)


state 197

    (285) primary_expression -> unified_string_literal .
    (304) unified_string_literal -> unified_string_literal . STRING_LITERAL

    LBRACKET        reduce using rule 285 (primary_expression -> unified_string_literal .)
    LPAREN          reduce using rule 285 (primary_expression -> unified_string_literal .)
    PERIOD          reduce using rule 285 (primary_expression -> unified_string_literal .)
    ARROW           reduce using rule 285 (primary_expression -> unified_string_literal .)
    PLUSPLUS        reduce using rule 285 (primary_expression -> unified_string_literal .)
    MINUSMINUS      reduce using rule 285 (primary_expression -> unified_string_literal .)
    EQUALS          reduce using rule 285 (primary_expression -> unified_string_literal .)
    XOREQUAL        reduce using rule 285 (primary_expression -> unified_string_literal .)
    TIMESEQUAL      reduce using rule 285 (primary_expression -> unified_string_literal .)
    DIVEQUAL        reduce using rule 285 (primary_expression -> unified_string_literal .)
    MODEQUAL        reduce using rule 285 (primary_expression -> unified_string_literal .)
    PLUSEQUAL       reduce using rule 285 (primary_expression -> unified_string_literal .)
    MINUSEQUAL      reduce using rule 285 (primary_expression -> unified_string_literal .)
    LSHIFTEQUAL     reduce using rule 285 (primary_expression -> unified_string_literal .)
    RSHIFTEQUAL     reduce using rule 285 (primary_expression -> unified_string_literal .)
    ANDEQUAL        reduce using rule 285 (primary_expression -> unified_string_literal .)
    OREQUAL         reduce using rule 285 (primary_expression -> unified_string_literal .)
    CONDOP          reduce using rule 285 (primary_expression -> unified_string_literal .)
    TIMES           reduce using rule 285 (primary_expression -> unified_string_literal .)
    DIVIDE          reduce using rule 285 (primary_expression -> unified_string_literal .)
    MOD             reduce using rule 285 (primary_expression -> unified_string_literal .)
    PLUS            reduce using rule 285 (primary_expression -> unified_string_literal .)
    MINUS           reduce using rule 285 (primary_expression -> unified_string_literal .)
    RSHIFT          reduce using rule 285 (primary_expression -> unified_string_literal .)
    LSHIFT          reduce using rule 285 (primary_expression -> unified_string_literal .)
    LT              reduce using rule 285 (primary_expression -> unified_string_literal .)
    LE              reduce using rule 285 (primary_expression -> unified_string_literal .)
    GE              reduce using rule 285 (primary_expression -> unified_string_literal .)
    GT              reduce using rule 285 (primary_expression -> unified_string_literal .)
    EQ              reduce using rule 285 (primary_expression -> unified_string_literal .)
    NE              reduce using rule 285 (primary_expression -> unified_string_literal .)
    AND             reduce using rule 285 (primary_expression -> unified_string_literal .)
    OR              reduce using rule 285 (primary_expression -> unified_string_literal .)
    XOR             reduce using rule 285 (primary_expression -> unified_string_literal .)
    LAND            reduce using rule 285 (primary_expression -> unified_string_literal .)
    LOR             reduce using rule 285 (primary_expression -> unified_string_literal .)
    COMMA           reduce using rule 285 (primary_expression -> unified_string_literal .)
    SEMI            reduce using rule 285 (primary_expression -> unified_string_literal .)
    RBRACKET        reduce using rule 285 (primary_expression -> unified_string_literal .)
    COLON           reduce using rule 285 (primary_expression -> unified_string_literal .)
    RPAREN          reduce using rule 285 (primary_expression -> unified_string_literal .)
    RBRACE          reduce using rule 285 (primary_expression -> unified_string_literal .)
    STRING_LITERAL  shift and go to state 333


state 198

    (286) primary_expression -> unified_wstring_literal .
    (306) unified_wstring_literal -> unified_wstring_literal . WSTRING_LITERAL

    LBRACKET        reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    LPAREN          reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    PERIOD          reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    ARROW           reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    PLUSPLUS        reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    MINUSMINUS      reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    EQUALS          reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    XOREQUAL        reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    TIMESEQUAL      reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    DIVEQUAL        reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    MODEQUAL        reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    PLUSEQUAL       reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    MINUSEQUAL      reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    LSHIFTEQUAL     reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    RSHIFTEQUAL     reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    ANDEQUAL        reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    OREQUAL         reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    CONDOP          reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    TIMES           reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    DIVIDE          reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    MOD             reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    PLUS            reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    MINUS           reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    RSHIFT          reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    LSHIFT          reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    LT              reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    LE              reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    GE              reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    GT              reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    EQ              reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    NE              reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    AND             reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    OR              reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    XOR             reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    LAND            reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    LOR             reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    COMMA           reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    SEMI            reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    RBRACKET        reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    COLON           reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    RPAREN          reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    RBRACE          reduce using rule 286 (primary_expression -> unified_wstring_literal .)
    WSTRING_LITERAL shift and go to state 334


state 199

    (288) primary_expression -> OFFSETOF . LPAREN type_name COMMA offsetof_member_designator RPAREN

    LPAREN          shift and go to state 335


state 200

    (295) constant -> INT_CONST_DEC .

    LBRACKET        reduce using rule 295 (constant -> INT_CONST_DEC .)
    LPAREN          reduce using rule 295 (constant -> INT_CONST_DEC .)
    PERIOD          reduce using rule 295 (constant -> INT_CONST_DEC .)
    ARROW           reduce using rule 295 (constant -> INT_CONST_DEC .)
    PLUSPLUS        reduce using rule 295 (constant -> INT_CONST_DEC .)
    MINUSMINUS      reduce using rule 295 (constant -> INT_CONST_DEC .)
    EQUALS          reduce using rule 295 (constant -> INT_CONST_DEC .)
    XOREQUAL        reduce using rule 295 (constant -> INT_CONST_DEC .)
    TIMESEQUAL      reduce using rule 295 (constant -> INT_CONST_DEC .)
    DIVEQUAL        reduce using rule 295 (constant -> INT_CONST_DEC .)
    MODEQUAL        reduce using rule 295 (constant -> INT_CONST_DEC .)
    PLUSEQUAL       reduce using rule 295 (constant -> INT_CONST_DEC .)
    MINUSEQUAL      reduce using rule 295 (constant -> INT_CONST_DEC .)
    LSHIFTEQUAL     reduce using rule 295 (constant -> INT_CONST_DEC .)
    RSHIFTEQUAL     reduce using rule 295 (constant -> INT_CONST_DEC .)
    ANDEQUAL        reduce using rule 295 (constant -> INT_CONST_DEC .)
    OREQUAL         reduce using rule 295 (constant -> INT_CONST_DEC .)
    CONDOP          reduce using rule 295 (constant -> INT_CONST_DEC .)
    TIMES           reduce using rule 295 (constant -> INT_CONST_DEC .)
    DIVIDE          reduce using rule 295 (constant -> INT_CONST_DEC .)
    MOD             reduce using rule 295 (constant -> INT_CONST_DEC .)
    PLUS            reduce using rule 295 (constant -> INT_CONST_DEC .)
    MINUS           reduce using rule 295 (constant -> INT_CONST_DEC .)
    RSHIFT          reduce using rule 295 (constant -> INT_CONST_DEC .)
    LSHIFT          reduce using rule 295 (constant -> INT_CONST_DEC .)
    LT              reduce using rule 295 (constant -> INT_CONST_DEC .)
    LE              reduce using rule 295 (constant -> INT_CONST_DEC .)
    GE              reduce using rule 295 (constant -> INT_CONST_DEC .)
    GT              reduce using rule 295 (constant -> INT_CONST_DEC .)
    EQ              reduce using rule 295 (constant -> INT_CONST_DEC .)
    NE              reduce using rule 295 (constant -> INT_CONST_DEC .)
    AND             reduce using rule 295 (constant -> INT_CONST_DEC .)
    OR              reduce using rule 295 (constant -> INT_CONST_DEC .)
    XOR             reduce using rule 295 (constant -> INT_CONST_DEC .)
    LAND            reduce using rule 295 (constant -> INT_CONST_DEC .)
    LOR             reduce using rule 295 (constant -> INT_CONST_DEC .)
    COMMA           reduce using rule 295 (constant -> INT_CONST_DEC .)
    SEMI            reduce using rule 295 (constant -> INT_CONST_DEC .)
    RBRACKET        reduce using rule 295 (constant -> INT_CONST_DEC .)
    COLON           reduce using rule 295 (constant -> INT_CONST_DEC .)
    RPAREN          reduce using rule 295 (constant -> INT_CONST_DEC .)
    RBRACE          reduce using rule 295 (constant -> INT_CONST_DEC .)


state 201

    (296) constant -> INT_CONST_OCT .

    LBRACKET        reduce using rule 296 (constant -> INT_CONST_OCT .)
    LPAREN          reduce using rule 296 (constant -> INT_CONST_OCT .)
    PERIOD          reduce using rule 296 (constant -> INT_CONST_OCT .)
    ARROW           reduce using rule 296 (constant -> INT_CONST_OCT .)
    PLUSPLUS        reduce using rule 296 (constant -> INT_CONST_OCT .)
    MINUSMINUS      reduce using rule 296 (constant -> INT_CONST_OCT .)
    EQUALS          reduce using rule 296 (constant -> INT_CONST_OCT .)
    XOREQUAL        reduce using rule 296 (constant -> INT_CONST_OCT .)
    TIMESEQUAL      reduce using rule 296 (constant -> INT_CONST_OCT .)
    DIVEQUAL        reduce using rule 296 (constant -> INT_CONST_OCT .)
    MODEQUAL        reduce using rule 296 (constant -> INT_CONST_OCT .)
    PLUSEQUAL       reduce using rule 296 (constant -> INT_CONST_OCT .)
    MINUSEQUAL      reduce using rule 296 (constant -> INT_CONST_OCT .)
    LSHIFTEQUAL     reduce using rule 296 (constant -> INT_CONST_OCT .)
    RSHIFTEQUAL     reduce using rule 296 (constant -> INT_CONST_OCT .)
    ANDEQUAL        reduce using rule 296 (constant -> INT_CONST_OCT .)
    OREQUAL         reduce using rule 296 (constant -> INT_CONST_OCT .)
    CONDOP          reduce using rule 296 (constant -> INT_CONST_OCT .)
    TIMES           reduce using rule 296 (constant -> INT_CONST_OCT .)
    DIVIDE          reduce using rule 296 (constant -> INT_CONST_OCT .)
    MOD             reduce using rule 296 (constant -> INT_CONST_OCT .)
    PLUS            reduce using rule 296 (constant -> INT_CONST_OCT .)
    MINUS           reduce using rule 296 (constant -> INT_CONST_OCT .)
    RSHIFT          reduce using rule 296 (constant -> INT_CONST_OCT .)
    LSHIFT          reduce using rule 296 (constant -> INT_CONST_OCT .)
    LT              reduce using rule 296 (constant -> INT_CONST_OCT .)
    LE              reduce using rule 296 (constant -> INT_CONST_OCT .)
    GE              reduce using rule 296 (constant -> INT_CONST_OCT .)
    GT              reduce using rule 296 (constant -> INT_CONST_OCT .)
    EQ              reduce using rule 296 (constant -> INT_CONST_OCT .)
    NE              reduce using rule 296 (constant -> INT_CONST_OCT .)
    AND             reduce using rule 296 (constant -> INT_CONST_OCT .)
    OR              reduce using rule 296 (constant -> INT_CONST_OCT .)
    XOR             reduce using rule 296 (constant -> INT_CONST_OCT .)
    LAND            reduce using rule 296 (constant -> INT_CONST_OCT .)
    LOR             reduce using rule 296 (constant -> INT_CONST_OCT .)
    COMMA           reduce using rule 296 (constant -> INT_CONST_OCT .)
    SEMI            reduce using rule 296 (constant -> INT_CONST_OCT .)
    RBRACKET        reduce using rule 296 (constant -> INT_CONST_OCT .)
    COLON           reduce using rule 296 (constant -> INT_CONST_OCT .)
    RPAREN          reduce using rule 296 (constant -> INT_CONST_OCT .)
    RBRACE          reduce using rule 296 (constant -> INT_CONST_OCT .)


state 202

    (297) constant -> INT_CONST_HEX .

    LBRACKET        reduce using rule 297 (constant -> INT_CONST_HEX .)
    LPAREN          reduce using rule 297 (constant -> INT_CONST_HEX .)
    PERIOD          reduce using rule 297 (constant -> INT_CONST_HEX .)
    ARROW           reduce using rule 297 (constant -> INT_CONST_HEX .)
    PLUSPLUS        reduce using rule 297 (constant -> INT_CONST_HEX .)
    MINUSMINUS      reduce using rule 297 (constant -> INT_CONST_HEX .)
    EQUALS          reduce using rule 297 (constant -> INT_CONST_HEX .)
    XOREQUAL        reduce using rule 297 (constant -> INT_CONST_HEX .)
    TIMESEQUAL      reduce using rule 297 (constant -> INT_CONST_HEX .)
    DIVEQUAL        reduce using rule 297 (constant -> INT_CONST_HEX .)
    MODEQUAL        reduce using rule 297 (constant -> INT_CONST_HEX .)
    PLUSEQUAL       reduce using rule 297 (constant -> INT_CONST_HEX .)
    MINUSEQUAL      reduce using rule 297 (constant -> INT_CONST_HEX .)
    LSHIFTEQUAL     reduce using rule 297 (constant -> INT_CONST_HEX .)
    RSHIFTEQUAL     reduce using rule 297 (constant -> INT_CONST_HEX .)
    ANDEQUAL        reduce using rule 297 (constant -> INT_CONST_HEX .)
    OREQUAL         reduce using rule 297 (constant -> INT_CONST_HEX .)
    CONDOP          reduce using rule 297 (constant -> INT_CONST_HEX .)
    TIMES           reduce using rule 297 (constant -> INT_CONST_HEX .)
    DIVIDE          reduce using rule 297 (constant -> INT_CONST_HEX .)
    MOD             reduce using rule 297 (constant -> INT_CONST_HEX .)
    PLUS            reduce using rule 297 (constant -> INT_CONST_HEX .)
    MINUS           reduce using rule 297 (constant -> INT_CONST_HEX .)
    RSHIFT          reduce using rule 297 (constant -> INT_CONST_HEX .)
    LSHIFT          reduce using rule 297 (constant -> INT_CONST_HEX .)
    LT              reduce using rule 297 (constant -> INT_CONST_HEX .)
    LE              reduce using rule 297 (constant -> INT_CONST_HEX .)
    GE              reduce using rule 297 (constant -> INT_CONST_HEX .)
    GT              reduce using rule 297 (constant -> INT_CONST_HEX .)
    EQ              reduce using rule 297 (constant -> INT_CONST_HEX .)
    NE              reduce using rule 297 (constant -> INT_CONST_HEX .)
    AND             reduce using rule 297 (constant -> INT_CONST_HEX .)
    OR              reduce using rule 297 (constant -> INT_CONST_HEX .)
    XOR             reduce using rule 297 (constant -> INT_CONST_HEX .)
    LAND            reduce using rule 297 (constant -> INT_CONST_HEX .)
    LOR             reduce using rule 297 (constant -> INT_CONST_HEX .)
    COMMA           reduce using rule 297 (constant -> INT_CONST_HEX .)
    SEMI            reduce using rule 297 (constant -> INT_CONST_HEX .)
    RBRACKET        reduce using rule 297 (constant -> INT_CONST_HEX .)
    COLON           reduce using rule 297 (constant -> INT_CONST_HEX .)
    RPAREN          reduce using rule 297 (constant -> INT_CONST_HEX .)
    RBRACE          reduce using rule 297 (constant -> INT_CONST_HEX .)


state 203

    (298) constant -> INT_CONST_BIN .

    LBRACKET        reduce using rule 298 (constant -> INT_CONST_BIN .)
    LPAREN          reduce using rule 298 (constant -> INT_CONST_BIN .)
    PERIOD          reduce using rule 298 (constant -> INT_CONST_BIN .)
    ARROW           reduce using rule 298 (constant -> INT_CONST_BIN .)
    PLUSPLUS        reduce using rule 298 (constant -> INT_CONST_BIN .)
    MINUSMINUS      reduce using rule 298 (constant -> INT_CONST_BIN .)
    EQUALS          reduce using rule 298 (constant -> INT_CONST_BIN .)
    XOREQUAL        reduce using rule 298 (constant -> INT_CONST_BIN .)
    TIMESEQUAL      reduce using rule 298 (constant -> INT_CONST_BIN .)
    DIVEQUAL        reduce using rule 298 (constant -> INT_CONST_BIN .)
    MODEQUAL        reduce using rule 298 (constant -> INT_CONST_BIN .)
    PLUSEQUAL       reduce using rule 298 (constant -> INT_CONST_BIN .)
    MINUSEQUAL      reduce using rule 298 (constant -> INT_CONST_BIN .)
    LSHIFTEQUAL     reduce using rule 298 (constant -> INT_CONST_BIN .)
    RSHIFTEQUAL     reduce using rule 298 (constant -> INT_CONST_BIN .)
    ANDEQUAL        reduce using rule 298 (constant -> INT_CONST_BIN .)
    OREQUAL         reduce using rule 298 (constant -> INT_CONST_BIN .)
    CONDOP          reduce using rule 298 (constant -> INT_CONST_BIN .)
    TIMES           reduce using rule 298 (constant -> INT_CONST_BIN .)
    DIVIDE          reduce using rule 298 (constant -> INT_CONST_BIN .)
    MOD             reduce using rule 298 (constant -> INT_CONST_BIN .)
    PLUS            reduce using rule 298 (constant -> INT_CONST_BIN .)
    MINUS           reduce using rule 298 (constant -> INT_CONST_BIN .)
    RSHIFT          reduce using rule 298 (constant -> INT_CONST_BIN .)
    LSHIFT          reduce using rule 298 (constant -> INT_CONST_BIN .)
    LT              reduce using rule 298 (constant -> INT_CONST_BIN .)
    LE              reduce using rule 298 (constant -> INT_CONST_BIN .)
    GE              reduce using rule 298 (constant -> INT_CONST_BIN .)
    GT              reduce using rule 298 (constant -> INT_CONST_BIN .)
    EQ              reduce using rule 298 (constant -> INT_CONST_BIN .)
    NE              reduce using rule 298 (constant -> INT_CONST_BIN .)
    AND             reduce using rule 298 (constant -> INT_CONST_BIN .)
    OR              reduce using rule 298 (constant -> INT_CONST_BIN .)
    XOR             reduce using rule 298 (constant -> INT_CONST_BIN .)
    LAND            reduce using rule 298 (constant -> INT_CONST_BIN .)
    LOR             reduce using rule 298 (constant -> INT_CONST_BIN .)
    COMMA           reduce using rule 298 (constant -> INT_CONST_BIN .)
    SEMI            reduce using rule 298 (constant -> INT_CONST_BIN .)
    RBRACKET        reduce using rule 298 (constant -> INT_CONST_BIN .)
    COLON           reduce using rule 298 (constant -> INT_CONST_BIN .)
    RPAREN          reduce using rule 298 (constant -> INT_CONST_BIN .)
    RBRACE          reduce using rule 298 (constant -> INT_CONST_BIN .)


state 204

    (299) constant -> FLOAT_CONST .

    LBRACKET        reduce using rule 299 (constant -> FLOAT_CONST .)
    LPAREN          reduce using rule 299 (constant -> FLOAT_CONST .)
    PERIOD          reduce using rule 299 (constant -> FLOAT_CONST .)
    ARROW           reduce using rule 299 (constant -> FLOAT_CONST .)
    PLUSPLUS        reduce using rule 299 (constant -> FLOAT_CONST .)
    MINUSMINUS      reduce using rule 299 (constant -> FLOAT_CONST .)
    EQUALS          reduce using rule 299 (constant -> FLOAT_CONST .)
    XOREQUAL        reduce using rule 299 (constant -> FLOAT_CONST .)
    TIMESEQUAL      reduce using rule 299 (constant -> FLOAT_CONST .)
    DIVEQUAL        reduce using rule 299 (constant -> FLOAT_CONST .)
    MODEQUAL        reduce using rule 299 (constant -> FLOAT_CONST .)
    PLUSEQUAL       reduce using rule 299 (constant -> FLOAT_CONST .)
    MINUSEQUAL      reduce using rule 299 (constant -> FLOAT_CONST .)
    LSHIFTEQUAL     reduce using rule 299 (constant -> FLOAT_CONST .)
    RSHIFTEQUAL     reduce using rule 299 (constant -> FLOAT_CONST .)
    ANDEQUAL        reduce using rule 299 (constant -> FLOAT_CONST .)
    OREQUAL         reduce using rule 299 (constant -> FLOAT_CONST .)
    CONDOP          reduce using rule 299 (constant -> FLOAT_CONST .)
    TIMES           reduce using rule 299 (constant -> FLOAT_CONST .)
    DIVIDE          reduce using rule 299 (constant -> FLOAT_CONST .)
    MOD             reduce using rule 299 (constant -> FLOAT_CONST .)
    PLUS            reduce using rule 299 (constant -> FLOAT_CONST .)
    MINUS           reduce using rule 299 (constant -> FLOAT_CONST .)
    RSHIFT          reduce using rule 299 (constant -> FLOAT_CONST .)
    LSHIFT          reduce using rule 299 (constant -> FLOAT_CONST .)
    LT              reduce using rule 299 (constant -> FLOAT_CONST .)
    LE              reduce using rule 299 (constant -> FLOAT_CONST .)
    GE              reduce using rule 299 (constant -> FLOAT_CONST .)
    GT              reduce using rule 299 (constant -> FLOAT_CONST .)
    EQ              reduce using rule 299 (constant -> FLOAT_CONST .)
    NE              reduce using rule 299 (constant -> FLOAT_CONST .)
    AND             reduce using rule 299 (constant -> FLOAT_CONST .)
    OR              reduce using rule 299 (constant -> FLOAT_CONST .)
    XOR             reduce using rule 299 (constant -> FLOAT_CONST .)
    LAND            reduce using rule 299 (constant -> FLOAT_CONST .)
    LOR             reduce using rule 299 (constant -> FLOAT_CONST .)
    COMMA           reduce using rule 299 (constant -> FLOAT_CONST .)
    SEMI            reduce using rule 299 (constant -> FLOAT_CONST .)
    RBRACKET        reduce using rule 299 (constant -> FLOAT_CONST .)
    COLON           reduce using rule 299 (constant -> FLOAT_CONST .)
    RPAREN          reduce using rule 299 (constant -> FLOAT_CONST .)
    RBRACE          reduce using rule 299 (constant -> FLOAT_CONST .)


state 205

    (300) constant -> HEX_FLOAT_CONST .

    LBRACKET        reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    LPAREN          reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    PERIOD          reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    ARROW           reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    PLUSPLUS        reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    MINUSMINUS      reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    EQUALS          reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    XOREQUAL        reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    TIMESEQUAL      reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    DIVEQUAL        reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    MODEQUAL        reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    PLUSEQUAL       reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    MINUSEQUAL      reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    LSHIFTEQUAL     reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    RSHIFTEQUAL     reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    ANDEQUAL        reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    OREQUAL         reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    CONDOP          reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    TIMES           reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    DIVIDE          reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    MOD             reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    PLUS            reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    MINUS           reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    RSHIFT          reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    LSHIFT          reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    LT              reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    LE              reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    GE              reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    GT              reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    EQ              reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    NE              reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    AND             reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    OR              reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    XOR             reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    LAND            reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    LOR             reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    COMMA           reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    SEMI            reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    RBRACKET        reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    COLON           reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    RPAREN          reduce using rule 300 (constant -> HEX_FLOAT_CONST .)
    RBRACE          reduce using rule 300 (constant -> HEX_FLOAT_CONST .)


state 206

    (301) constant -> CHAR_CONST .

    LBRACKET        reduce using rule 301 (constant -> CHAR_CONST .)
    LPAREN          reduce using rule 301 (constant -> CHAR_CONST .)
    PERIOD          reduce using rule 301 (constant -> CHAR_CONST .)
    ARROW           reduce using rule 301 (constant -> CHAR_CONST .)
    PLUSPLUS        reduce using rule 301 (constant -> CHAR_CONST .)
    MINUSMINUS      reduce using rule 301 (constant -> CHAR_CONST .)
    EQUALS          reduce using rule 301 (constant -> CHAR_CONST .)
    XOREQUAL        reduce using rule 301 (constant -> CHAR_CONST .)
    TIMESEQUAL      reduce using rule 301 (constant -> CHAR_CONST .)
    DIVEQUAL        reduce using rule 301 (constant -> CHAR_CONST .)
    MODEQUAL        reduce using rule 301 (constant -> CHAR_CONST .)
    PLUSEQUAL       reduce using rule 301 (constant -> CHAR_CONST .)
    MINUSEQUAL      reduce using rule 301 (constant -> CHAR_CONST .)
    LSHIFTEQUAL     reduce using rule 301 (constant -> CHAR_CONST .)
    RSHIFTEQUAL     reduce using rule 301 (constant -> CHAR_CONST .)
    ANDEQUAL        reduce using rule 301 (constant -> CHAR_CONST .)
    OREQUAL         reduce using rule 301 (constant -> CHAR_CONST .)
    CONDOP          reduce using rule 301 (constant -> CHAR_CONST .)
    TIMES           reduce using rule 301 (constant -> CHAR_CONST .)
    DIVIDE          reduce using rule 301 (constant -> CHAR_CONST .)
    MOD             reduce using rule 301 (constant -> CHAR_CONST .)
    PLUS            reduce using rule 301 (constant -> CHAR_CONST .)
    MINUS           reduce using rule 301 (constant -> CHAR_CONST .)
    RSHIFT          reduce using rule 301 (constant -> CHAR_CONST .)
    LSHIFT          reduce using rule 301 (constant -> CHAR_CONST .)
    LT              reduce using rule 301 (constant -> CHAR_CONST .)
    LE              reduce using rule 301 (constant -> CHAR_CONST .)
    GE              reduce using rule 301 (constant -> CHAR_CONST .)
    GT              reduce using rule 301 (constant -> CHAR_CONST .)
    EQ              reduce using rule 301 (constant -> CHAR_CONST .)
    NE              reduce using rule 301 (constant -> CHAR_CONST .)
    AND             reduce using rule 301 (constant -> CHAR_CONST .)
    OR              reduce using rule 301 (constant -> CHAR_CONST .)
    XOR             reduce using rule 301 (constant -> CHAR_CONST .)
    LAND            reduce using rule 301 (constant -> CHAR_CONST .)
    LOR             reduce using rule 301 (constant -> CHAR_CONST .)
    COMMA           reduce using rule 301 (constant -> CHAR_CONST .)
    SEMI            reduce using rule 301 (constant -> CHAR_CONST .)
    RBRACKET        reduce using rule 301 (constant -> CHAR_CONST .)
    COLON           reduce using rule 301 (constant -> CHAR_CONST .)
    RPAREN          reduce using rule 301 (constant -> CHAR_CONST .)
    RBRACE          reduce using rule 301 (constant -> CHAR_CONST .)


state 207

    (302) constant -> WCHAR_CONST .

    LBRACKET        reduce using rule 302 (constant -> WCHAR_CONST .)
    LPAREN          reduce using rule 302 (constant -> WCHAR_CONST .)
    PERIOD          reduce using rule 302 (constant -> WCHAR_CONST .)
    ARROW           reduce using rule 302 (constant -> WCHAR_CONST .)
    PLUSPLUS        reduce using rule 302 (constant -> WCHAR_CONST .)
    MINUSMINUS      reduce using rule 302 (constant -> WCHAR_CONST .)
    EQUALS          reduce using rule 302 (constant -> WCHAR_CONST .)
    XOREQUAL        reduce using rule 302 (constant -> WCHAR_CONST .)
    TIMESEQUAL      reduce using rule 302 (constant -> WCHAR_CONST .)
    DIVEQUAL        reduce using rule 302 (constant -> WCHAR_CONST .)
    MODEQUAL        reduce using rule 302 (constant -> WCHAR_CONST .)
    PLUSEQUAL       reduce using rule 302 (constant -> WCHAR_CONST .)
    MINUSEQUAL      reduce using rule 302 (constant -> WCHAR_CONST .)
    LSHIFTEQUAL     reduce using rule 302 (constant -> WCHAR_CONST .)
    RSHIFTEQUAL     reduce using rule 302 (constant -> WCHAR_CONST .)
    ANDEQUAL        reduce using rule 302 (constant -> WCHAR_CONST .)
    OREQUAL         reduce using rule 302 (constant -> WCHAR_CONST .)
    CONDOP          reduce using rule 302 (constant -> WCHAR_CONST .)
    TIMES           reduce using rule 302 (constant -> WCHAR_CONST .)
    DIVIDE          reduce using rule 302 (constant -> WCHAR_CONST .)
    MOD             reduce using rule 302 (constant -> WCHAR_CONST .)
    PLUS            reduce using rule 302 (constant -> WCHAR_CONST .)
    MINUS           reduce using rule 302 (constant -> WCHAR_CONST .)
    RSHIFT          reduce using rule 302 (constant -> WCHAR_CONST .)
    LSHIFT          reduce using rule 302 (constant -> WCHAR_CONST .)
    LT              reduce using rule 302 (constant -> WCHAR_CONST .)
    LE              reduce using rule 302 (constant -> WCHAR_CONST .)
    GE              reduce using rule 302 (constant -> WCHAR_CONST .)
    GT              reduce using rule 302 (constant -> WCHAR_CONST .)
    EQ              reduce using rule 302 (constant -> WCHAR_CONST .)
    NE              reduce using rule 302 (constant -> WCHAR_CONST .)
    AND             reduce using rule 302 (constant -> WCHAR_CONST .)
    OR              reduce using rule 302 (constant -> WCHAR_CONST .)
    XOR             reduce using rule 302 (constant -> WCHAR_CONST .)
    LAND            reduce using rule 302 (constant -> WCHAR_CONST .)
    LOR             reduce using rule 302 (constant -> WCHAR_CONST .)
    COMMA           reduce using rule 302 (constant -> WCHAR_CONST .)
    SEMI            reduce using rule 302 (constant -> WCHAR_CONST .)
    RBRACKET        reduce using rule 302 (constant -> WCHAR_CONST .)
    COLON           reduce using rule 302 (constant -> WCHAR_CONST .)
    RPAREN          reduce using rule 302 (constant -> WCHAR_CONST .)
    RBRACE          reduce using rule 302 (constant -> WCHAR_CONST .)


state 208

    (303) unified_string_literal -> STRING_LITERAL .

    STRING_LITERAL  reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    LBRACKET        reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    LPAREN          reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    PERIOD          reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    ARROW           reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    PLUSPLUS        reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    MINUSMINUS      reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    EQUALS          reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    XOREQUAL        reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    TIMESEQUAL      reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    DIVEQUAL        reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    MODEQUAL        reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    PLUSEQUAL       reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    MINUSEQUAL      reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    LSHIFTEQUAL     reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    RSHIFTEQUAL     reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    ANDEQUAL        reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    OREQUAL         reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    CONDOP          reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    TIMES           reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    DIVIDE          reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    MOD             reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    PLUS            reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    MINUS           reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    RSHIFT          reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    LSHIFT          reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    LT              reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    LE              reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    GE              reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    GT              reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    EQ              reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    NE              reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    AND             reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    OR              reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    XOR             reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    LAND            reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    LOR             reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    COMMA           reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    SEMI            reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    RBRACKET        reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    COLON           reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    RPAREN          reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)
    RBRACE          reduce using rule 303 (unified_string_literal -> STRING_LITERAL .)


state 209

    (305) unified_wstring_literal -> WSTRING_LITERAL .

    WSTRING_LITERAL reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    LBRACKET        reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    LPAREN          reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    PERIOD          reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    ARROW           reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    PLUSPLUS        reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    MINUSMINUS      reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    EQUALS          reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    XOREQUAL        reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    TIMESEQUAL      reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    DIVEQUAL        reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    MODEQUAL        reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    PLUSEQUAL       reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    MINUSEQUAL      reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    LSHIFTEQUAL     reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    RSHIFTEQUAL     reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    ANDEQUAL        reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    OREQUAL         reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    CONDOP          reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    TIMES           reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    DIVIDE          reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    MOD             reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    PLUS            reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    MINUS           reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    RSHIFT          reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    LSHIFT          reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    LT              reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    LE              reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    GE              reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    GT              reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    EQ              reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    NE              reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    AND             reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    OR              reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    XOR             reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    LAND            reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    LOR             reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    COMMA           reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    SEMI            reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    RBRACKET        reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    COLON           reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    RPAREN          reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)
    RBRACE          reduce using rule 305 (unified_wstring_literal -> WSTRING_LITERAL .)


state 210

    (71) function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .

    SEMI            reduce using rule 71 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    PPHASH          reduce using rule 71 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    PPPRAGMA        reduce using rule 71 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    ID              reduce using rule 71 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    LPAREN          reduce using rule 71 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    TIMES           reduce using rule 71 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    TYPEID          reduce using rule 71 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    ENUM            reduce using rule 71 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    VOID            reduce using rule 71 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    _BOOL           reduce using rule 71 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    CHAR            reduce using rule 71 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    SHORT           reduce using rule 71 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    INT             reduce using rule 71 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    LONG            reduce using rule 71 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    FLOAT           reduce using rule 71 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    DOUBLE          reduce using rule 71 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    _COMPLEX        reduce using rule 71 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    SIGNED          reduce using rule 71 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    UNSIGNED        reduce using rule 71 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    __INT128        reduce using rule 71 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    CONST           reduce using rule 71 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    RESTRICT        reduce using rule 71 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    VOLATILE        reduce using rule 71 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    AUTO            reduce using rule 71 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    REGISTER        reduce using rule 71 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    STATIC          reduce using rule 71 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    EXTERN          reduce using rule 71 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    TYPEDEF         reduce using rule 71 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    INLINE          reduce using rule 71 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    STRUCT          reduce using rule 71 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    UNION           reduce using rule 71 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)
    $end            reduce using rule 71 (function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement .)


state 211

    (121) init_declarator_list -> init_declarator_list COMMA init_declarator .

    COMMA           reduce using rule 121 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    SEMI            reduce using rule 121 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 212

    (38) direct_typeid_declarator -> LPAREN typeid_declarator RPAREN .

    LBRACKET        reduce using rule 38 (direct_typeid_declarator -> LPAREN typeid_declarator RPAREN .)
    LPAREN          reduce using rule 38 (direct_typeid_declarator -> LPAREN typeid_declarator RPAREN .)
    EQUALS          reduce using rule 38 (direct_typeid_declarator -> LPAREN typeid_declarator RPAREN .)
    COMMA           reduce using rule 38 (direct_typeid_declarator -> LPAREN typeid_declarator RPAREN .)
    SEMI            reduce using rule 38 (direct_typeid_declarator -> LPAREN typeid_declarator RPAREN .)
    RPAREN          reduce using rule 38 (direct_typeid_declarator -> LPAREN typeid_declarator RPAREN .)
    COLON           reduce using rule 38 (direct_typeid_declarator -> LPAREN typeid_declarator RPAREN .)


state 213

    (123) init_declarator -> declarator EQUALS initializer .

    COMMA           reduce using rule 123 (init_declarator -> declarator EQUALS initializer .)
    SEMI            reduce using rule 123 (init_declarator -> declarator EQUALS initializer .)


state 214

    (177) initializer -> assignment_expression .

    COMMA           reduce using rule 177 (initializer -> assignment_expression .)
    SEMI            reduce using rule 177 (initializer -> assignment_expression .)
    RBRACE          reduce using rule 177 (initializer -> assignment_expression .)


state 215

    (178) initializer -> brace_open . initializer_list_opt brace_close
    (179) initializer -> brace_open . initializer_list COMMA brace_close
    (21) initializer_list_opt -> . empty
    (22) initializer_list_opt -> . initializer_list
    (180) initializer_list -> . designation_opt initializer
    (181) initializer_list -> . initializer_list COMMA designation_opt initializer
    (309) empty -> .
    (11) designation_opt -> . empty
    (12) designation_opt -> . designation
    (182) designation -> . designator_list EQUALS
    (183) designator_list -> . designator
    (184) designator_list -> . designator_list designator
    (185) designator -> . LBRACKET constant_expression RBRACKET
    (186) designator -> . PERIOD identifier

    RBRACE          reduce using rule 309 (empty -> .)
    LBRACE          reduce using rule 309 (empty -> .)
    PLUSPLUS        reduce using rule 309 (empty -> .)
    MINUSMINUS      reduce using rule 309 (empty -> .)
    SIZEOF          reduce using rule 309 (empty -> .)
    LPAREN          reduce using rule 309 (empty -> .)
    AND             reduce using rule 309 (empty -> .)
    TIMES           reduce using rule 309 (empty -> .)
    PLUS            reduce using rule 309 (empty -> .)
    MINUS           reduce using rule 309 (empty -> .)
    NOT             reduce using rule 309 (empty -> .)
    LNOT            reduce using rule 309 (empty -> .)
    OFFSETOF        reduce using rule 309 (empty -> .)
    ID              reduce using rule 309 (empty -> .)
    INT_CONST_DEC   reduce using rule 309 (empty -> .)
    INT_CONST_OCT   reduce using rule 309 (empty -> .)
    INT_CONST_HEX   reduce using rule 309 (empty -> .)
    INT_CONST_BIN   reduce using rule 309 (empty -> .)
    FLOAT_CONST     reduce using rule 309 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 309 (empty -> .)
    CHAR_CONST      reduce using rule 309 (empty -> .)
    WCHAR_CONST     reduce using rule 309 (empty -> .)
    STRING_LITERAL  reduce using rule 309 (empty -> .)
    WSTRING_LITERAL reduce using rule 309 (empty -> .)
    LBRACKET        shift and go to state 343
    PERIOD          shift and go to state 344

    initializer_list_opt           shift and go to state 336
    initializer_list               shift and go to state 337
    empty                          shift and go to state 338
    designation_opt                shift and go to state 339
    designation                    shift and go to state 340
    designator_list                shift and go to state 341
    designator                     shift and go to state 342

state 216

    (39) direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt . assignment_expression_opt RBRACKET
    (42) direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt . TIMES RBRACKET
    (3) assignment_expression_opt -> . empty
    (4) assignment_expression_opt -> . assignment_expression
    (309) empty -> .
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    TIMES           shift and go to state 346
    RBRACKET        reduce using rule 309 (empty -> .)
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    assignment_expression_opt      shift and go to state 345
    empty                          shift and go to state 223
    assignment_expression          shift and go to state 224
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 217

    (40) direct_typeid_declarator -> direct_typeid_declarator LBRACKET STATIC . type_qualifier_list_opt assignment_expression RBRACKET
    (27) type_qualifier_list_opt -> . empty
    (28) type_qualifier_list_opt -> . type_qualifier_list
    (309) empty -> .
    (166) type_qualifier_list -> . type_qualifier
    (167) type_qualifier_list -> . type_qualifier_list type_qualifier
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE

    PLUSPLUS        reduce using rule 309 (empty -> .)
    MINUSMINUS      reduce using rule 309 (empty -> .)
    SIZEOF          reduce using rule 309 (empty -> .)
    LPAREN          reduce using rule 309 (empty -> .)
    AND             reduce using rule 309 (empty -> .)
    TIMES           reduce using rule 309 (empty -> .)
    PLUS            reduce using rule 309 (empty -> .)
    MINUS           reduce using rule 309 (empty -> .)
    NOT             reduce using rule 309 (empty -> .)
    LNOT            reduce using rule 309 (empty -> .)
    OFFSETOF        reduce using rule 309 (empty -> .)
    ID              reduce using rule 309 (empty -> .)
    INT_CONST_DEC   reduce using rule 309 (empty -> .)
    INT_CONST_OCT   reduce using rule 309 (empty -> .)
    INT_CONST_HEX   reduce using rule 309 (empty -> .)
    INT_CONST_BIN   reduce using rule 309 (empty -> .)
    FLOAT_CONST     reduce using rule 309 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 309 (empty -> .)
    CHAR_CONST      reduce using rule 309 (empty -> .)
    WCHAR_CONST     reduce using rule 309 (empty -> .)
    STRING_LITERAL  reduce using rule 309 (empty -> .)
    WSTRING_LITERAL reduce using rule 309 (empty -> .)
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47

    type_qualifier_list_opt        shift and go to state 347
    empty                          shift and go to state 95
    type_qualifier_list            shift and go to state 96
    type_qualifier                 shift and go to state 97

state 218

    (41) direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list . STATIC assignment_expression RBRACKET
    (28) type_qualifier_list_opt -> type_qualifier_list .
    (167) type_qualifier_list -> type_qualifier_list . type_qualifier
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE

    STATIC          shift and go to state 348
    TIMES           reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    PLUSPLUS        reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    MINUSMINUS      reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    SIZEOF          reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    LPAREN          reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    AND             reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    PLUS            reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    MINUS           reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    NOT             reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    LNOT            reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    OFFSETOF        reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    ID              reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_DEC   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_OCT   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_HEX   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_BIN   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    FLOAT_CONST     reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    HEX_FLOAT_CONST reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    CHAR_CONST      reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    WCHAR_CONST     reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    STRING_LITERAL  reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    WSTRING_LITERAL reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    RBRACKET        reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47

    type_qualifier                 shift and go to state 133

state 219

    (43) direct_typeid_declarator -> direct_typeid_declarator LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 349


state 220

    (44) direct_typeid_declarator -> direct_typeid_declarator LPAREN identifier_list_opt . RPAREN

    RPAREN          shift and go to state 350


state 221

    (31) direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt . RBRACKET

    RBRACKET        shift and go to state 351


state 222

    (34) direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES . RBRACKET
    (266) unary_operator -> TIMES .

    RBRACKET        shift and go to state 352
    LPAREN          reduce using rule 266 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 266 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 266 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 266 (unary_operator -> TIMES .)
    AND             reduce using rule 266 (unary_operator -> TIMES .)
    TIMES           reduce using rule 266 (unary_operator -> TIMES .)
    PLUS            reduce using rule 266 (unary_operator -> TIMES .)
    MINUS           reduce using rule 266 (unary_operator -> TIMES .)
    NOT             reduce using rule 266 (unary_operator -> TIMES .)
    LNOT            reduce using rule 266 (unary_operator -> TIMES .)
    OFFSETOF        reduce using rule 266 (unary_operator -> TIMES .)
    ID              reduce using rule 266 (unary_operator -> TIMES .)
    INT_CONST_DEC   reduce using rule 266 (unary_operator -> TIMES .)
    INT_CONST_OCT   reduce using rule 266 (unary_operator -> TIMES .)
    INT_CONST_HEX   reduce using rule 266 (unary_operator -> TIMES .)
    INT_CONST_BIN   reduce using rule 266 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 266 (unary_operator -> TIMES .)
    HEX_FLOAT_CONST reduce using rule 266 (unary_operator -> TIMES .)
    CHAR_CONST      reduce using rule 266 (unary_operator -> TIMES .)
    WCHAR_CONST     reduce using rule 266 (unary_operator -> TIMES .)
    STRING_LITERAL  reduce using rule 266 (unary_operator -> TIMES .)
    WSTRING_LITERAL reduce using rule 266 (unary_operator -> TIMES .)


state 223

    (3) assignment_expression_opt -> empty .

    RBRACKET        reduce using rule 3 (assignment_expression_opt -> empty .)


state 224

    (4) assignment_expression_opt -> assignment_expression .

    RBRACKET        reduce using rule 4 (assignment_expression_opt -> assignment_expression .)


state 225

    (32) direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt . assignment_expression RBRACKET
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    assignment_expression          shift and go to state 353
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 226

    (33) direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC . assignment_expression RBRACKET
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    assignment_expression          shift and go to state 354
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 227

    (35) direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .

    LBRACKET        reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    LPAREN          reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    CONST           reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    RESTRICT        reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    VOLATILE        reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    AUTO            reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    REGISTER        reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    STATIC          reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    EXTERN          reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    TYPEDEF         reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    INLINE          reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    TYPEID          reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    ENUM            reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    VOID            reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    _BOOL           reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    CHAR            reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    SHORT           reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    INT             reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    LONG            reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    FLOAT           reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    DOUBLE          reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    _COMPLEX        reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    SIGNED          reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    UNSIGNED        reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    __INT128        reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    STRUCT          reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    UNION           reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    LBRACE          reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    EQUALS          reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    SEMI            reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)
    COLON           reduce using rule 35 (direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN .)


state 228

    (36) direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .

    LBRACKET        reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    LPAREN          reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    CONST           reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    RESTRICT        reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    VOLATILE        reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    AUTO            reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    REGISTER        reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    STATIC          reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    EXTERN          reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    TYPEDEF         reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    INLINE          reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    TYPEID          reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    ENUM            reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    VOID            reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    _BOOL           reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    CHAR            reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    SHORT           reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    INT             reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    LONG            reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    FLOAT           reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    DOUBLE          reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    _COMPLEX        reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    SIGNED          reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    UNSIGNED        reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    __INT128        reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    STRUCT          reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    UNION           reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    LBRACE          reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    EQUALS          reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    COMMA           reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    SEMI            reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    RPAREN          reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)
    COLON           reduce using rule 36 (direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN .)


state 229

    (169) parameter_type_list -> parameter_list COMMA . ELLIPSIS
    (171) parameter_list -> parameter_list COMMA . parameter_declaration
    (172) parameter_declaration -> . declaration_specifiers id_declarator
    (173) parameter_declaration -> . declaration_specifiers typeid_noparen_declarator
    (174) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (89) declaration_specifiers -> . declaration_specifiers type_qualifier
    (90) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (91) declaration_specifiers -> . declaration_specifiers function_specifier
    (92) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (93) declaration_specifiers -> . type_specifier
    (94) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (113) type_specifier -> . typedef_name
    (114) type_specifier -> . enum_specifier
    (115) type_specifier -> . struct_or_union_specifier
    (116) type_specifier -> . type_specifier_no_typeid
    (86) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (87) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (88) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (221) typedef_name -> . TYPEID
    (152) enum_specifier -> . ENUM ID
    (153) enum_specifier -> . ENUM TYPEID
    (154) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (155) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (156) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (132) struct_or_union_specifier -> . struct_or_union ID
    (133) struct_or_union_specifier -> . struct_or_union TYPEID
    (134) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (135) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (136) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (137) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (138) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (139) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (101) type_specifier_no_typeid -> . VOID
    (102) type_specifier_no_typeid -> . _BOOL
    (103) type_specifier_no_typeid -> . CHAR
    (104) type_specifier_no_typeid -> . SHORT
    (105) type_specifier_no_typeid -> . INT
    (106) type_specifier_no_typeid -> . LONG
    (107) type_specifier_no_typeid -> . FLOAT
    (108) type_specifier_no_typeid -> . DOUBLE
    (109) type_specifier_no_typeid -> . _COMPLEX
    (110) type_specifier_no_typeid -> . SIGNED
    (111) type_specifier_no_typeid -> . UNSIGNED
    (112) type_specifier_no_typeid -> . __INT128
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE
    (95) storage_class_specifier -> . AUTO
    (96) storage_class_specifier -> . REGISTER
    (97) storage_class_specifier -> . STATIC
    (98) storage_class_specifier -> . EXTERN
    (99) storage_class_specifier -> . TYPEDEF
    (100) function_specifier -> . INLINE
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

    ELLIPSIS        shift and go to state 355
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    VOID            shift and go to state 33
    _BOOL           shift and go to state 34
    CHAR            shift and go to state 35
    SHORT           shift and go to state 36
    INT             shift and go to state 37
    LONG            shift and go to state 38
    FLOAT           shift and go to state 39
    DOUBLE          shift and go to state 40
    _COMPLEX        shift and go to state 41
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 43
    __INT128        shift and go to state 44
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47
    AUTO            shift and go to state 48
    REGISTER        shift and go to state 49
    STATIC          shift and go to state 25
    EXTERN          shift and go to state 50
    TYPEDEF         shift and go to state 51
    INLINE          shift and go to state 52
    STRUCT          shift and go to state 53
    UNION           shift and go to state 54

    parameter_declaration          shift and go to state 356
    declaration_specifiers         shift and go to state 126
    type_qualifier                 shift and go to state 17
    storage_class_specifier        shift and go to state 18
    function_specifier             shift and go to state 19
    type_specifier_no_typeid       shift and go to state 20
    type_specifier                 shift and go to state 21
    declaration_specifiers_no_type shift and go to state 128
    typedef_name                   shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union_specifier      shift and go to state 29
    struct_or_union                shift and go to state 32

state 230

    (176) identifier_list -> identifier_list COMMA . identifier
    (294) identifier -> . ID

    ID              shift and go to state 127

    identifier                     shift and go to state 357

state 231

    (172) parameter_declaration -> declaration_specifiers id_declarator .

    COMMA           reduce using rule 172 (parameter_declaration -> declaration_specifiers id_declarator .)
    RPAREN          reduce using rule 172 (parameter_declaration -> declaration_specifiers id_declarator .)


state 232

    (173) parameter_declaration -> declaration_specifiers typeid_noparen_declarator .

    COMMA           reduce using rule 173 (parameter_declaration -> declaration_specifiers typeid_noparen_declarator .)
    RPAREN          reduce using rule 173 (parameter_declaration -> declaration_specifiers typeid_noparen_declarator .)


state 233

    (174) parameter_declaration -> declaration_specifiers abstract_declarator_opt .

    COMMA           reduce using rule 174 (parameter_declaration -> declaration_specifiers abstract_declarator_opt .)
    RPAREN          reduce using rule 174 (parameter_declaration -> declaration_specifiers abstract_declarator_opt .)


state 234

    (53) id_declarator -> pointer . direct_id_declarator
    (57) typeid_noparen_declarator -> pointer . direct_typeid_noparen_declarator
    (188) abstract_declarator -> pointer .
    (189) abstract_declarator -> pointer . direct_abstract_declarator
    (29) direct_id_declarator -> . ID
    (30) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (31) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (35) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (36) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (45) direct_typeid_noparen_declarator -> . TYPEID
    (46) direct_typeid_noparen_declarator -> . direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (47) direct_typeid_noparen_declarator -> . direct_typeid_noparen_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (48) direct_typeid_noparen_declarator -> . direct_typeid_noparen_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (49) direct_typeid_noparen_declarator -> . direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (50) direct_typeid_noparen_declarator -> . direct_typeid_noparen_declarator LPAREN parameter_type_list RPAREN
    (51) direct_typeid_noparen_declarator -> . direct_typeid_noparen_declarator LPAREN identifier_list_opt RPAREN
    (191) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (192) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (193) direct_abstract_declarator -> . LBRACKET assignment_expression_opt RBRACKET
    (194) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (195) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (196) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (197) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN

    COMMA           reduce using rule 188 (abstract_declarator -> pointer .)
    RPAREN          reduce using rule 188 (abstract_declarator -> pointer .)
    ID              shift and go to state 23
    LPAREN          shift and go to state 238
    TYPEID          shift and go to state 240
    LBRACKET        shift and go to state 239

    direct_id_declarator           shift and go to state 81
    direct_typeid_noparen_declarator shift and go to state 358
    direct_abstract_declarator     shift and go to state 359

state 235

    (56) typeid_noparen_declarator -> direct_typeid_noparen_declarator .
    (46) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator . LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (47) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator . LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (48) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (49) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator . LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (50) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator . LPAREN parameter_type_list RPAREN
    (51) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator . LPAREN identifier_list_opt RPAREN

    COMMA           reduce using rule 56 (typeid_noparen_declarator -> direct_typeid_noparen_declarator .)
    RPAREN          reduce using rule 56 (typeid_noparen_declarator -> direct_typeid_noparen_declarator .)
    LBRACKET        shift and go to state 360
    LPAREN          shift and go to state 361


state 236

    (1) abstract_declarator_opt -> empty .

    COMMA           reduce using rule 1 (abstract_declarator_opt -> empty .)
    RPAREN          reduce using rule 1 (abstract_declarator_opt -> empty .)


state 237

    (2) abstract_declarator_opt -> abstract_declarator .

    COMMA           reduce using rule 2 (abstract_declarator_opt -> abstract_declarator .)
    RPAREN          reduce using rule 2 (abstract_declarator_opt -> abstract_declarator .)


state 238

    (30) direct_id_declarator -> LPAREN . id_declarator RPAREN
    (191) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (197) direct_abstract_declarator -> LPAREN . parameter_type_list_opt RPAREN
    (52) id_declarator -> . direct_id_declarator
    (53) id_declarator -> . pointer direct_id_declarator
    (188) abstract_declarator -> . pointer
    (189) abstract_declarator -> . pointer direct_abstract_declarator
    (190) abstract_declarator -> . direct_abstract_declarator
    (23) parameter_type_list_opt -> . empty
    (24) parameter_type_list_opt -> . parameter_type_list
    (29) direct_id_declarator -> . ID
    (30) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (31) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (35) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (36) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (164) pointer -> . TIMES type_qualifier_list_opt
    (165) pointer -> . TIMES type_qualifier_list_opt pointer
    (191) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (192) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (193) direct_abstract_declarator -> . LBRACKET assignment_expression_opt RBRACKET
    (194) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (195) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (196) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (197) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN
    (309) empty -> .
    (168) parameter_type_list -> . parameter_list
    (169) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (170) parameter_list -> . parameter_declaration
    (171) parameter_list -> . parameter_list COMMA parameter_declaration
    (172) parameter_declaration -> . declaration_specifiers id_declarator
    (173) parameter_declaration -> . declaration_specifiers typeid_noparen_declarator
    (174) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (89) declaration_specifiers -> . declaration_specifiers type_qualifier
    (90) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (91) declaration_specifiers -> . declaration_specifiers function_specifier
    (92) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (93) declaration_specifiers -> . type_specifier
    (94) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (113) type_specifier -> . typedef_name
    (114) type_specifier -> . enum_specifier
    (115) type_specifier -> . struct_or_union_specifier
    (116) type_specifier -> . type_specifier_no_typeid
    (86) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (87) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (88) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (221) typedef_name -> . TYPEID
    (152) enum_specifier -> . ENUM ID
    (153) enum_specifier -> . ENUM TYPEID
    (154) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (155) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (156) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (132) struct_or_union_specifier -> . struct_or_union ID
    (133) struct_or_union_specifier -> . struct_or_union TYPEID
    (134) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (135) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (136) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (137) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (138) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (139) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (101) type_specifier_no_typeid -> . VOID
    (102) type_specifier_no_typeid -> . _BOOL
    (103) type_specifier_no_typeid -> . CHAR
    (104) type_specifier_no_typeid -> . SHORT
    (105) type_specifier_no_typeid -> . INT
    (106) type_specifier_no_typeid -> . LONG
    (107) type_specifier_no_typeid -> . FLOAT
    (108) type_specifier_no_typeid -> . DOUBLE
    (109) type_specifier_no_typeid -> . _COMPLEX
    (110) type_specifier_no_typeid -> . SIGNED
    (111) type_specifier_no_typeid -> . UNSIGNED
    (112) type_specifier_no_typeid -> . __INT128
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE
    (95) storage_class_specifier -> . AUTO
    (96) storage_class_specifier -> . REGISTER
    (97) storage_class_specifier -> . STATIC
    (98) storage_class_specifier -> . EXTERN
    (99) storage_class_specifier -> . TYPEDEF
    (100) function_specifier -> . INLINE
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

    ID              shift and go to state 23
    LPAREN          shift and go to state 238
    TIMES           shift and go to state 26
    LBRACKET        shift and go to state 239
    RPAREN          reduce using rule 309 (empty -> .)
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    VOID            shift and go to state 33
    _BOOL           shift and go to state 34
    CHAR            shift and go to state 35
    SHORT           shift and go to state 36
    INT             shift and go to state 37
    LONG            shift and go to state 38
    FLOAT           shift and go to state 39
    DOUBLE          shift and go to state 40
    _COMPLEX        shift and go to state 41
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 43
    __INT128        shift and go to state 44
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47
    AUTO            shift and go to state 48
    REGISTER        shift and go to state 49
    STATIC          shift and go to state 25
    EXTERN          shift and go to state 50
    TYPEDEF         shift and go to state 51
    INLINE          shift and go to state 52
    STRUCT          shift and go to state 53
    UNION           shift and go to state 54

    id_declarator                  shift and go to state 93
    abstract_declarator            shift and go to state 362
    parameter_type_list_opt        shift and go to state 363
    direct_id_declarator           shift and go to state 15
    pointer                        shift and go to state 364
    direct_abstract_declarator     shift and go to state 241
    empty                          shift and go to state 365
    parameter_type_list            shift and go to state 366
    parameter_list                 shift and go to state 121
    parameter_declaration          shift and go to state 124
    declaration_specifiers         shift and go to state 126
    type_qualifier                 shift and go to state 17
    storage_class_specifier        shift and go to state 18
    function_specifier             shift and go to state 19
    type_specifier_no_typeid       shift and go to state 20
    type_specifier                 shift and go to state 21
    declaration_specifiers_no_type shift and go to state 128
    typedef_name                   shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union_specifier      shift and go to state 29
    struct_or_union                shift and go to state 32

state 239

    (193) direct_abstract_declarator -> LBRACKET . assignment_expression_opt RBRACKET
    (195) direct_abstract_declarator -> LBRACKET . TIMES RBRACKET
    (3) assignment_expression_opt -> . empty
    (4) assignment_expression_opt -> . assignment_expression
    (309) empty -> .
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    TIMES           shift and go to state 368
    RBRACKET        reduce using rule 309 (empty -> .)
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    assignment_expression_opt      shift and go to state 367
    empty                          shift and go to state 223
    assignment_expression          shift and go to state 224
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 240

    (45) direct_typeid_noparen_declarator -> TYPEID .

    LBRACKET        reduce using rule 45 (direct_typeid_noparen_declarator -> TYPEID .)
    LPAREN          reduce using rule 45 (direct_typeid_noparen_declarator -> TYPEID .)
    COMMA           reduce using rule 45 (direct_typeid_noparen_declarator -> TYPEID .)
    RPAREN          reduce using rule 45 (direct_typeid_noparen_declarator -> TYPEID .)


state 241

    (190) abstract_declarator -> direct_abstract_declarator .
    (192) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET assignment_expression_opt RBRACKET
    (194) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET TIMES RBRACKET
    (196) direct_abstract_declarator -> direct_abstract_declarator . LPAREN parameter_type_list_opt RPAREN

    COMMA           reduce using rule 190 (abstract_declarator -> direct_abstract_declarator .)
    RPAREN          reduce using rule 190 (abstract_declarator -> direct_abstract_declarator .)
    LBRACKET        shift and go to state 369
    LPAREN          shift and go to state 370


state 242

    (125) id_init_declarator_list -> id_init_declarator_list COMMA init_declarator .

    COMMA           reduce using rule 125 (id_init_declarator_list -> id_init_declarator_list COMMA init_declarator .)
    SEMI            reduce using rule 125 (id_init_declarator_list -> id_init_declarator_list COMMA init_declarator .)


state 243

    (127) id_init_declarator -> id_declarator EQUALS initializer .

    COMMA           reduce using rule 127 (id_init_declarator -> id_declarator EQUALS initializer .)
    SEMI            reduce using rule 127 (id_init_declarator -> id_declarator EQUALS initializer .)


state 244

    (155) enum_specifier -> ENUM ID brace_open enumerator_list . brace_close
    (158) enumerator_list -> enumerator_list . COMMA
    (159) enumerator_list -> enumerator_list . COMMA enumerator
    (308) brace_close -> . RBRACE

    COMMA           shift and go to state 247
    RBRACE          shift and go to state 144

    brace_close                    shift and go to state 371

state 245

    (156) enum_specifier -> ENUM TYPEID brace_open enumerator_list . brace_close
    (158) enumerator_list -> enumerator_list . COMMA
    (159) enumerator_list -> enumerator_list . COMMA enumerator
    (308) brace_close -> . RBRACE

    COMMA           shift and go to state 247
    RBRACE          shift and go to state 144

    brace_close                    shift and go to state 372

state 246

    (154) enum_specifier -> ENUM brace_open enumerator_list brace_close .

    CONST           reduce using rule 154 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    RESTRICT        reduce using rule 154 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    VOLATILE        reduce using rule 154 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    AUTO            reduce using rule 154 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    REGISTER        reduce using rule 154 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    STATIC          reduce using rule 154 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    EXTERN          reduce using rule 154 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    TYPEDEF         reduce using rule 154 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    INLINE          reduce using rule 154 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    VOID            reduce using rule 154 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    _BOOL           reduce using rule 154 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    CHAR            reduce using rule 154 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    SHORT           reduce using rule 154 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    INT             reduce using rule 154 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    LONG            reduce using rule 154 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    FLOAT           reduce using rule 154 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    DOUBLE          reduce using rule 154 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    _COMPLEX        reduce using rule 154 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    SIGNED          reduce using rule 154 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    UNSIGNED        reduce using rule 154 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    __INT128        reduce using rule 154 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    ID              reduce using rule 154 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    LPAREN          reduce using rule 154 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    TIMES           reduce using rule 154 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    TYPEID          reduce using rule 154 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    SEMI            reduce using rule 154 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    LBRACKET        reduce using rule 154 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    COMMA           reduce using rule 154 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    RPAREN          reduce using rule 154 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    COLON           reduce using rule 154 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)


state 247

    (158) enumerator_list -> enumerator_list COMMA .
    (159) enumerator_list -> enumerator_list COMMA . enumerator
    (160) enumerator -> . ID
    (161) enumerator -> . ID EQUALS constant_expression

    COMMA           reduce using rule 158 (enumerator_list -> enumerator_list COMMA .)
    RBRACE          reduce using rule 158 (enumerator_list -> enumerator_list COMMA .)
    ID              shift and go to state 138

    enumerator                     shift and go to state 373

state 248

    (161) enumerator -> ID EQUALS . constant_expression
    (235) constant_expression -> . conditional_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 271
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    constant_expression            shift and go to state 374
    conditional_expression         shift and go to state 269
    binary_expression              shift and go to state 181
    cast_expression                shift and go to state 186
    unary_expression               shift and go to state 270
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 249

    (136) struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list . brace_close
    (143) struct_declaration_list -> struct_declaration_list . struct_declaration
    (308) brace_close -> . RBRACE
    (144) struct_declaration -> . specifier_qualifier_list struct_declarator_list_opt SEMI
    (145) struct_declaration -> . SEMI
    (146) struct_declaration -> . pppragma_directive
    (128) specifier_qualifier_list -> . specifier_qualifier_list type_specifier_no_typeid
    (129) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (130) specifier_qualifier_list -> . type_specifier
    (131) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (68) pppragma_directive -> . PPPRAGMA
    (69) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (113) type_specifier -> . typedef_name
    (114) type_specifier -> . enum_specifier
    (115) type_specifier -> . struct_or_union_specifier
    (116) type_specifier -> . type_specifier_no_typeid
    (166) type_qualifier_list -> . type_qualifier
    (167) type_qualifier_list -> . type_qualifier_list type_qualifier
    (221) typedef_name -> . TYPEID
    (152) enum_specifier -> . ENUM ID
    (153) enum_specifier -> . ENUM TYPEID
    (154) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (155) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (156) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (132) struct_or_union_specifier -> . struct_or_union ID
    (133) struct_or_union_specifier -> . struct_or_union TYPEID
    (134) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (135) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (136) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (137) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (138) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (139) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (101) type_specifier_no_typeid -> . VOID
    (102) type_specifier_no_typeid -> . _BOOL
    (103) type_specifier_no_typeid -> . CHAR
    (104) type_specifier_no_typeid -> . SHORT
    (105) type_specifier_no_typeid -> . INT
    (106) type_specifier_no_typeid -> . LONG
    (107) type_specifier_no_typeid -> . FLOAT
    (108) type_specifier_no_typeid -> . DOUBLE
    (109) type_specifier_no_typeid -> . _COMPLEX
    (110) type_specifier_no_typeid -> . SIGNED
    (111) type_specifier_no_typeid -> . UNSIGNED
    (112) type_specifier_no_typeid -> . __INT128
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

    RBRACE          shift and go to state 144
    SEMI            shift and go to state 146
    PPPRAGMA        shift and go to state 14
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    VOID            shift and go to state 33
    _BOOL           shift and go to state 34
    CHAR            shift and go to state 35
    SHORT           shift and go to state 36
    INT             shift and go to state 37
    LONG            shift and go to state 38
    FLOAT           shift and go to state 39
    DOUBLE          shift and go to state 40
    _COMPLEX        shift and go to state 41
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 43
    __INT128        shift and go to state 44
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47
    STRUCT          shift and go to state 53
    UNION           shift and go to state 54

    struct_or_union                shift and go to state 32
    brace_close                    shift and go to state 375
    struct_declaration             shift and go to state 254
    specifier_qualifier_list       shift and go to state 145
    pppragma_directive             shift and go to state 147
    type_specifier_no_typeid       shift and go to state 20
    type_qualifier                 shift and go to state 97
    type_specifier                 shift and go to state 148
    type_qualifier_list            shift and go to state 149
    typedef_name                   shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union_specifier      shift and go to state 29

state 250

    (137) struct_or_union_specifier -> struct_or_union ID brace_open brace_close .

    CONST           reduce using rule 137 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    RESTRICT        reduce using rule 137 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    VOLATILE        reduce using rule 137 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    AUTO            reduce using rule 137 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    REGISTER        reduce using rule 137 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    STATIC          reduce using rule 137 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    EXTERN          reduce using rule 137 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    TYPEDEF         reduce using rule 137 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    INLINE          reduce using rule 137 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    VOID            reduce using rule 137 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    _BOOL           reduce using rule 137 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    CHAR            reduce using rule 137 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    SHORT           reduce using rule 137 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    INT             reduce using rule 137 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    LONG            reduce using rule 137 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    FLOAT           reduce using rule 137 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    DOUBLE          reduce using rule 137 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    _COMPLEX        reduce using rule 137 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    SIGNED          reduce using rule 137 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    UNSIGNED        reduce using rule 137 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    __INT128        reduce using rule 137 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    ID              reduce using rule 137 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    LPAREN          reduce using rule 137 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    TIMES           reduce using rule 137 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    TYPEID          reduce using rule 137 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    SEMI            reduce using rule 137 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    LBRACKET        reduce using rule 137 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    COMMA           reduce using rule 137 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    RPAREN          reduce using rule 137 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)
    COLON           reduce using rule 137 (struct_or_union_specifier -> struct_or_union ID brace_open brace_close .)


state 251

    (138) struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list . brace_close
    (143) struct_declaration_list -> struct_declaration_list . struct_declaration
    (308) brace_close -> . RBRACE
    (144) struct_declaration -> . specifier_qualifier_list struct_declarator_list_opt SEMI
    (145) struct_declaration -> . SEMI
    (146) struct_declaration -> . pppragma_directive
    (128) specifier_qualifier_list -> . specifier_qualifier_list type_specifier_no_typeid
    (129) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (130) specifier_qualifier_list -> . type_specifier
    (131) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (68) pppragma_directive -> . PPPRAGMA
    (69) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (113) type_specifier -> . typedef_name
    (114) type_specifier -> . enum_specifier
    (115) type_specifier -> . struct_or_union_specifier
    (116) type_specifier -> . type_specifier_no_typeid
    (166) type_qualifier_list -> . type_qualifier
    (167) type_qualifier_list -> . type_qualifier_list type_qualifier
    (221) typedef_name -> . TYPEID
    (152) enum_specifier -> . ENUM ID
    (153) enum_specifier -> . ENUM TYPEID
    (154) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (155) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (156) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (132) struct_or_union_specifier -> . struct_or_union ID
    (133) struct_or_union_specifier -> . struct_or_union TYPEID
    (134) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (135) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (136) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (137) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (138) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (139) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (101) type_specifier_no_typeid -> . VOID
    (102) type_specifier_no_typeid -> . _BOOL
    (103) type_specifier_no_typeid -> . CHAR
    (104) type_specifier_no_typeid -> . SHORT
    (105) type_specifier_no_typeid -> . INT
    (106) type_specifier_no_typeid -> . LONG
    (107) type_specifier_no_typeid -> . FLOAT
    (108) type_specifier_no_typeid -> . DOUBLE
    (109) type_specifier_no_typeid -> . _COMPLEX
    (110) type_specifier_no_typeid -> . SIGNED
    (111) type_specifier_no_typeid -> . UNSIGNED
    (112) type_specifier_no_typeid -> . __INT128
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

    RBRACE          shift and go to state 144
    SEMI            shift and go to state 146
    PPPRAGMA        shift and go to state 14
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    VOID            shift and go to state 33
    _BOOL           shift and go to state 34
    CHAR            shift and go to state 35
    SHORT           shift and go to state 36
    INT             shift and go to state 37
    LONG            shift and go to state 38
    FLOAT           shift and go to state 39
    DOUBLE          shift and go to state 40
    _COMPLEX        shift and go to state 41
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 43
    __INT128        shift and go to state 44
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47
    STRUCT          shift and go to state 53
    UNION           shift and go to state 54

    struct_or_union                shift and go to state 32
    brace_close                    shift and go to state 376
    struct_declaration             shift and go to state 254
    specifier_qualifier_list       shift and go to state 145
    pppragma_directive             shift and go to state 147
    type_specifier_no_typeid       shift and go to state 20
    type_qualifier                 shift and go to state 97
    type_specifier                 shift and go to state 148
    type_qualifier_list            shift and go to state 149
    typedef_name                   shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union_specifier      shift and go to state 29

state 252

    (139) struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .

    CONST           reduce using rule 139 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    RESTRICT        reduce using rule 139 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    VOLATILE        reduce using rule 139 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    AUTO            reduce using rule 139 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    REGISTER        reduce using rule 139 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    STATIC          reduce using rule 139 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    EXTERN          reduce using rule 139 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    TYPEDEF         reduce using rule 139 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    INLINE          reduce using rule 139 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    VOID            reduce using rule 139 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    _BOOL           reduce using rule 139 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    CHAR            reduce using rule 139 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    SHORT           reduce using rule 139 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    INT             reduce using rule 139 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    LONG            reduce using rule 139 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    FLOAT           reduce using rule 139 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    DOUBLE          reduce using rule 139 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    _COMPLEX        reduce using rule 139 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    SIGNED          reduce using rule 139 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    UNSIGNED        reduce using rule 139 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    __INT128        reduce using rule 139 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    ID              reduce using rule 139 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    LPAREN          reduce using rule 139 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    TIMES           reduce using rule 139 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    TYPEID          reduce using rule 139 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    SEMI            reduce using rule 139 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    LBRACKET        reduce using rule 139 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    COMMA           reduce using rule 139 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    RPAREN          reduce using rule 139 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)
    COLON           reduce using rule 139 (struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close .)


state 253

    (134) struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .

    CONST           reduce using rule 134 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    RESTRICT        reduce using rule 134 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    VOLATILE        reduce using rule 134 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    AUTO            reduce using rule 134 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    REGISTER        reduce using rule 134 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    STATIC          reduce using rule 134 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    EXTERN          reduce using rule 134 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    TYPEDEF         reduce using rule 134 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    INLINE          reduce using rule 134 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    VOID            reduce using rule 134 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    _BOOL           reduce using rule 134 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    CHAR            reduce using rule 134 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    SHORT           reduce using rule 134 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    INT             reduce using rule 134 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    LONG            reduce using rule 134 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    FLOAT           reduce using rule 134 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    DOUBLE          reduce using rule 134 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    _COMPLEX        reduce using rule 134 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    SIGNED          reduce using rule 134 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    UNSIGNED        reduce using rule 134 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    __INT128        reduce using rule 134 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    ID              reduce using rule 134 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    LPAREN          reduce using rule 134 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    TIMES           reduce using rule 134 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    TYPEID          reduce using rule 134 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    SEMI            reduce using rule 134 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    LBRACKET        reduce using rule 134 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    COMMA           reduce using rule 134 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    RPAREN          reduce using rule 134 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    COLON           reduce using rule 134 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)


state 254

    (143) struct_declaration_list -> struct_declaration_list struct_declaration .

    RBRACE          reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SEMI            reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    PPPRAGMA        reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    TYPEID          reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    ENUM            reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOID            reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    _BOOL           reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CHAR            reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SHORT           reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    INT             reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    LONG            reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    FLOAT           reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    DOUBLE          reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    _COMPLEX        reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SIGNED          reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNSIGNED        reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    __INT128        reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CONST           reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    RESTRICT        reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOLATILE        reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STRUCT          reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNION           reduce using rule 143 (struct_declaration_list -> struct_declaration_list struct_declaration .)


state 255

    (144) struct_declaration -> specifier_qualifier_list struct_declarator_list_opt . SEMI

    SEMI            shift and go to state 377


state 256

    (128) specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .

    VOID            reduce using rule 128 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    _BOOL           reduce using rule 128 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    CHAR            reduce using rule 128 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    SHORT           reduce using rule 128 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    INT             reduce using rule 128 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    LONG            reduce using rule 128 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    FLOAT           reduce using rule 128 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    DOUBLE          reduce using rule 128 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    _COMPLEX        reduce using rule 128 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    SIGNED          reduce using rule 128 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    UNSIGNED        reduce using rule 128 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    __INT128        reduce using rule 128 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    CONST           reduce using rule 128 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    RESTRICT        reduce using rule 128 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    VOLATILE        reduce using rule 128 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    COLON           reduce using rule 128 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    ID              reduce using rule 128 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    LPAREN          reduce using rule 128 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    TIMES           reduce using rule 128 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    TYPEID          reduce using rule 128 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    SEMI            reduce using rule 128 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    LBRACKET        reduce using rule 128 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    RPAREN          reduce using rule 128 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)
    COMMA           reduce using rule 128 (specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid .)


state 257

    (129) specifier_qualifier_list -> specifier_qualifier_list type_qualifier .

    VOID            reduce using rule 129 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    _BOOL           reduce using rule 129 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    CHAR            reduce using rule 129 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    SHORT           reduce using rule 129 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    INT             reduce using rule 129 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    LONG            reduce using rule 129 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    FLOAT           reduce using rule 129 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    DOUBLE          reduce using rule 129 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    _COMPLEX        reduce using rule 129 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    SIGNED          reduce using rule 129 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    UNSIGNED        reduce using rule 129 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    __INT128        reduce using rule 129 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    CONST           reduce using rule 129 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    RESTRICT        reduce using rule 129 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    VOLATILE        reduce using rule 129 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    COLON           reduce using rule 129 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    ID              reduce using rule 129 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    LPAREN          reduce using rule 129 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    TIMES           reduce using rule 129 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    TYPEID          reduce using rule 129 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    SEMI            reduce using rule 129 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    LBRACKET        reduce using rule 129 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    RPAREN          reduce using rule 129 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    COMMA           reduce using rule 129 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)


state 258

    (25) struct_declarator_list_opt -> empty .

    SEMI            reduce using rule 25 (struct_declarator_list_opt -> empty .)


state 259

    (26) struct_declarator_list_opt -> struct_declarator_list .
    (148) struct_declarator_list -> struct_declarator_list . COMMA struct_declarator

    SEMI            reduce using rule 26 (struct_declarator_list_opt -> struct_declarator_list .)
    COMMA           shift and go to state 378


state 260

    (147) struct_declarator_list -> struct_declarator .

    COMMA           reduce using rule 147 (struct_declarator_list -> struct_declarator .)
    SEMI            reduce using rule 147 (struct_declarator_list -> struct_declarator .)


state 261

    (149) struct_declarator -> declarator .
    (150) struct_declarator -> declarator . COLON constant_expression

    COMMA           reduce using rule 149 (struct_declarator -> declarator .)
    SEMI            reduce using rule 149 (struct_declarator -> declarator .)
    COLON           shift and go to state 379


state 262

    (151) struct_declarator -> COLON . constant_expression
    (235) constant_expression -> . conditional_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 271
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    constant_expression            shift and go to state 380
    conditional_expression         shift and go to state 269
    binary_expression              shift and go to state 181
    cast_expression                shift and go to state 186
    unary_expression               shift and go to state 270
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 263

    (131) specifier_qualifier_list -> type_qualifier_list type_specifier .

    VOID            reduce using rule 131 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    _BOOL           reduce using rule 131 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    CHAR            reduce using rule 131 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    SHORT           reduce using rule 131 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    INT             reduce using rule 131 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    LONG            reduce using rule 131 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    FLOAT           reduce using rule 131 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    DOUBLE          reduce using rule 131 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    _COMPLEX        reduce using rule 131 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    SIGNED          reduce using rule 131 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    UNSIGNED        reduce using rule 131 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    __INT128        reduce using rule 131 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    CONST           reduce using rule 131 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    RESTRICT        reduce using rule 131 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    VOLATILE        reduce using rule 131 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    COLON           reduce using rule 131 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    ID              reduce using rule 131 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    LPAREN          reduce using rule 131 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    TIMES           reduce using rule 131 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    TYPEID          reduce using rule 131 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    SEMI            reduce using rule 131 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    LBRACKET        reduce using rule 131 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    RPAREN          reduce using rule 131 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    COMMA           reduce using rule 131 (specifier_qualifier_list -> type_qualifier_list type_specifier .)


state 264

    (202) compound_statement -> brace_open block_item_list_opt brace_close .

    SEMI            reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    PPHASH          reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    PPPRAGMA        reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    ID              reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    LPAREN          reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    TIMES           reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    TYPEID          reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    ENUM            reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    VOID            reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    _BOOL           reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    CHAR            reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    SHORT           reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    INT             reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    LONG            reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    FLOAT           reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    DOUBLE          reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    _COMPLEX        reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    SIGNED          reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    UNSIGNED        reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    __INT128        reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    CONST           reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    RESTRICT        reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    VOLATILE        reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    AUTO            reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    REGISTER        reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    STATIC          reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    EXTERN          reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    TYPEDEF         reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    INLINE          reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    STRUCT          reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    UNION           reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    $end            reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    CASE            reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    DEFAULT         reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    IF              reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    SWITCH          reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    WHILE           reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    DO              reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    FOR             reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    GOTO            reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    BREAK           reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    CONTINUE        reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    RETURN          reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    LBRACE          reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    PLUSPLUS        reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    MINUSMINUS      reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    SIZEOF          reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    AND             reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    PLUS            reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    MINUS           reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    NOT             reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    LNOT            reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    OFFSETOF        reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    INT_CONST_DEC   reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    INT_CONST_OCT   reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    INT_CONST_HEX   reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    INT_CONST_BIN   reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    FLOAT_CONST     reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    HEX_FLOAT_CONST reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    CHAR_CONST      reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    WCHAR_CONST     reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    STRING_LITERAL  reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    WSTRING_LITERAL reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    RBRACE          reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)
    ELSE            reduce using rule 202 (compound_statement -> brace_open block_item_list_opt brace_close .)


state 265

    (201) block_item_list -> block_item_list block_item .

    ID              reduce using rule 201 (block_item_list -> block_item_list block_item .)
    CASE            reduce using rule 201 (block_item_list -> block_item_list block_item .)
    DEFAULT         reduce using rule 201 (block_item_list -> block_item_list block_item .)
    IF              reduce using rule 201 (block_item_list -> block_item_list block_item .)
    SWITCH          reduce using rule 201 (block_item_list -> block_item_list block_item .)
    WHILE           reduce using rule 201 (block_item_list -> block_item_list block_item .)
    DO              reduce using rule 201 (block_item_list -> block_item_list block_item .)
    FOR             reduce using rule 201 (block_item_list -> block_item_list block_item .)
    GOTO            reduce using rule 201 (block_item_list -> block_item_list block_item .)
    BREAK           reduce using rule 201 (block_item_list -> block_item_list block_item .)
    CONTINUE        reduce using rule 201 (block_item_list -> block_item_list block_item .)
    RETURN          reduce using rule 201 (block_item_list -> block_item_list block_item .)
    PPPRAGMA        reduce using rule 201 (block_item_list -> block_item_list block_item .)
    LBRACE          reduce using rule 201 (block_item_list -> block_item_list block_item .)
    CONST           reduce using rule 201 (block_item_list -> block_item_list block_item .)
    RESTRICT        reduce using rule 201 (block_item_list -> block_item_list block_item .)
    VOLATILE        reduce using rule 201 (block_item_list -> block_item_list block_item .)
    AUTO            reduce using rule 201 (block_item_list -> block_item_list block_item .)
    REGISTER        reduce using rule 201 (block_item_list -> block_item_list block_item .)
    STATIC          reduce using rule 201 (block_item_list -> block_item_list block_item .)
    EXTERN          reduce using rule 201 (block_item_list -> block_item_list block_item .)
    TYPEDEF         reduce using rule 201 (block_item_list -> block_item_list block_item .)
    INLINE          reduce using rule 201 (block_item_list -> block_item_list block_item .)
    TYPEID          reduce using rule 201 (block_item_list -> block_item_list block_item .)
    ENUM            reduce using rule 201 (block_item_list -> block_item_list block_item .)
    VOID            reduce using rule 201 (block_item_list -> block_item_list block_item .)
    _BOOL           reduce using rule 201 (block_item_list -> block_item_list block_item .)
    CHAR            reduce using rule 201 (block_item_list -> block_item_list block_item .)
    SHORT           reduce using rule 201 (block_item_list -> block_item_list block_item .)
    INT             reduce using rule 201 (block_item_list -> block_item_list block_item .)
    LONG            reduce using rule 201 (block_item_list -> block_item_list block_item .)
    FLOAT           reduce using rule 201 (block_item_list -> block_item_list block_item .)
    DOUBLE          reduce using rule 201 (block_item_list -> block_item_list block_item .)
    _COMPLEX        reduce using rule 201 (block_item_list -> block_item_list block_item .)
    SIGNED          reduce using rule 201 (block_item_list -> block_item_list block_item .)
    UNSIGNED        reduce using rule 201 (block_item_list -> block_item_list block_item .)
    __INT128        reduce using rule 201 (block_item_list -> block_item_list block_item .)
    STRUCT          reduce using rule 201 (block_item_list -> block_item_list block_item .)
    UNION           reduce using rule 201 (block_item_list -> block_item_list block_item .)
    PLUSPLUS        reduce using rule 201 (block_item_list -> block_item_list block_item .)
    MINUSMINUS      reduce using rule 201 (block_item_list -> block_item_list block_item .)
    SIZEOF          reduce using rule 201 (block_item_list -> block_item_list block_item .)
    LPAREN          reduce using rule 201 (block_item_list -> block_item_list block_item .)
    AND             reduce using rule 201 (block_item_list -> block_item_list block_item .)
    TIMES           reduce using rule 201 (block_item_list -> block_item_list block_item .)
    PLUS            reduce using rule 201 (block_item_list -> block_item_list block_item .)
    MINUS           reduce using rule 201 (block_item_list -> block_item_list block_item .)
    NOT             reduce using rule 201 (block_item_list -> block_item_list block_item .)
    LNOT            reduce using rule 201 (block_item_list -> block_item_list block_item .)
    OFFSETOF        reduce using rule 201 (block_item_list -> block_item_list block_item .)
    INT_CONST_DEC   reduce using rule 201 (block_item_list -> block_item_list block_item .)
    INT_CONST_OCT   reduce using rule 201 (block_item_list -> block_item_list block_item .)
    INT_CONST_HEX   reduce using rule 201 (block_item_list -> block_item_list block_item .)
    INT_CONST_BIN   reduce using rule 201 (block_item_list -> block_item_list block_item .)
    FLOAT_CONST     reduce using rule 201 (block_item_list -> block_item_list block_item .)
    HEX_FLOAT_CONST reduce using rule 201 (block_item_list -> block_item_list block_item .)
    CHAR_CONST      reduce using rule 201 (block_item_list -> block_item_list block_item .)
    WCHAR_CONST     reduce using rule 201 (block_item_list -> block_item_list block_item .)
    STRING_LITERAL  reduce using rule 201 (block_item_list -> block_item_list block_item .)
    WSTRING_LITERAL reduce using rule 201 (block_item_list -> block_item_list block_item .)
    SEMI            reduce using rule 201 (block_item_list -> block_item_list block_item .)
    RBRACE          reduce using rule 201 (block_item_list -> block_item_list block_item .)


state 266

    (13) expression_opt -> empty .

    SEMI            reduce using rule 13 (expression_opt -> empty .)
    RPAREN          reduce using rule 13 (expression_opt -> empty .)


state 267

    (203) labeled_statement -> ID COLON . pragmacomp_or_statement
    (79) pragmacomp_or_statement -> . pppragma_directive statement
    (80) pragmacomp_or_statement -> . statement
    (68) pppragma_directive -> . PPPRAGMA
    (69) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (72) statement -> . labeled_statement
    (73) statement -> . expression_statement
    (74) statement -> . compound_statement
    (75) statement -> . selection_statement
    (76) statement -> . iteration_statement
    (77) statement -> . jump_statement
    (78) statement -> . pppragma_directive
    (203) labeled_statement -> . ID COLON pragmacomp_or_statement
    (204) labeled_statement -> . CASE constant_expression COLON pragmacomp_or_statement
    (205) labeled_statement -> . DEFAULT COLON pragmacomp_or_statement
    (218) expression_statement -> . expression_opt SEMI
    (202) compound_statement -> . brace_open block_item_list_opt brace_close
    (206) selection_statement -> . IF LPAREN expression RPAREN pragmacomp_or_statement
    (207) selection_statement -> . IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
    (208) selection_statement -> . SWITCH LPAREN expression RPAREN pragmacomp_or_statement
    (209) iteration_statement -> . WHILE LPAREN expression RPAREN pragmacomp_or_statement
    (210) iteration_statement -> . DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI
    (211) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (212) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (213) jump_statement -> . GOTO ID SEMI
    (214) jump_statement -> . BREAK SEMI
    (215) jump_statement -> . CONTINUE SEMI
    (216) jump_statement -> . RETURN expression SEMI
    (217) jump_statement -> . RETURN SEMI
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (307) brace_open -> . LBRACE
    (309) empty -> .
    (219) expression -> . assignment_expression
    (220) expression -> . expression COMMA assignment_expression
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PPPRAGMA        shift and go to state 14
    ID              shift and go to state 163
    CASE            shift and go to state 164
    DEFAULT         shift and go to state 165
    IF              shift and go to state 167
    SWITCH          shift and go to state 170
    WHILE           shift and go to state 171
    DO              shift and go to state 172
    FOR             shift and go to state 173
    GOTO            shift and go to state 174
    BREAK           shift and go to state 175
    CONTINUE        shift and go to state 176
    RETURN          shift and go to state 177
    LBRACE          shift and go to state 101
    SEMI            reduce using rule 309 (empty -> .)
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    pragmacomp_or_statement        shift and go to state 381
    pppragma_directive             shift and go to state 282
    statement                      shift and go to state 283
    labeled_statement              shift and go to state 156
    expression_statement           shift and go to state 157
    compound_statement             shift and go to state 158
    selection_statement            shift and go to state 159
    iteration_statement            shift and go to state 160
    jump_statement                 shift and go to state 161
    expression_opt                 shift and go to state 166
    brace_open                     shift and go to state 106
    expression                     shift and go to state 169
    empty                          shift and go to state 266
    assignment_expression          shift and go to state 178
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 268

    (204) labeled_statement -> CASE constant_expression . COLON pragmacomp_or_statement

    COLON           shift and go to state 382


state 269

    (235) constant_expression -> conditional_expression .

    COLON           reduce using rule 235 (constant_expression -> conditional_expression .)
    COMMA           reduce using rule 235 (constant_expression -> conditional_expression .)
    RBRACE          reduce using rule 235 (constant_expression -> conditional_expression .)
    SEMI            reduce using rule 235 (constant_expression -> conditional_expression .)
    RBRACKET        reduce using rule 235 (constant_expression -> conditional_expression .)


state 270

    (257) cast_expression -> unary_expression .

    CONDOP          reduce using rule 257 (cast_expression -> unary_expression .)
    TIMES           reduce using rule 257 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 257 (cast_expression -> unary_expression .)
    MOD             reduce using rule 257 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 257 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 257 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 257 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 257 (cast_expression -> unary_expression .)
    LT              reduce using rule 257 (cast_expression -> unary_expression .)
    LE              reduce using rule 257 (cast_expression -> unary_expression .)
    GE              reduce using rule 257 (cast_expression -> unary_expression .)
    GT              reduce using rule 257 (cast_expression -> unary_expression .)
    EQ              reduce using rule 257 (cast_expression -> unary_expression .)
    NE              reduce using rule 257 (cast_expression -> unary_expression .)
    AND             reduce using rule 257 (cast_expression -> unary_expression .)
    OR              reduce using rule 257 (cast_expression -> unary_expression .)
    XOR             reduce using rule 257 (cast_expression -> unary_expression .)
    LAND            reduce using rule 257 (cast_expression -> unary_expression .)
    LOR             reduce using rule 257 (cast_expression -> unary_expression .)
    COLON           reduce using rule 257 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 257 (cast_expression -> unary_expression .)
    XOREQUAL        reduce using rule 257 (cast_expression -> unary_expression .)
    TIMESEQUAL      reduce using rule 257 (cast_expression -> unary_expression .)
    DIVEQUAL        reduce using rule 257 (cast_expression -> unary_expression .)
    MODEQUAL        reduce using rule 257 (cast_expression -> unary_expression .)
    PLUSEQUAL       reduce using rule 257 (cast_expression -> unary_expression .)
    MINUSEQUAL      reduce using rule 257 (cast_expression -> unary_expression .)
    LSHIFTEQUAL     reduce using rule 257 (cast_expression -> unary_expression .)
    RSHIFTEQUAL     reduce using rule 257 (cast_expression -> unary_expression .)
    ANDEQUAL        reduce using rule 257 (cast_expression -> unary_expression .)
    OREQUAL         reduce using rule 257 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 257 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 257 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 257 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 257 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 257 (cast_expression -> unary_expression .)


state 271

    (258) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (281) postfix_expression -> LPAREN . type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> LPAREN . type_name RPAREN brace_open initializer_list COMMA brace_close
    (287) primary_expression -> LPAREN . expression RPAREN
    (187) type_name -> . specifier_qualifier_list abstract_declarator_opt
    (219) expression -> . assignment_expression
    (220) expression -> . expression COMMA assignment_expression
    (128) specifier_qualifier_list -> . specifier_qualifier_list type_specifier_no_typeid
    (129) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (130) specifier_qualifier_list -> . type_specifier
    (131) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (113) type_specifier -> . typedef_name
    (114) type_specifier -> . enum_specifier
    (115) type_specifier -> . struct_or_union_specifier
    (116) type_specifier -> . type_specifier_no_typeid
    (166) type_qualifier_list -> . type_qualifier
    (167) type_qualifier_list -> . type_qualifier_list type_qualifier
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (221) typedef_name -> . TYPEID
    (152) enum_specifier -> . ENUM ID
    (153) enum_specifier -> . ENUM TYPEID
    (154) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (155) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (156) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (132) struct_or_union_specifier -> . struct_or_union ID
    (133) struct_or_union_specifier -> . struct_or_union TYPEID
    (134) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (135) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (136) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (137) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (138) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (139) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (101) type_specifier_no_typeid -> . VOID
    (102) type_specifier_no_typeid -> . _BOOL
    (103) type_specifier_no_typeid -> . CHAR
    (104) type_specifier_no_typeid -> . SHORT
    (105) type_specifier_no_typeid -> . INT
    (106) type_specifier_no_typeid -> . LONG
    (107) type_specifier_no_typeid -> . FLOAT
    (108) type_specifier_no_typeid -> . DOUBLE
    (109) type_specifier_no_typeid -> . _COMPLEX
    (110) type_specifier_no_typeid -> . SIGNED
    (111) type_specifier_no_typeid -> . UNSIGNED
    (112) type_specifier_no_typeid -> . __INT128
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    VOID            shift and go to state 33
    _BOOL           shift and go to state 34
    CHAR            shift and go to state 35
    SHORT           shift and go to state 36
    INT             shift and go to state 37
    LONG            shift and go to state 38
    FLOAT           shift and go to state 39
    DOUBLE          shift and go to state 40
    _COMPLEX        shift and go to state 41
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 43
    __INT128        shift and go to state 44
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    STRUCT          shift and go to state 53
    UNION           shift and go to state 54
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    type_name                      shift and go to state 383
    cast_expression                shift and go to state 186
    expression                     shift and go to state 276
    specifier_qualifier_list       shift and go to state 277
    assignment_expression          shift and go to state 178
    type_specifier_no_typeid       shift and go to state 20
    type_qualifier                 shift and go to state 97
    type_specifier                 shift and go to state 148
    type_qualifier_list            shift and go to state 149
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    typedef_name                   shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union_specifier      shift and go to state 29
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    struct_or_union                shift and go to state 32
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 272

    (205) labeled_statement -> DEFAULT COLON . pragmacomp_or_statement
    (79) pragmacomp_or_statement -> . pppragma_directive statement
    (80) pragmacomp_or_statement -> . statement
    (68) pppragma_directive -> . PPPRAGMA
    (69) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (72) statement -> . labeled_statement
    (73) statement -> . expression_statement
    (74) statement -> . compound_statement
    (75) statement -> . selection_statement
    (76) statement -> . iteration_statement
    (77) statement -> . jump_statement
    (78) statement -> . pppragma_directive
    (203) labeled_statement -> . ID COLON pragmacomp_or_statement
    (204) labeled_statement -> . CASE constant_expression COLON pragmacomp_or_statement
    (205) labeled_statement -> . DEFAULT COLON pragmacomp_or_statement
    (218) expression_statement -> . expression_opt SEMI
    (202) compound_statement -> . brace_open block_item_list_opt brace_close
    (206) selection_statement -> . IF LPAREN expression RPAREN pragmacomp_or_statement
    (207) selection_statement -> . IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
    (208) selection_statement -> . SWITCH LPAREN expression RPAREN pragmacomp_or_statement
    (209) iteration_statement -> . WHILE LPAREN expression RPAREN pragmacomp_or_statement
    (210) iteration_statement -> . DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI
    (211) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (212) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (213) jump_statement -> . GOTO ID SEMI
    (214) jump_statement -> . BREAK SEMI
    (215) jump_statement -> . CONTINUE SEMI
    (216) jump_statement -> . RETURN expression SEMI
    (217) jump_statement -> . RETURN SEMI
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (307) brace_open -> . LBRACE
    (309) empty -> .
    (219) expression -> . assignment_expression
    (220) expression -> . expression COMMA assignment_expression
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PPPRAGMA        shift and go to state 14
    ID              shift and go to state 163
    CASE            shift and go to state 164
    DEFAULT         shift and go to state 165
    IF              shift and go to state 167
    SWITCH          shift and go to state 170
    WHILE           shift and go to state 171
    DO              shift and go to state 172
    FOR             shift and go to state 173
    GOTO            shift and go to state 174
    BREAK           shift and go to state 175
    CONTINUE        shift and go to state 176
    RETURN          shift and go to state 177
    LBRACE          shift and go to state 101
    SEMI            reduce using rule 309 (empty -> .)
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    pragmacomp_or_statement        shift and go to state 384
    pppragma_directive             shift and go to state 282
    statement                      shift and go to state 283
    labeled_statement              shift and go to state 156
    expression_statement           shift and go to state 157
    compound_statement             shift and go to state 158
    selection_statement            shift and go to state 159
    iteration_statement            shift and go to state 160
    jump_statement                 shift and go to state 161
    expression_opt                 shift and go to state 166
    brace_open                     shift and go to state 106
    expression                     shift and go to state 169
    empty                          shift and go to state 266
    assignment_expression          shift and go to state 178
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 273

    (218) expression_statement -> expression_opt SEMI .

    ID              reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    CASE            reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    DEFAULT         reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    IF              reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    SWITCH          reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    WHILE           reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    DO              reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    FOR             reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    GOTO            reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    BREAK           reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    CONTINUE        reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    RETURN          reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    PPPRAGMA        reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    LBRACE          reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    CONST           reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    RESTRICT        reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    VOLATILE        reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    AUTO            reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    REGISTER        reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    STATIC          reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    EXTERN          reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    TYPEDEF         reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    INLINE          reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    TYPEID          reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    ENUM            reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    VOID            reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    _BOOL           reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    CHAR            reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    SHORT           reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    INT             reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    LONG            reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    FLOAT           reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    DOUBLE          reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    _COMPLEX        reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    SIGNED          reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    UNSIGNED        reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    __INT128        reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    STRUCT          reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    UNION           reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    PLUSPLUS        reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    MINUSMINUS      reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    SIZEOF          reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    LPAREN          reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    AND             reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    TIMES           reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    PLUS            reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    MINUS           reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    NOT             reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    LNOT            reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    OFFSETOF        reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    INT_CONST_DEC   reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    INT_CONST_OCT   reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    INT_CONST_HEX   reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    INT_CONST_BIN   reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    FLOAT_CONST     reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    HEX_FLOAT_CONST reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    CHAR_CONST      reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    WCHAR_CONST     reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    STRING_LITERAL  reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    WSTRING_LITERAL reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    SEMI            reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    RBRACE          reduce using rule 218 (expression_statement -> expression_opt SEMI .)
    ELSE            reduce using rule 218 (expression_statement -> expression_opt SEMI .)


state 274

    (206) selection_statement -> IF LPAREN . expression RPAREN pragmacomp_or_statement
    (207) selection_statement -> IF LPAREN . expression RPAREN statement ELSE pragmacomp_or_statement
    (219) expression -> . assignment_expression
    (220) expression -> . expression COMMA assignment_expression
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    expression                     shift and go to state 385
    assignment_expression          shift and go to state 178
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 275

    (281) postfix_expression -> LPAREN type_name . RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> LPAREN type_name . RPAREN brace_open initializer_list COMMA brace_close
    (258) cast_expression -> LPAREN type_name . RPAREN cast_expression

    RPAREN          shift and go to state 386


state 276

    (287) primary_expression -> LPAREN expression . RPAREN
    (220) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 387
    COMMA           shift and go to state 278


state 277

    (187) type_name -> specifier_qualifier_list . abstract_declarator_opt
    (128) specifier_qualifier_list -> specifier_qualifier_list . type_specifier_no_typeid
    (129) specifier_qualifier_list -> specifier_qualifier_list . type_qualifier
    (1) abstract_declarator_opt -> . empty
    (2) abstract_declarator_opt -> . abstract_declarator
    (101) type_specifier_no_typeid -> . VOID
    (102) type_specifier_no_typeid -> . _BOOL
    (103) type_specifier_no_typeid -> . CHAR
    (104) type_specifier_no_typeid -> . SHORT
    (105) type_specifier_no_typeid -> . INT
    (106) type_specifier_no_typeid -> . LONG
    (107) type_specifier_no_typeid -> . FLOAT
    (108) type_specifier_no_typeid -> . DOUBLE
    (109) type_specifier_no_typeid -> . _COMPLEX
    (110) type_specifier_no_typeid -> . SIGNED
    (111) type_specifier_no_typeid -> . UNSIGNED
    (112) type_specifier_no_typeid -> . __INT128
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE
    (309) empty -> .
    (188) abstract_declarator -> . pointer
    (189) abstract_declarator -> . pointer direct_abstract_declarator
    (190) abstract_declarator -> . direct_abstract_declarator
    (164) pointer -> . TIMES type_qualifier_list_opt
    (165) pointer -> . TIMES type_qualifier_list_opt pointer
    (191) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (192) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (193) direct_abstract_declarator -> . LBRACKET assignment_expression_opt RBRACKET
    (194) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (195) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (196) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (197) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN

    VOID            shift and go to state 33
    _BOOL           shift and go to state 34
    CHAR            shift and go to state 35
    SHORT           shift and go to state 36
    INT             shift and go to state 37
    LONG            shift and go to state 38
    FLOAT           shift and go to state 39
    DOUBLE          shift and go to state 40
    _COMPLEX        shift and go to state 41
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 43
    __INT128        shift and go to state 44
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47
    RPAREN          reduce using rule 309 (empty -> .)
    COMMA           reduce using rule 309 (empty -> .)
    TIMES           shift and go to state 26
    LPAREN          shift and go to state 390
    LBRACKET        shift and go to state 239

    abstract_declarator_opt        shift and go to state 388
    type_specifier_no_typeid       shift and go to state 256
    type_qualifier                 shift and go to state 257
    empty                          shift and go to state 236
    abstract_declarator            shift and go to state 237
    pointer                        shift and go to state 389
    direct_abstract_declarator     shift and go to state 241

state 278

    (220) expression -> expression COMMA . assignment_expression
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    assignment_expression          shift and go to state 391
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 279

    (208) selection_statement -> SWITCH LPAREN . expression RPAREN pragmacomp_or_statement
    (219) expression -> . assignment_expression
    (220) expression -> . expression COMMA assignment_expression
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    expression                     shift and go to state 392
    assignment_expression          shift and go to state 178
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 280

    (209) iteration_statement -> WHILE LPAREN . expression RPAREN pragmacomp_or_statement
    (219) expression -> . assignment_expression
    (220) expression -> . expression COMMA assignment_expression
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    expression                     shift and go to state 393
    assignment_expression          shift and go to state 178
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 281

    (210) iteration_statement -> DO pragmacomp_or_statement . WHILE LPAREN expression RPAREN SEMI

    WHILE           shift and go to state 394


state 282

    (79) pragmacomp_or_statement -> pppragma_directive . statement
    (78) statement -> pppragma_directive .
    (72) statement -> . labeled_statement
    (73) statement -> . expression_statement
    (74) statement -> . compound_statement
    (75) statement -> . selection_statement
    (76) statement -> . iteration_statement
    (77) statement -> . jump_statement
    (78) statement -> . pppragma_directive
    (203) labeled_statement -> . ID COLON pragmacomp_or_statement
    (204) labeled_statement -> . CASE constant_expression COLON pragmacomp_or_statement
    (205) labeled_statement -> . DEFAULT COLON pragmacomp_or_statement
    (218) expression_statement -> . expression_opt SEMI
    (202) compound_statement -> . brace_open block_item_list_opt brace_close
    (206) selection_statement -> . IF LPAREN expression RPAREN pragmacomp_or_statement
    (207) selection_statement -> . IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
    (208) selection_statement -> . SWITCH LPAREN expression RPAREN pragmacomp_or_statement
    (209) iteration_statement -> . WHILE LPAREN expression RPAREN pragmacomp_or_statement
    (210) iteration_statement -> . DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI
    (211) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (212) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (213) jump_statement -> . GOTO ID SEMI
    (214) jump_statement -> . BREAK SEMI
    (215) jump_statement -> . CONTINUE SEMI
    (216) jump_statement -> . RETURN expression SEMI
    (217) jump_statement -> . RETURN SEMI
    (68) pppragma_directive -> . PPPRAGMA
    (69) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (307) brace_open -> . LBRACE
    (309) empty -> .
    (219) expression -> . assignment_expression
    (220) expression -> . expression COMMA assignment_expression
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GOTO resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PPPRAGMA resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! reduce/reduce conflict for SEMI resolved using rule 78 (statement -> pppragma_directive .)
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for SIZEOF resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LNOT resolved as shift
  ! shift/reduce conflict for OFFSETOF resolved as shift
  ! shift/reduce conflict for INT_CONST_DEC resolved as shift
  ! shift/reduce conflict for INT_CONST_OCT resolved as shift
  ! shift/reduce conflict for INT_CONST_HEX resolved as shift
  ! shift/reduce conflict for INT_CONST_BIN resolved as shift
  ! shift/reduce conflict for FLOAT_CONST resolved as shift
  ! shift/reduce conflict for HEX_FLOAT_CONST resolved as shift
  ! shift/reduce conflict for CHAR_CONST resolved as shift
  ! shift/reduce conflict for WCHAR_CONST resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for WSTRING_LITERAL resolved as shift
    CONST           reduce using rule 78 (statement -> pppragma_directive .)
    RESTRICT        reduce using rule 78 (statement -> pppragma_directive .)
    VOLATILE        reduce using rule 78 (statement -> pppragma_directive .)
    AUTO            reduce using rule 78 (statement -> pppragma_directive .)
    REGISTER        reduce using rule 78 (statement -> pppragma_directive .)
    STATIC          reduce using rule 78 (statement -> pppragma_directive .)
    EXTERN          reduce using rule 78 (statement -> pppragma_directive .)
    TYPEDEF         reduce using rule 78 (statement -> pppragma_directive .)
    INLINE          reduce using rule 78 (statement -> pppragma_directive .)
    TYPEID          reduce using rule 78 (statement -> pppragma_directive .)
    ENUM            reduce using rule 78 (statement -> pppragma_directive .)
    VOID            reduce using rule 78 (statement -> pppragma_directive .)
    _BOOL           reduce using rule 78 (statement -> pppragma_directive .)
    CHAR            reduce using rule 78 (statement -> pppragma_directive .)
    SHORT           reduce using rule 78 (statement -> pppragma_directive .)
    INT             reduce using rule 78 (statement -> pppragma_directive .)
    LONG            reduce using rule 78 (statement -> pppragma_directive .)
    FLOAT           reduce using rule 78 (statement -> pppragma_directive .)
    DOUBLE          reduce using rule 78 (statement -> pppragma_directive .)
    _COMPLEX        reduce using rule 78 (statement -> pppragma_directive .)
    SIGNED          reduce using rule 78 (statement -> pppragma_directive .)
    UNSIGNED        reduce using rule 78 (statement -> pppragma_directive .)
    __INT128        reduce using rule 78 (statement -> pppragma_directive .)
    STRUCT          reduce using rule 78 (statement -> pppragma_directive .)
    UNION           reduce using rule 78 (statement -> pppragma_directive .)
    SEMI            reduce using rule 78 (statement -> pppragma_directive .)
    RBRACE          reduce using rule 78 (statement -> pppragma_directive .)
    ELSE            reduce using rule 78 (statement -> pppragma_directive .)
    ID              shift and go to state 163
    CASE            shift and go to state 164
    DEFAULT         shift and go to state 165
    IF              shift and go to state 167
    SWITCH          shift and go to state 170
    WHILE           shift and go to state 171
    DO              shift and go to state 172
    FOR             shift and go to state 173
    GOTO            shift and go to state 174
    BREAK           shift and go to state 175
    CONTINUE        shift and go to state 176
    RETURN          shift and go to state 177
    PPPRAGMA        shift and go to state 14
    LBRACE          shift and go to state 101
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

  ! WHILE           [ reduce using rule 78 (statement -> pppragma_directive .) ]
  ! ID              [ reduce using rule 78 (statement -> pppragma_directive .) ]
  ! CASE            [ reduce using rule 78 (statement -> pppragma_directive .) ]
  ! DEFAULT         [ reduce using rule 78 (statement -> pppragma_directive .) ]
  ! IF              [ reduce using rule 78 (statement -> pppragma_directive .) ]
  ! SWITCH          [ reduce using rule 78 (statement -> pppragma_directive .) ]
  ! DO              [ reduce using rule 78 (statement -> pppragma_directive .) ]
  ! FOR             [ reduce using rule 78 (statement -> pppragma_directive .) ]
  ! GOTO            [ reduce using rule 78 (statement -> pppragma_directive .) ]
  ! BREAK           [ reduce using rule 78 (statement -> pppragma_directive .) ]
  ! CONTINUE        [ reduce using rule 78 (statement -> pppragma_directive .) ]
  ! RETURN          [ reduce using rule 78 (statement -> pppragma_directive .) ]
  ! PPPRAGMA        [ reduce using rule 78 (statement -> pppragma_directive .) ]
  ! LBRACE          [ reduce using rule 78 (statement -> pppragma_directive .) ]
  ! PLUSPLUS        [ reduce using rule 78 (statement -> pppragma_directive .) ]
  ! MINUSMINUS      [ reduce using rule 78 (statement -> pppragma_directive .) ]
  ! SIZEOF          [ reduce using rule 78 (statement -> pppragma_directive .) ]
  ! LPAREN          [ reduce using rule 78 (statement -> pppragma_directive .) ]
  ! AND             [ reduce using rule 78 (statement -> pppragma_directive .) ]
  ! TIMES           [ reduce using rule 78 (statement -> pppragma_directive .) ]
  ! PLUS            [ reduce using rule 78 (statement -> pppragma_directive .) ]
  ! MINUS           [ reduce using rule 78 (statement -> pppragma_directive .) ]
  ! NOT             [ reduce using rule 78 (statement -> pppragma_directive .) ]
  ! LNOT            [ reduce using rule 78 (statement -> pppragma_directive .) ]
  ! OFFSETOF        [ reduce using rule 78 (statement -> pppragma_directive .) ]
  ! INT_CONST_DEC   [ reduce using rule 78 (statement -> pppragma_directive .) ]
  ! INT_CONST_OCT   [ reduce using rule 78 (statement -> pppragma_directive .) ]
  ! INT_CONST_HEX   [ reduce using rule 78 (statement -> pppragma_directive .) ]
  ! INT_CONST_BIN   [ reduce using rule 78 (statement -> pppragma_directive .) ]
  ! FLOAT_CONST     [ reduce using rule 78 (statement -> pppragma_directive .) ]
  ! HEX_FLOAT_CONST [ reduce using rule 78 (statement -> pppragma_directive .) ]
  ! CHAR_CONST      [ reduce using rule 78 (statement -> pppragma_directive .) ]
  ! WCHAR_CONST     [ reduce using rule 78 (statement -> pppragma_directive .) ]
  ! STRING_LITERAL  [ reduce using rule 78 (statement -> pppragma_directive .) ]
  ! WSTRING_LITERAL [ reduce using rule 78 (statement -> pppragma_directive .) ]
  ! SEMI            [ reduce using rule 309 (empty -> .) ]

    pppragma_directive             shift and go to state 162
    statement                      shift and go to state 395
    labeled_statement              shift and go to state 156
    expression_statement           shift and go to state 157
    compound_statement             shift and go to state 158
    selection_statement            shift and go to state 159
    iteration_statement            shift and go to state 160
    jump_statement                 shift and go to state 161
    expression_opt                 shift and go to state 166
    brace_open                     shift and go to state 106
    expression                     shift and go to state 169
    empty                          shift and go to state 266
    assignment_expression          shift and go to state 178
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 283

    (80) pragmacomp_or_statement -> statement .

    WHILE           reduce using rule 80 (pragmacomp_or_statement -> statement .)
    ID              reduce using rule 80 (pragmacomp_or_statement -> statement .)
    CASE            reduce using rule 80 (pragmacomp_or_statement -> statement .)
    DEFAULT         reduce using rule 80 (pragmacomp_or_statement -> statement .)
    IF              reduce using rule 80 (pragmacomp_or_statement -> statement .)
    SWITCH          reduce using rule 80 (pragmacomp_or_statement -> statement .)
    DO              reduce using rule 80 (pragmacomp_or_statement -> statement .)
    FOR             reduce using rule 80 (pragmacomp_or_statement -> statement .)
    GOTO            reduce using rule 80 (pragmacomp_or_statement -> statement .)
    BREAK           reduce using rule 80 (pragmacomp_or_statement -> statement .)
    CONTINUE        reduce using rule 80 (pragmacomp_or_statement -> statement .)
    RETURN          reduce using rule 80 (pragmacomp_or_statement -> statement .)
    PPPRAGMA        reduce using rule 80 (pragmacomp_or_statement -> statement .)
    LBRACE          reduce using rule 80 (pragmacomp_or_statement -> statement .)
    CONST           reduce using rule 80 (pragmacomp_or_statement -> statement .)
    RESTRICT        reduce using rule 80 (pragmacomp_or_statement -> statement .)
    VOLATILE        reduce using rule 80 (pragmacomp_or_statement -> statement .)
    AUTO            reduce using rule 80 (pragmacomp_or_statement -> statement .)
    REGISTER        reduce using rule 80 (pragmacomp_or_statement -> statement .)
    STATIC          reduce using rule 80 (pragmacomp_or_statement -> statement .)
    EXTERN          reduce using rule 80 (pragmacomp_or_statement -> statement .)
    TYPEDEF         reduce using rule 80 (pragmacomp_or_statement -> statement .)
    INLINE          reduce using rule 80 (pragmacomp_or_statement -> statement .)
    TYPEID          reduce using rule 80 (pragmacomp_or_statement -> statement .)
    ENUM            reduce using rule 80 (pragmacomp_or_statement -> statement .)
    VOID            reduce using rule 80 (pragmacomp_or_statement -> statement .)
    _BOOL           reduce using rule 80 (pragmacomp_or_statement -> statement .)
    CHAR            reduce using rule 80 (pragmacomp_or_statement -> statement .)
    SHORT           reduce using rule 80 (pragmacomp_or_statement -> statement .)
    INT             reduce using rule 80 (pragmacomp_or_statement -> statement .)
    LONG            reduce using rule 80 (pragmacomp_or_statement -> statement .)
    FLOAT           reduce using rule 80 (pragmacomp_or_statement -> statement .)
    DOUBLE          reduce using rule 80 (pragmacomp_or_statement -> statement .)
    _COMPLEX        reduce using rule 80 (pragmacomp_or_statement -> statement .)
    SIGNED          reduce using rule 80 (pragmacomp_or_statement -> statement .)
    UNSIGNED        reduce using rule 80 (pragmacomp_or_statement -> statement .)
    __INT128        reduce using rule 80 (pragmacomp_or_statement -> statement .)
    STRUCT          reduce using rule 80 (pragmacomp_or_statement -> statement .)
    UNION           reduce using rule 80 (pragmacomp_or_statement -> statement .)
    PLUSPLUS        reduce using rule 80 (pragmacomp_or_statement -> statement .)
    MINUSMINUS      reduce using rule 80 (pragmacomp_or_statement -> statement .)
    SIZEOF          reduce using rule 80 (pragmacomp_or_statement -> statement .)
    LPAREN          reduce using rule 80 (pragmacomp_or_statement -> statement .)
    AND             reduce using rule 80 (pragmacomp_or_statement -> statement .)
    TIMES           reduce using rule 80 (pragmacomp_or_statement -> statement .)
    PLUS            reduce using rule 80 (pragmacomp_or_statement -> statement .)
    MINUS           reduce using rule 80 (pragmacomp_or_statement -> statement .)
    NOT             reduce using rule 80 (pragmacomp_or_statement -> statement .)
    LNOT            reduce using rule 80 (pragmacomp_or_statement -> statement .)
    OFFSETOF        reduce using rule 80 (pragmacomp_or_statement -> statement .)
    INT_CONST_DEC   reduce using rule 80 (pragmacomp_or_statement -> statement .)
    INT_CONST_OCT   reduce using rule 80 (pragmacomp_or_statement -> statement .)
    INT_CONST_HEX   reduce using rule 80 (pragmacomp_or_statement -> statement .)
    INT_CONST_BIN   reduce using rule 80 (pragmacomp_or_statement -> statement .)
    FLOAT_CONST     reduce using rule 80 (pragmacomp_or_statement -> statement .)
    HEX_FLOAT_CONST reduce using rule 80 (pragmacomp_or_statement -> statement .)
    CHAR_CONST      reduce using rule 80 (pragmacomp_or_statement -> statement .)
    WCHAR_CONST     reduce using rule 80 (pragmacomp_or_statement -> statement .)
    STRING_LITERAL  reduce using rule 80 (pragmacomp_or_statement -> statement .)
    WSTRING_LITERAL reduce using rule 80 (pragmacomp_or_statement -> statement .)
    SEMI            reduce using rule 80 (pragmacomp_or_statement -> statement .)
    RBRACE          reduce using rule 80 (pragmacomp_or_statement -> statement .)
    ELSE            reduce using rule 80 (pragmacomp_or_statement -> statement .)


state 284

    (211) iteration_statement -> FOR LPAREN . expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (212) iteration_statement -> FOR LPAREN . declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (83) declaration -> . decl_body SEMI
    (309) empty -> .
    (219) expression -> . assignment_expression
    (220) expression -> . expression COMMA assignment_expression
    (81) decl_body -> . declaration_specifiers init_declarator_list_opt
    (82) decl_body -> . declaration_specifiers_no_type id_init_declarator_list_opt
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (89) declaration_specifiers -> . declaration_specifiers type_qualifier
    (90) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (91) declaration_specifiers -> . declaration_specifiers function_specifier
    (92) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (93) declaration_specifiers -> . type_specifier
    (94) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (86) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (87) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (88) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (113) type_specifier -> . typedef_name
    (114) type_specifier -> . enum_specifier
    (115) type_specifier -> . struct_or_union_specifier
    (116) type_specifier -> . type_specifier_no_typeid
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE
    (95) storage_class_specifier -> . AUTO
    (96) storage_class_specifier -> . REGISTER
    (97) storage_class_specifier -> . STATIC
    (98) storage_class_specifier -> . EXTERN
    (99) storage_class_specifier -> . TYPEDEF
    (100) function_specifier -> . INLINE
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (221) typedef_name -> . TYPEID
    (152) enum_specifier -> . ENUM ID
    (153) enum_specifier -> . ENUM TYPEID
    (154) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (155) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (156) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (132) struct_or_union_specifier -> . struct_or_union ID
    (133) struct_or_union_specifier -> . struct_or_union TYPEID
    (134) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (135) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (136) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (137) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (138) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (139) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (101) type_specifier_no_typeid -> . VOID
    (102) type_specifier_no_typeid -> . _BOOL
    (103) type_specifier_no_typeid -> . CHAR
    (104) type_specifier_no_typeid -> . SHORT
    (105) type_specifier_no_typeid -> . INT
    (106) type_specifier_no_typeid -> . LONG
    (107) type_specifier_no_typeid -> . FLOAT
    (108) type_specifier_no_typeid -> . DOUBLE
    (109) type_specifier_no_typeid -> . _COMPLEX
    (110) type_specifier_no_typeid -> . SIGNED
    (111) type_specifier_no_typeid -> . UNSIGNED
    (112) type_specifier_no_typeid -> . __INT128
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    SEMI            reduce using rule 309 (empty -> .)
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47
    AUTO            shift and go to state 48
    REGISTER        shift and go to state 49
    STATIC          shift and go to state 25
    EXTERN          shift and go to state 50
    TYPEDEF         shift and go to state 51
    INLINE          shift and go to state 52
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    VOID            shift and go to state 33
    _BOOL           shift and go to state 34
    CHAR            shift and go to state 35
    SHORT           shift and go to state 36
    INT             shift and go to state 37
    LONG            shift and go to state 38
    FLOAT           shift and go to state 39
    DOUBLE          shift and go to state 40
    _COMPLEX        shift and go to state 41
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 43
    __INT128        shift and go to state 44
    OFFSETOF        shift and go to state 199
    STRUCT          shift and go to state 53
    UNION           shift and go to state 54
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    expression_opt                 shift and go to state 396
    declaration                    shift and go to state 397
    empty                          shift and go to state 266
    expression                     shift and go to state 169
    decl_body                      shift and go to state 12
    assignment_expression          shift and go to state 178
    declaration_specifiers         shift and go to state 60
    declaration_specifiers_no_type shift and go to state 61
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    type_qualifier                 shift and go to state 17
    storage_class_specifier        shift and go to state 18
    function_specifier             shift and go to state 19
    type_specifier_no_typeid       shift and go to state 20
    type_specifier                 shift and go to state 21
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    typedef_name                   shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union_specifier      shift and go to state 29
    primary_expression             shift and go to state 192
    struct_or_union                shift and go to state 32
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 285

    (213) jump_statement -> GOTO ID . SEMI

    SEMI            shift and go to state 398


state 286

    (214) jump_statement -> BREAK SEMI .

    ID              reduce using rule 214 (jump_statement -> BREAK SEMI .)
    CASE            reduce using rule 214 (jump_statement -> BREAK SEMI .)
    DEFAULT         reduce using rule 214 (jump_statement -> BREAK SEMI .)
    IF              reduce using rule 214 (jump_statement -> BREAK SEMI .)
    SWITCH          reduce using rule 214 (jump_statement -> BREAK SEMI .)
    WHILE           reduce using rule 214 (jump_statement -> BREAK SEMI .)
    DO              reduce using rule 214 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 214 (jump_statement -> BREAK SEMI .)
    GOTO            reduce using rule 214 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 214 (jump_statement -> BREAK SEMI .)
    CONTINUE        reduce using rule 214 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 214 (jump_statement -> BREAK SEMI .)
    PPPRAGMA        reduce using rule 214 (jump_statement -> BREAK SEMI .)
    LBRACE          reduce using rule 214 (jump_statement -> BREAK SEMI .)
    CONST           reduce using rule 214 (jump_statement -> BREAK SEMI .)
    RESTRICT        reduce using rule 214 (jump_statement -> BREAK SEMI .)
    VOLATILE        reduce using rule 214 (jump_statement -> BREAK SEMI .)
    AUTO            reduce using rule 214 (jump_statement -> BREAK SEMI .)
    REGISTER        reduce using rule 214 (jump_statement -> BREAK SEMI .)
    STATIC          reduce using rule 214 (jump_statement -> BREAK SEMI .)
    EXTERN          reduce using rule 214 (jump_statement -> BREAK SEMI .)
    TYPEDEF         reduce using rule 214 (jump_statement -> BREAK SEMI .)
    INLINE          reduce using rule 214 (jump_statement -> BREAK SEMI .)
    TYPEID          reduce using rule 214 (jump_statement -> BREAK SEMI .)
    ENUM            reduce using rule 214 (jump_statement -> BREAK SEMI .)
    VOID            reduce using rule 214 (jump_statement -> BREAK SEMI .)
    _BOOL           reduce using rule 214 (jump_statement -> BREAK SEMI .)
    CHAR            reduce using rule 214 (jump_statement -> BREAK SEMI .)
    SHORT           reduce using rule 214 (jump_statement -> BREAK SEMI .)
    INT             reduce using rule 214 (jump_statement -> BREAK SEMI .)
    LONG            reduce using rule 214 (jump_statement -> BREAK SEMI .)
    FLOAT           reduce using rule 214 (jump_statement -> BREAK SEMI .)
    DOUBLE          reduce using rule 214 (jump_statement -> BREAK SEMI .)
    _COMPLEX        reduce using rule 214 (jump_statement -> BREAK SEMI .)
    SIGNED          reduce using rule 214 (jump_statement -> BREAK SEMI .)
    UNSIGNED        reduce using rule 214 (jump_statement -> BREAK SEMI .)
    __INT128        reduce using rule 214 (jump_statement -> BREAK SEMI .)
    STRUCT          reduce using rule 214 (jump_statement -> BREAK SEMI .)
    UNION           reduce using rule 214 (jump_statement -> BREAK SEMI .)
    PLUSPLUS        reduce using rule 214 (jump_statement -> BREAK SEMI .)
    MINUSMINUS      reduce using rule 214 (jump_statement -> BREAK SEMI .)
    SIZEOF          reduce using rule 214 (jump_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 214 (jump_statement -> BREAK SEMI .)
    AND             reduce using rule 214 (jump_statement -> BREAK SEMI .)
    TIMES           reduce using rule 214 (jump_statement -> BREAK SEMI .)
    PLUS            reduce using rule 214 (jump_statement -> BREAK SEMI .)
    MINUS           reduce using rule 214 (jump_statement -> BREAK SEMI .)
    NOT             reduce using rule 214 (jump_statement -> BREAK SEMI .)
    LNOT            reduce using rule 214 (jump_statement -> BREAK SEMI .)
    OFFSETOF        reduce using rule 214 (jump_statement -> BREAK SEMI .)
    INT_CONST_DEC   reduce using rule 214 (jump_statement -> BREAK SEMI .)
    INT_CONST_OCT   reduce using rule 214 (jump_statement -> BREAK SEMI .)
    INT_CONST_HEX   reduce using rule 214 (jump_statement -> BREAK SEMI .)
    INT_CONST_BIN   reduce using rule 214 (jump_statement -> BREAK SEMI .)
    FLOAT_CONST     reduce using rule 214 (jump_statement -> BREAK SEMI .)
    HEX_FLOAT_CONST reduce using rule 214 (jump_statement -> BREAK SEMI .)
    CHAR_CONST      reduce using rule 214 (jump_statement -> BREAK SEMI .)
    WCHAR_CONST     reduce using rule 214 (jump_statement -> BREAK SEMI .)
    STRING_LITERAL  reduce using rule 214 (jump_statement -> BREAK SEMI .)
    WSTRING_LITERAL reduce using rule 214 (jump_statement -> BREAK SEMI .)
    SEMI            reduce using rule 214 (jump_statement -> BREAK SEMI .)
    RBRACE          reduce using rule 214 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 214 (jump_statement -> BREAK SEMI .)


state 287

    (215) jump_statement -> CONTINUE SEMI .

    ID              reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    CASE            reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    DEFAULT         reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    IF              reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    SWITCH          reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    WHILE           reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    DO              reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    FOR             reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    GOTO            reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    BREAK           reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    CONTINUE        reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    RETURN          reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    PPPRAGMA        reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    LBRACE          reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    CONST           reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    RESTRICT        reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    VOLATILE        reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    AUTO            reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    REGISTER        reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    STATIC          reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    EXTERN          reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    TYPEDEF         reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    INLINE          reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    TYPEID          reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    ENUM            reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    VOID            reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    _BOOL           reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    CHAR            reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    SHORT           reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    INT             reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    LONG            reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    FLOAT           reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    DOUBLE          reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    _COMPLEX        reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    SIGNED          reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    UNSIGNED        reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    __INT128        reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    STRUCT          reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    UNION           reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    PLUSPLUS        reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    MINUSMINUS      reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    SIZEOF          reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    LPAREN          reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    AND             reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    TIMES           reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    PLUS            reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    MINUS           reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    NOT             reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    LNOT            reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    OFFSETOF        reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    INT_CONST_DEC   reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    INT_CONST_OCT   reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    INT_CONST_HEX   reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    INT_CONST_BIN   reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    FLOAT_CONST     reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    HEX_FLOAT_CONST reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    CHAR_CONST      reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    WCHAR_CONST     reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    STRING_LITERAL  reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    WSTRING_LITERAL reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    SEMI            reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    RBRACE          reduce using rule 215 (jump_statement -> CONTINUE SEMI .)
    ELSE            reduce using rule 215 (jump_statement -> CONTINUE SEMI .)


state 288

    (216) jump_statement -> RETURN expression . SEMI
    (220) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 399
    COMMA           shift and go to state 278


state 289

    (217) jump_statement -> RETURN SEMI .

    ID              reduce using rule 217 (jump_statement -> RETURN SEMI .)
    CASE            reduce using rule 217 (jump_statement -> RETURN SEMI .)
    DEFAULT         reduce using rule 217 (jump_statement -> RETURN SEMI .)
    IF              reduce using rule 217 (jump_statement -> RETURN SEMI .)
    SWITCH          reduce using rule 217 (jump_statement -> RETURN SEMI .)
    WHILE           reduce using rule 217 (jump_statement -> RETURN SEMI .)
    DO              reduce using rule 217 (jump_statement -> RETURN SEMI .)
    FOR             reduce using rule 217 (jump_statement -> RETURN SEMI .)
    GOTO            reduce using rule 217 (jump_statement -> RETURN SEMI .)
    BREAK           reduce using rule 217 (jump_statement -> RETURN SEMI .)
    CONTINUE        reduce using rule 217 (jump_statement -> RETURN SEMI .)
    RETURN          reduce using rule 217 (jump_statement -> RETURN SEMI .)
    PPPRAGMA        reduce using rule 217 (jump_statement -> RETURN SEMI .)
    LBRACE          reduce using rule 217 (jump_statement -> RETURN SEMI .)
    CONST           reduce using rule 217 (jump_statement -> RETURN SEMI .)
    RESTRICT        reduce using rule 217 (jump_statement -> RETURN SEMI .)
    VOLATILE        reduce using rule 217 (jump_statement -> RETURN SEMI .)
    AUTO            reduce using rule 217 (jump_statement -> RETURN SEMI .)
    REGISTER        reduce using rule 217 (jump_statement -> RETURN SEMI .)
    STATIC          reduce using rule 217 (jump_statement -> RETURN SEMI .)
    EXTERN          reduce using rule 217 (jump_statement -> RETURN SEMI .)
    TYPEDEF         reduce using rule 217 (jump_statement -> RETURN SEMI .)
    INLINE          reduce using rule 217 (jump_statement -> RETURN SEMI .)
    TYPEID          reduce using rule 217 (jump_statement -> RETURN SEMI .)
    ENUM            reduce using rule 217 (jump_statement -> RETURN SEMI .)
    VOID            reduce using rule 217 (jump_statement -> RETURN SEMI .)
    _BOOL           reduce using rule 217 (jump_statement -> RETURN SEMI .)
    CHAR            reduce using rule 217 (jump_statement -> RETURN SEMI .)
    SHORT           reduce using rule 217 (jump_statement -> RETURN SEMI .)
    INT             reduce using rule 217 (jump_statement -> RETURN SEMI .)
    LONG            reduce using rule 217 (jump_statement -> RETURN SEMI .)
    FLOAT           reduce using rule 217 (jump_statement -> RETURN SEMI .)
    DOUBLE          reduce using rule 217 (jump_statement -> RETURN SEMI .)
    _COMPLEX        reduce using rule 217 (jump_statement -> RETURN SEMI .)
    SIGNED          reduce using rule 217 (jump_statement -> RETURN SEMI .)
    UNSIGNED        reduce using rule 217 (jump_statement -> RETURN SEMI .)
    __INT128        reduce using rule 217 (jump_statement -> RETURN SEMI .)
    STRUCT          reduce using rule 217 (jump_statement -> RETURN SEMI .)
    UNION           reduce using rule 217 (jump_statement -> RETURN SEMI .)
    PLUSPLUS        reduce using rule 217 (jump_statement -> RETURN SEMI .)
    MINUSMINUS      reduce using rule 217 (jump_statement -> RETURN SEMI .)
    SIZEOF          reduce using rule 217 (jump_statement -> RETURN SEMI .)
    LPAREN          reduce using rule 217 (jump_statement -> RETURN SEMI .)
    AND             reduce using rule 217 (jump_statement -> RETURN SEMI .)
    TIMES           reduce using rule 217 (jump_statement -> RETURN SEMI .)
    PLUS            reduce using rule 217 (jump_statement -> RETURN SEMI .)
    MINUS           reduce using rule 217 (jump_statement -> RETURN SEMI .)
    NOT             reduce using rule 217 (jump_statement -> RETURN SEMI .)
    LNOT            reduce using rule 217 (jump_statement -> RETURN SEMI .)
    OFFSETOF        reduce using rule 217 (jump_statement -> RETURN SEMI .)
    INT_CONST_DEC   reduce using rule 217 (jump_statement -> RETURN SEMI .)
    INT_CONST_OCT   reduce using rule 217 (jump_statement -> RETURN SEMI .)
    INT_CONST_HEX   reduce using rule 217 (jump_statement -> RETURN SEMI .)
    INT_CONST_BIN   reduce using rule 217 (jump_statement -> RETURN SEMI .)
    FLOAT_CONST     reduce using rule 217 (jump_statement -> RETURN SEMI .)
    HEX_FLOAT_CONST reduce using rule 217 (jump_statement -> RETURN SEMI .)
    CHAR_CONST      reduce using rule 217 (jump_statement -> RETURN SEMI .)
    WCHAR_CONST     reduce using rule 217 (jump_statement -> RETURN SEMI .)
    STRING_LITERAL  reduce using rule 217 (jump_statement -> RETURN SEMI .)
    WSTRING_LITERAL reduce using rule 217 (jump_statement -> RETURN SEMI .)
    SEMI            reduce using rule 217 (jump_statement -> RETURN SEMI .)
    RBRACE          reduce using rule 217 (jump_statement -> RETURN SEMI .)
    ELSE            reduce using rule 217 (jump_statement -> RETURN SEMI .)


state 290

    (223) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    unary_expression               shift and go to state 180
    assignment_expression          shift and go to state 400
    conditional_expression         shift and go to state 179
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 291

    (224) assignment_operator -> EQUALS .

    PLUSPLUS        reduce using rule 224 (assignment_operator -> EQUALS .)
    MINUSMINUS      reduce using rule 224 (assignment_operator -> EQUALS .)
    SIZEOF          reduce using rule 224 (assignment_operator -> EQUALS .)
    LPAREN          reduce using rule 224 (assignment_operator -> EQUALS .)
    AND             reduce using rule 224 (assignment_operator -> EQUALS .)
    TIMES           reduce using rule 224 (assignment_operator -> EQUALS .)
    PLUS            reduce using rule 224 (assignment_operator -> EQUALS .)
    MINUS           reduce using rule 224 (assignment_operator -> EQUALS .)
    NOT             reduce using rule 224 (assignment_operator -> EQUALS .)
    LNOT            reduce using rule 224 (assignment_operator -> EQUALS .)
    OFFSETOF        reduce using rule 224 (assignment_operator -> EQUALS .)
    ID              reduce using rule 224 (assignment_operator -> EQUALS .)
    INT_CONST_DEC   reduce using rule 224 (assignment_operator -> EQUALS .)
    INT_CONST_OCT   reduce using rule 224 (assignment_operator -> EQUALS .)
    INT_CONST_HEX   reduce using rule 224 (assignment_operator -> EQUALS .)
    INT_CONST_BIN   reduce using rule 224 (assignment_operator -> EQUALS .)
    FLOAT_CONST     reduce using rule 224 (assignment_operator -> EQUALS .)
    HEX_FLOAT_CONST reduce using rule 224 (assignment_operator -> EQUALS .)
    CHAR_CONST      reduce using rule 224 (assignment_operator -> EQUALS .)
    WCHAR_CONST     reduce using rule 224 (assignment_operator -> EQUALS .)
    STRING_LITERAL  reduce using rule 224 (assignment_operator -> EQUALS .)
    WSTRING_LITERAL reduce using rule 224 (assignment_operator -> EQUALS .)


state 292

    (225) assignment_operator -> XOREQUAL .

    PLUSPLUS        reduce using rule 225 (assignment_operator -> XOREQUAL .)
    MINUSMINUS      reduce using rule 225 (assignment_operator -> XOREQUAL .)
    SIZEOF          reduce using rule 225 (assignment_operator -> XOREQUAL .)
    LPAREN          reduce using rule 225 (assignment_operator -> XOREQUAL .)
    AND             reduce using rule 225 (assignment_operator -> XOREQUAL .)
    TIMES           reduce using rule 225 (assignment_operator -> XOREQUAL .)
    PLUS            reduce using rule 225 (assignment_operator -> XOREQUAL .)
    MINUS           reduce using rule 225 (assignment_operator -> XOREQUAL .)
    NOT             reduce using rule 225 (assignment_operator -> XOREQUAL .)
    LNOT            reduce using rule 225 (assignment_operator -> XOREQUAL .)
    OFFSETOF        reduce using rule 225 (assignment_operator -> XOREQUAL .)
    ID              reduce using rule 225 (assignment_operator -> XOREQUAL .)
    INT_CONST_DEC   reduce using rule 225 (assignment_operator -> XOREQUAL .)
    INT_CONST_OCT   reduce using rule 225 (assignment_operator -> XOREQUAL .)
    INT_CONST_HEX   reduce using rule 225 (assignment_operator -> XOREQUAL .)
    INT_CONST_BIN   reduce using rule 225 (assignment_operator -> XOREQUAL .)
    FLOAT_CONST     reduce using rule 225 (assignment_operator -> XOREQUAL .)
    HEX_FLOAT_CONST reduce using rule 225 (assignment_operator -> XOREQUAL .)
    CHAR_CONST      reduce using rule 225 (assignment_operator -> XOREQUAL .)
    WCHAR_CONST     reduce using rule 225 (assignment_operator -> XOREQUAL .)
    STRING_LITERAL  reduce using rule 225 (assignment_operator -> XOREQUAL .)
    WSTRING_LITERAL reduce using rule 225 (assignment_operator -> XOREQUAL .)


state 293

    (226) assignment_operator -> TIMESEQUAL .

    PLUSPLUS        reduce using rule 226 (assignment_operator -> TIMESEQUAL .)
    MINUSMINUS      reduce using rule 226 (assignment_operator -> TIMESEQUAL .)
    SIZEOF          reduce using rule 226 (assignment_operator -> TIMESEQUAL .)
    LPAREN          reduce using rule 226 (assignment_operator -> TIMESEQUAL .)
    AND             reduce using rule 226 (assignment_operator -> TIMESEQUAL .)
    TIMES           reduce using rule 226 (assignment_operator -> TIMESEQUAL .)
    PLUS            reduce using rule 226 (assignment_operator -> TIMESEQUAL .)
    MINUS           reduce using rule 226 (assignment_operator -> TIMESEQUAL .)
    NOT             reduce using rule 226 (assignment_operator -> TIMESEQUAL .)
    LNOT            reduce using rule 226 (assignment_operator -> TIMESEQUAL .)
    OFFSETOF        reduce using rule 226 (assignment_operator -> TIMESEQUAL .)
    ID              reduce using rule 226 (assignment_operator -> TIMESEQUAL .)
    INT_CONST_DEC   reduce using rule 226 (assignment_operator -> TIMESEQUAL .)
    INT_CONST_OCT   reduce using rule 226 (assignment_operator -> TIMESEQUAL .)
    INT_CONST_HEX   reduce using rule 226 (assignment_operator -> TIMESEQUAL .)
    INT_CONST_BIN   reduce using rule 226 (assignment_operator -> TIMESEQUAL .)
    FLOAT_CONST     reduce using rule 226 (assignment_operator -> TIMESEQUAL .)
    HEX_FLOAT_CONST reduce using rule 226 (assignment_operator -> TIMESEQUAL .)
    CHAR_CONST      reduce using rule 226 (assignment_operator -> TIMESEQUAL .)
    WCHAR_CONST     reduce using rule 226 (assignment_operator -> TIMESEQUAL .)
    STRING_LITERAL  reduce using rule 226 (assignment_operator -> TIMESEQUAL .)
    WSTRING_LITERAL reduce using rule 226 (assignment_operator -> TIMESEQUAL .)


state 294

    (227) assignment_operator -> DIVEQUAL .

    PLUSPLUS        reduce using rule 227 (assignment_operator -> DIVEQUAL .)
    MINUSMINUS      reduce using rule 227 (assignment_operator -> DIVEQUAL .)
    SIZEOF          reduce using rule 227 (assignment_operator -> DIVEQUAL .)
    LPAREN          reduce using rule 227 (assignment_operator -> DIVEQUAL .)
    AND             reduce using rule 227 (assignment_operator -> DIVEQUAL .)
    TIMES           reduce using rule 227 (assignment_operator -> DIVEQUAL .)
    PLUS            reduce using rule 227 (assignment_operator -> DIVEQUAL .)
    MINUS           reduce using rule 227 (assignment_operator -> DIVEQUAL .)
    NOT             reduce using rule 227 (assignment_operator -> DIVEQUAL .)
    LNOT            reduce using rule 227 (assignment_operator -> DIVEQUAL .)
    OFFSETOF        reduce using rule 227 (assignment_operator -> DIVEQUAL .)
    ID              reduce using rule 227 (assignment_operator -> DIVEQUAL .)
    INT_CONST_DEC   reduce using rule 227 (assignment_operator -> DIVEQUAL .)
    INT_CONST_OCT   reduce using rule 227 (assignment_operator -> DIVEQUAL .)
    INT_CONST_HEX   reduce using rule 227 (assignment_operator -> DIVEQUAL .)
    INT_CONST_BIN   reduce using rule 227 (assignment_operator -> DIVEQUAL .)
    FLOAT_CONST     reduce using rule 227 (assignment_operator -> DIVEQUAL .)
    HEX_FLOAT_CONST reduce using rule 227 (assignment_operator -> DIVEQUAL .)
    CHAR_CONST      reduce using rule 227 (assignment_operator -> DIVEQUAL .)
    WCHAR_CONST     reduce using rule 227 (assignment_operator -> DIVEQUAL .)
    STRING_LITERAL  reduce using rule 227 (assignment_operator -> DIVEQUAL .)
    WSTRING_LITERAL reduce using rule 227 (assignment_operator -> DIVEQUAL .)


state 295

    (228) assignment_operator -> MODEQUAL .

    PLUSPLUS        reduce using rule 228 (assignment_operator -> MODEQUAL .)
    MINUSMINUS      reduce using rule 228 (assignment_operator -> MODEQUAL .)
    SIZEOF          reduce using rule 228 (assignment_operator -> MODEQUAL .)
    LPAREN          reduce using rule 228 (assignment_operator -> MODEQUAL .)
    AND             reduce using rule 228 (assignment_operator -> MODEQUAL .)
    TIMES           reduce using rule 228 (assignment_operator -> MODEQUAL .)
    PLUS            reduce using rule 228 (assignment_operator -> MODEQUAL .)
    MINUS           reduce using rule 228 (assignment_operator -> MODEQUAL .)
    NOT             reduce using rule 228 (assignment_operator -> MODEQUAL .)
    LNOT            reduce using rule 228 (assignment_operator -> MODEQUAL .)
    OFFSETOF        reduce using rule 228 (assignment_operator -> MODEQUAL .)
    ID              reduce using rule 228 (assignment_operator -> MODEQUAL .)
    INT_CONST_DEC   reduce using rule 228 (assignment_operator -> MODEQUAL .)
    INT_CONST_OCT   reduce using rule 228 (assignment_operator -> MODEQUAL .)
    INT_CONST_HEX   reduce using rule 228 (assignment_operator -> MODEQUAL .)
    INT_CONST_BIN   reduce using rule 228 (assignment_operator -> MODEQUAL .)
    FLOAT_CONST     reduce using rule 228 (assignment_operator -> MODEQUAL .)
    HEX_FLOAT_CONST reduce using rule 228 (assignment_operator -> MODEQUAL .)
    CHAR_CONST      reduce using rule 228 (assignment_operator -> MODEQUAL .)
    WCHAR_CONST     reduce using rule 228 (assignment_operator -> MODEQUAL .)
    STRING_LITERAL  reduce using rule 228 (assignment_operator -> MODEQUAL .)
    WSTRING_LITERAL reduce using rule 228 (assignment_operator -> MODEQUAL .)


state 296

    (229) assignment_operator -> PLUSEQUAL .

    PLUSPLUS        reduce using rule 229 (assignment_operator -> PLUSEQUAL .)
    MINUSMINUS      reduce using rule 229 (assignment_operator -> PLUSEQUAL .)
    SIZEOF          reduce using rule 229 (assignment_operator -> PLUSEQUAL .)
    LPAREN          reduce using rule 229 (assignment_operator -> PLUSEQUAL .)
    AND             reduce using rule 229 (assignment_operator -> PLUSEQUAL .)
    TIMES           reduce using rule 229 (assignment_operator -> PLUSEQUAL .)
    PLUS            reduce using rule 229 (assignment_operator -> PLUSEQUAL .)
    MINUS           reduce using rule 229 (assignment_operator -> PLUSEQUAL .)
    NOT             reduce using rule 229 (assignment_operator -> PLUSEQUAL .)
    LNOT            reduce using rule 229 (assignment_operator -> PLUSEQUAL .)
    OFFSETOF        reduce using rule 229 (assignment_operator -> PLUSEQUAL .)
    ID              reduce using rule 229 (assignment_operator -> PLUSEQUAL .)
    INT_CONST_DEC   reduce using rule 229 (assignment_operator -> PLUSEQUAL .)
    INT_CONST_OCT   reduce using rule 229 (assignment_operator -> PLUSEQUAL .)
    INT_CONST_HEX   reduce using rule 229 (assignment_operator -> PLUSEQUAL .)
    INT_CONST_BIN   reduce using rule 229 (assignment_operator -> PLUSEQUAL .)
    FLOAT_CONST     reduce using rule 229 (assignment_operator -> PLUSEQUAL .)
    HEX_FLOAT_CONST reduce using rule 229 (assignment_operator -> PLUSEQUAL .)
    CHAR_CONST      reduce using rule 229 (assignment_operator -> PLUSEQUAL .)
    WCHAR_CONST     reduce using rule 229 (assignment_operator -> PLUSEQUAL .)
    STRING_LITERAL  reduce using rule 229 (assignment_operator -> PLUSEQUAL .)
    WSTRING_LITERAL reduce using rule 229 (assignment_operator -> PLUSEQUAL .)


state 297

    (230) assignment_operator -> MINUSEQUAL .

    PLUSPLUS        reduce using rule 230 (assignment_operator -> MINUSEQUAL .)
    MINUSMINUS      reduce using rule 230 (assignment_operator -> MINUSEQUAL .)
    SIZEOF          reduce using rule 230 (assignment_operator -> MINUSEQUAL .)
    LPAREN          reduce using rule 230 (assignment_operator -> MINUSEQUAL .)
    AND             reduce using rule 230 (assignment_operator -> MINUSEQUAL .)
    TIMES           reduce using rule 230 (assignment_operator -> MINUSEQUAL .)
    PLUS            reduce using rule 230 (assignment_operator -> MINUSEQUAL .)
    MINUS           reduce using rule 230 (assignment_operator -> MINUSEQUAL .)
    NOT             reduce using rule 230 (assignment_operator -> MINUSEQUAL .)
    LNOT            reduce using rule 230 (assignment_operator -> MINUSEQUAL .)
    OFFSETOF        reduce using rule 230 (assignment_operator -> MINUSEQUAL .)
    ID              reduce using rule 230 (assignment_operator -> MINUSEQUAL .)
    INT_CONST_DEC   reduce using rule 230 (assignment_operator -> MINUSEQUAL .)
    INT_CONST_OCT   reduce using rule 230 (assignment_operator -> MINUSEQUAL .)
    INT_CONST_HEX   reduce using rule 230 (assignment_operator -> MINUSEQUAL .)
    INT_CONST_BIN   reduce using rule 230 (assignment_operator -> MINUSEQUAL .)
    FLOAT_CONST     reduce using rule 230 (assignment_operator -> MINUSEQUAL .)
    HEX_FLOAT_CONST reduce using rule 230 (assignment_operator -> MINUSEQUAL .)
    CHAR_CONST      reduce using rule 230 (assignment_operator -> MINUSEQUAL .)
    WCHAR_CONST     reduce using rule 230 (assignment_operator -> MINUSEQUAL .)
    STRING_LITERAL  reduce using rule 230 (assignment_operator -> MINUSEQUAL .)
    WSTRING_LITERAL reduce using rule 230 (assignment_operator -> MINUSEQUAL .)


state 298

    (231) assignment_operator -> LSHIFTEQUAL .

    PLUSPLUS        reduce using rule 231 (assignment_operator -> LSHIFTEQUAL .)
    MINUSMINUS      reduce using rule 231 (assignment_operator -> LSHIFTEQUAL .)
    SIZEOF          reduce using rule 231 (assignment_operator -> LSHIFTEQUAL .)
    LPAREN          reduce using rule 231 (assignment_operator -> LSHIFTEQUAL .)
    AND             reduce using rule 231 (assignment_operator -> LSHIFTEQUAL .)
    TIMES           reduce using rule 231 (assignment_operator -> LSHIFTEQUAL .)
    PLUS            reduce using rule 231 (assignment_operator -> LSHIFTEQUAL .)
    MINUS           reduce using rule 231 (assignment_operator -> LSHIFTEQUAL .)
    NOT             reduce using rule 231 (assignment_operator -> LSHIFTEQUAL .)
    LNOT            reduce using rule 231 (assignment_operator -> LSHIFTEQUAL .)
    OFFSETOF        reduce using rule 231 (assignment_operator -> LSHIFTEQUAL .)
    ID              reduce using rule 231 (assignment_operator -> LSHIFTEQUAL .)
    INT_CONST_DEC   reduce using rule 231 (assignment_operator -> LSHIFTEQUAL .)
    INT_CONST_OCT   reduce using rule 231 (assignment_operator -> LSHIFTEQUAL .)
    INT_CONST_HEX   reduce using rule 231 (assignment_operator -> LSHIFTEQUAL .)
    INT_CONST_BIN   reduce using rule 231 (assignment_operator -> LSHIFTEQUAL .)
    FLOAT_CONST     reduce using rule 231 (assignment_operator -> LSHIFTEQUAL .)
    HEX_FLOAT_CONST reduce using rule 231 (assignment_operator -> LSHIFTEQUAL .)
    CHAR_CONST      reduce using rule 231 (assignment_operator -> LSHIFTEQUAL .)
    WCHAR_CONST     reduce using rule 231 (assignment_operator -> LSHIFTEQUAL .)
    STRING_LITERAL  reduce using rule 231 (assignment_operator -> LSHIFTEQUAL .)
    WSTRING_LITERAL reduce using rule 231 (assignment_operator -> LSHIFTEQUAL .)


state 299

    (232) assignment_operator -> RSHIFTEQUAL .

    PLUSPLUS        reduce using rule 232 (assignment_operator -> RSHIFTEQUAL .)
    MINUSMINUS      reduce using rule 232 (assignment_operator -> RSHIFTEQUAL .)
    SIZEOF          reduce using rule 232 (assignment_operator -> RSHIFTEQUAL .)
    LPAREN          reduce using rule 232 (assignment_operator -> RSHIFTEQUAL .)
    AND             reduce using rule 232 (assignment_operator -> RSHIFTEQUAL .)
    TIMES           reduce using rule 232 (assignment_operator -> RSHIFTEQUAL .)
    PLUS            reduce using rule 232 (assignment_operator -> RSHIFTEQUAL .)
    MINUS           reduce using rule 232 (assignment_operator -> RSHIFTEQUAL .)
    NOT             reduce using rule 232 (assignment_operator -> RSHIFTEQUAL .)
    LNOT            reduce using rule 232 (assignment_operator -> RSHIFTEQUAL .)
    OFFSETOF        reduce using rule 232 (assignment_operator -> RSHIFTEQUAL .)
    ID              reduce using rule 232 (assignment_operator -> RSHIFTEQUAL .)
    INT_CONST_DEC   reduce using rule 232 (assignment_operator -> RSHIFTEQUAL .)
    INT_CONST_OCT   reduce using rule 232 (assignment_operator -> RSHIFTEQUAL .)
    INT_CONST_HEX   reduce using rule 232 (assignment_operator -> RSHIFTEQUAL .)
    INT_CONST_BIN   reduce using rule 232 (assignment_operator -> RSHIFTEQUAL .)
    FLOAT_CONST     reduce using rule 232 (assignment_operator -> RSHIFTEQUAL .)
    HEX_FLOAT_CONST reduce using rule 232 (assignment_operator -> RSHIFTEQUAL .)
    CHAR_CONST      reduce using rule 232 (assignment_operator -> RSHIFTEQUAL .)
    WCHAR_CONST     reduce using rule 232 (assignment_operator -> RSHIFTEQUAL .)
    STRING_LITERAL  reduce using rule 232 (assignment_operator -> RSHIFTEQUAL .)
    WSTRING_LITERAL reduce using rule 232 (assignment_operator -> RSHIFTEQUAL .)


state 300

    (233) assignment_operator -> ANDEQUAL .

    PLUSPLUS        reduce using rule 233 (assignment_operator -> ANDEQUAL .)
    MINUSMINUS      reduce using rule 233 (assignment_operator -> ANDEQUAL .)
    SIZEOF          reduce using rule 233 (assignment_operator -> ANDEQUAL .)
    LPAREN          reduce using rule 233 (assignment_operator -> ANDEQUAL .)
    AND             reduce using rule 233 (assignment_operator -> ANDEQUAL .)
    TIMES           reduce using rule 233 (assignment_operator -> ANDEQUAL .)
    PLUS            reduce using rule 233 (assignment_operator -> ANDEQUAL .)
    MINUS           reduce using rule 233 (assignment_operator -> ANDEQUAL .)
    NOT             reduce using rule 233 (assignment_operator -> ANDEQUAL .)
    LNOT            reduce using rule 233 (assignment_operator -> ANDEQUAL .)
    OFFSETOF        reduce using rule 233 (assignment_operator -> ANDEQUAL .)
    ID              reduce using rule 233 (assignment_operator -> ANDEQUAL .)
    INT_CONST_DEC   reduce using rule 233 (assignment_operator -> ANDEQUAL .)
    INT_CONST_OCT   reduce using rule 233 (assignment_operator -> ANDEQUAL .)
    INT_CONST_HEX   reduce using rule 233 (assignment_operator -> ANDEQUAL .)
    INT_CONST_BIN   reduce using rule 233 (assignment_operator -> ANDEQUAL .)
    FLOAT_CONST     reduce using rule 233 (assignment_operator -> ANDEQUAL .)
    HEX_FLOAT_CONST reduce using rule 233 (assignment_operator -> ANDEQUAL .)
    CHAR_CONST      reduce using rule 233 (assignment_operator -> ANDEQUAL .)
    WCHAR_CONST     reduce using rule 233 (assignment_operator -> ANDEQUAL .)
    STRING_LITERAL  reduce using rule 233 (assignment_operator -> ANDEQUAL .)
    WSTRING_LITERAL reduce using rule 233 (assignment_operator -> ANDEQUAL .)


state 301

    (234) assignment_operator -> OREQUAL .

    PLUSPLUS        reduce using rule 234 (assignment_operator -> OREQUAL .)
    MINUSMINUS      reduce using rule 234 (assignment_operator -> OREQUAL .)
    SIZEOF          reduce using rule 234 (assignment_operator -> OREQUAL .)
    LPAREN          reduce using rule 234 (assignment_operator -> OREQUAL .)
    AND             reduce using rule 234 (assignment_operator -> OREQUAL .)
    TIMES           reduce using rule 234 (assignment_operator -> OREQUAL .)
    PLUS            reduce using rule 234 (assignment_operator -> OREQUAL .)
    MINUS           reduce using rule 234 (assignment_operator -> OREQUAL .)
    NOT             reduce using rule 234 (assignment_operator -> OREQUAL .)
    LNOT            reduce using rule 234 (assignment_operator -> OREQUAL .)
    OFFSETOF        reduce using rule 234 (assignment_operator -> OREQUAL .)
    ID              reduce using rule 234 (assignment_operator -> OREQUAL .)
    INT_CONST_DEC   reduce using rule 234 (assignment_operator -> OREQUAL .)
    INT_CONST_OCT   reduce using rule 234 (assignment_operator -> OREQUAL .)
    INT_CONST_HEX   reduce using rule 234 (assignment_operator -> OREQUAL .)
    INT_CONST_BIN   reduce using rule 234 (assignment_operator -> OREQUAL .)
    FLOAT_CONST     reduce using rule 234 (assignment_operator -> OREQUAL .)
    HEX_FLOAT_CONST reduce using rule 234 (assignment_operator -> OREQUAL .)
    CHAR_CONST      reduce using rule 234 (assignment_operator -> OREQUAL .)
    WCHAR_CONST     reduce using rule 234 (assignment_operator -> OREQUAL .)
    STRING_LITERAL  reduce using rule 234 (assignment_operator -> OREQUAL .)
    WSTRING_LITERAL reduce using rule 234 (assignment_operator -> OREQUAL .)


state 302

    (237) conditional_expression -> binary_expression CONDOP . expression COLON conditional_expression
    (219) expression -> . assignment_expression
    (220) expression -> . expression COMMA assignment_expression
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    binary_expression              shift and go to state 181
    expression                     shift and go to state 401
    conditional_expression         shift and go to state 179
    assignment_expression          shift and go to state 178
    unary_expression               shift and go to state 180
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 303

    (239) binary_expression -> binary_expression TIMES . binary_expression
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 271
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    binary_expression              shift and go to state 402
    cast_expression                shift and go to state 186
    unary_expression               shift and go to state 270
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 304

    (240) binary_expression -> binary_expression DIVIDE . binary_expression
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 271
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    binary_expression              shift and go to state 403
    cast_expression                shift and go to state 186
    unary_expression               shift and go to state 270
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 305

    (241) binary_expression -> binary_expression MOD . binary_expression
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 271
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    binary_expression              shift and go to state 404
    cast_expression                shift and go to state 186
    unary_expression               shift and go to state 270
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 306

    (242) binary_expression -> binary_expression PLUS . binary_expression
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 271
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    binary_expression              shift and go to state 405
    cast_expression                shift and go to state 186
    unary_expression               shift and go to state 270
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 307

    (243) binary_expression -> binary_expression MINUS . binary_expression
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 271
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    binary_expression              shift and go to state 406
    cast_expression                shift and go to state 186
    unary_expression               shift and go to state 270
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 308

    (244) binary_expression -> binary_expression RSHIFT . binary_expression
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 271
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    binary_expression              shift and go to state 407
    cast_expression                shift and go to state 186
    unary_expression               shift and go to state 270
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 309

    (245) binary_expression -> binary_expression LSHIFT . binary_expression
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 271
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    binary_expression              shift and go to state 408
    cast_expression                shift and go to state 186
    unary_expression               shift and go to state 270
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 310

    (246) binary_expression -> binary_expression LT . binary_expression
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 271
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    binary_expression              shift and go to state 409
    cast_expression                shift and go to state 186
    unary_expression               shift and go to state 270
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 311

    (247) binary_expression -> binary_expression LE . binary_expression
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 271
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    binary_expression              shift and go to state 410
    cast_expression                shift and go to state 186
    unary_expression               shift and go to state 270
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 312

    (248) binary_expression -> binary_expression GE . binary_expression
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 271
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    binary_expression              shift and go to state 411
    cast_expression                shift and go to state 186
    unary_expression               shift and go to state 270
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 313

    (249) binary_expression -> binary_expression GT . binary_expression
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 271
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    binary_expression              shift and go to state 412
    cast_expression                shift and go to state 186
    unary_expression               shift and go to state 270
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 314

    (250) binary_expression -> binary_expression EQ . binary_expression
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 271
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    binary_expression              shift and go to state 413
    cast_expression                shift and go to state 186
    unary_expression               shift and go to state 270
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 315

    (251) binary_expression -> binary_expression NE . binary_expression
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 271
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    binary_expression              shift and go to state 414
    cast_expression                shift and go to state 186
    unary_expression               shift and go to state 270
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 316

    (252) binary_expression -> binary_expression AND . binary_expression
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 271
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    binary_expression              shift and go to state 415
    cast_expression                shift and go to state 186
    unary_expression               shift and go to state 270
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 317

    (253) binary_expression -> binary_expression OR . binary_expression
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 271
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    binary_expression              shift and go to state 416
    cast_expression                shift and go to state 186
    unary_expression               shift and go to state 270
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 318

    (254) binary_expression -> binary_expression XOR . binary_expression
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 271
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    binary_expression              shift and go to state 417
    cast_expression                shift and go to state 186
    unary_expression               shift and go to state 270
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 319

    (255) binary_expression -> binary_expression LAND . binary_expression
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 271
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    binary_expression              shift and go to state 418
    cast_expression                shift and go to state 186
    unary_expression               shift and go to state 270
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 320

    (256) binary_expression -> binary_expression LOR . binary_expression
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 271
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    binary_expression              shift and go to state 419
    cast_expression                shift and go to state 186
    unary_expression               shift and go to state 270
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 321

    (272) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (219) expression -> . assignment_expression
    (220) expression -> . expression COMMA assignment_expression
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    postfix_expression             shift and go to state 182
    expression                     shift and go to state 420
    assignment_expression          shift and go to state 178
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 322

    (273) postfix_expression -> postfix_expression LPAREN . argument_expression_list RPAREN
    (274) postfix_expression -> postfix_expression LPAREN . RPAREN
    (292) argument_expression_list -> . assignment_expression
    (293) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    RPAREN          shift and go to state 422
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    postfix_expression             shift and go to state 182
    argument_expression_list       shift and go to state 421
    assignment_expression          shift and go to state 423
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 323

    (275) postfix_expression -> postfix_expression PERIOD . ID
    (276) postfix_expression -> postfix_expression PERIOD . TYPEID

    ID              shift and go to state 424
    TYPEID          shift and go to state 425


state 324

    (277) postfix_expression -> postfix_expression ARROW . ID
    (278) postfix_expression -> postfix_expression ARROW . TYPEID

    ID              shift and go to state 426
    TYPEID          shift and go to state 427


state 325

    (279) postfix_expression -> postfix_expression PLUSPLUS .

    LBRACKET        reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    LPAREN          reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    PERIOD          reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    ARROW           reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUSPLUS        reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSMINUS      reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQUALS          reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    XOREQUAL        reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMESEQUAL      reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIVEQUAL        reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    MODEQUAL        reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUSEQUAL       reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSEQUAL      reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    LSHIFTEQUAL     reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    RSHIFTEQUAL     reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    ANDEQUAL        reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    OREQUAL         reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    CONDOP          reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMES           reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIVIDE          reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    MOD             reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUS            reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUS           reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    RSHIFT          reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    LSHIFT          reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    LT              reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    LE              reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    GE              reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    GT              reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQ              reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    NE              reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    AND             reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    OR              reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    XOR             reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    LAND            reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    LOR             reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    COMMA           reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    SEMI            reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACKET        reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    COLON           reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    RPAREN          reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACE          reduce using rule 279 (postfix_expression -> postfix_expression PLUSPLUS .)


state 326

    (280) postfix_expression -> postfix_expression MINUSMINUS .

    LBRACKET        reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    LPAREN          reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    PERIOD          reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    ARROW           reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUSPLUS        reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSMINUS      reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQUALS          reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    XOREQUAL        reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMESEQUAL      reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIVEQUAL        reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    MODEQUAL        reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUSEQUAL       reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSEQUAL      reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    LSHIFTEQUAL     reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    RSHIFTEQUAL     reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    ANDEQUAL        reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    OREQUAL         reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    CONDOP          reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMES           reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIVIDE          reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    MOD             reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUS            reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUS           reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    RSHIFT          reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    LSHIFT          reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    LT              reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    LE              reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    GE              reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    GT              reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQ              reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    NE              reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    AND             reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    OR              reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    XOR             reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    LAND            reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    LOR             reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    COMMA           reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    SEMI            reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACKET        reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    COLON           reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    RPAREN          reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACE          reduce using rule 280 (postfix_expression -> postfix_expression MINUSMINUS .)


state 327

    (260) unary_expression -> PLUSPLUS unary_expression .

    EQUALS          reduce using rule 260 (unary_expression -> PLUSPLUS unary_expression .)
    XOREQUAL        reduce using rule 260 (unary_expression -> PLUSPLUS unary_expression .)
    TIMESEQUAL      reduce using rule 260 (unary_expression -> PLUSPLUS unary_expression .)
    DIVEQUAL        reduce using rule 260 (unary_expression -> PLUSPLUS unary_expression .)
    MODEQUAL        reduce using rule 260 (unary_expression -> PLUSPLUS unary_expression .)
    PLUSEQUAL       reduce using rule 260 (unary_expression -> PLUSPLUS unary_expression .)
    MINUSEQUAL      reduce using rule 260 (unary_expression -> PLUSPLUS unary_expression .)
    LSHIFTEQUAL     reduce using rule 260 (unary_expression -> PLUSPLUS unary_expression .)
    RSHIFTEQUAL     reduce using rule 260 (unary_expression -> PLUSPLUS unary_expression .)
    ANDEQUAL        reduce using rule 260 (unary_expression -> PLUSPLUS unary_expression .)
    OREQUAL         reduce using rule 260 (unary_expression -> PLUSPLUS unary_expression .)
    CONDOP          reduce using rule 260 (unary_expression -> PLUSPLUS unary_expression .)
    TIMES           reduce using rule 260 (unary_expression -> PLUSPLUS unary_expression .)
    DIVIDE          reduce using rule 260 (unary_expression -> PLUSPLUS unary_expression .)
    MOD             reduce using rule 260 (unary_expression -> PLUSPLUS unary_expression .)
    PLUS            reduce using rule 260 (unary_expression -> PLUSPLUS unary_expression .)
    MINUS           reduce using rule 260 (unary_expression -> PLUSPLUS unary_expression .)
    RSHIFT          reduce using rule 260 (unary_expression -> PLUSPLUS unary_expression .)
    LSHIFT          reduce using rule 260 (unary_expression -> PLUSPLUS unary_expression .)
    LT              reduce using rule 260 (unary_expression -> PLUSPLUS unary_expression .)
    LE              reduce using rule 260 (unary_expression -> PLUSPLUS unary_expression .)
    GE              reduce using rule 260 (unary_expression -> PLUSPLUS unary_expression .)
    GT              reduce using rule 260 (unary_expression -> PLUSPLUS unary_expression .)
    EQ              reduce using rule 260 (unary_expression -> PLUSPLUS unary_expression .)
    NE              reduce using rule 260 (unary_expression -> PLUSPLUS unary_expression .)
    AND             reduce using rule 260 (unary_expression -> PLUSPLUS unary_expression .)
    OR              reduce using rule 260 (unary_expression -> PLUSPLUS unary_expression .)
    XOR             reduce using rule 260 (unary_expression -> PLUSPLUS unary_expression .)
    LAND            reduce using rule 260 (unary_expression -> PLUSPLUS unary_expression .)
    LOR             reduce using rule 260 (unary_expression -> PLUSPLUS unary_expression .)
    COMMA           reduce using rule 260 (unary_expression -> PLUSPLUS unary_expression .)
    SEMI            reduce using rule 260 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACKET        reduce using rule 260 (unary_expression -> PLUSPLUS unary_expression .)
    COLON           reduce using rule 260 (unary_expression -> PLUSPLUS unary_expression .)
    RPAREN          reduce using rule 260 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACE          reduce using rule 260 (unary_expression -> PLUSPLUS unary_expression .)


state 328

    (281) postfix_expression -> LPAREN . type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> LPAREN . type_name RPAREN brace_open initializer_list COMMA brace_close
    (287) primary_expression -> LPAREN . expression RPAREN
    (187) type_name -> . specifier_qualifier_list abstract_declarator_opt
    (219) expression -> . assignment_expression
    (220) expression -> . expression COMMA assignment_expression
    (128) specifier_qualifier_list -> . specifier_qualifier_list type_specifier_no_typeid
    (129) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (130) specifier_qualifier_list -> . type_specifier
    (131) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (113) type_specifier -> . typedef_name
    (114) type_specifier -> . enum_specifier
    (115) type_specifier -> . struct_or_union_specifier
    (116) type_specifier -> . type_specifier_no_typeid
    (166) type_qualifier_list -> . type_qualifier
    (167) type_qualifier_list -> . type_qualifier_list type_qualifier
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (221) typedef_name -> . TYPEID
    (152) enum_specifier -> . ENUM ID
    (153) enum_specifier -> . ENUM TYPEID
    (154) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (155) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (156) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (132) struct_or_union_specifier -> . struct_or_union ID
    (133) struct_or_union_specifier -> . struct_or_union TYPEID
    (134) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (135) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (136) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (137) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (138) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (139) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (101) type_specifier_no_typeid -> . VOID
    (102) type_specifier_no_typeid -> . _BOOL
    (103) type_specifier_no_typeid -> . CHAR
    (104) type_specifier_no_typeid -> . SHORT
    (105) type_specifier_no_typeid -> . INT
    (106) type_specifier_no_typeid -> . LONG
    (107) type_specifier_no_typeid -> . FLOAT
    (108) type_specifier_no_typeid -> . DOUBLE
    (109) type_specifier_no_typeid -> . _COMPLEX
    (110) type_specifier_no_typeid -> . SIGNED
    (111) type_specifier_no_typeid -> . UNSIGNED
    (112) type_specifier_no_typeid -> . __INT128
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    VOID            shift and go to state 33
    _BOOL           shift and go to state 34
    CHAR            shift and go to state 35
    SHORT           shift and go to state 36
    INT             shift and go to state 37
    LONG            shift and go to state 38
    FLOAT           shift and go to state 39
    DOUBLE          shift and go to state 40
    _COMPLEX        shift and go to state 41
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 43
    __INT128        shift and go to state 44
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    STRUCT          shift and go to state 53
    UNION           shift and go to state 54
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    type_name                      shift and go to state 428
    expression                     shift and go to state 276
    specifier_qualifier_list       shift and go to state 277
    assignment_expression          shift and go to state 178
    type_specifier_no_typeid       shift and go to state 20
    type_qualifier                 shift and go to state 97
    type_specifier                 shift and go to state 148
    type_qualifier_list            shift and go to state 149
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    typedef_name                   shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union_specifier      shift and go to state 29
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    struct_or_union                shift and go to state 32
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 329

    (261) unary_expression -> MINUSMINUS unary_expression .

    EQUALS          reduce using rule 261 (unary_expression -> MINUSMINUS unary_expression .)
    XOREQUAL        reduce using rule 261 (unary_expression -> MINUSMINUS unary_expression .)
    TIMESEQUAL      reduce using rule 261 (unary_expression -> MINUSMINUS unary_expression .)
    DIVEQUAL        reduce using rule 261 (unary_expression -> MINUSMINUS unary_expression .)
    MODEQUAL        reduce using rule 261 (unary_expression -> MINUSMINUS unary_expression .)
    PLUSEQUAL       reduce using rule 261 (unary_expression -> MINUSMINUS unary_expression .)
    MINUSEQUAL      reduce using rule 261 (unary_expression -> MINUSMINUS unary_expression .)
    LSHIFTEQUAL     reduce using rule 261 (unary_expression -> MINUSMINUS unary_expression .)
    RSHIFTEQUAL     reduce using rule 261 (unary_expression -> MINUSMINUS unary_expression .)
    ANDEQUAL        reduce using rule 261 (unary_expression -> MINUSMINUS unary_expression .)
    OREQUAL         reduce using rule 261 (unary_expression -> MINUSMINUS unary_expression .)
    CONDOP          reduce using rule 261 (unary_expression -> MINUSMINUS unary_expression .)
    TIMES           reduce using rule 261 (unary_expression -> MINUSMINUS unary_expression .)
    DIVIDE          reduce using rule 261 (unary_expression -> MINUSMINUS unary_expression .)
    MOD             reduce using rule 261 (unary_expression -> MINUSMINUS unary_expression .)
    PLUS            reduce using rule 261 (unary_expression -> MINUSMINUS unary_expression .)
    MINUS           reduce using rule 261 (unary_expression -> MINUSMINUS unary_expression .)
    RSHIFT          reduce using rule 261 (unary_expression -> MINUSMINUS unary_expression .)
    LSHIFT          reduce using rule 261 (unary_expression -> MINUSMINUS unary_expression .)
    LT              reduce using rule 261 (unary_expression -> MINUSMINUS unary_expression .)
    LE              reduce using rule 261 (unary_expression -> MINUSMINUS unary_expression .)
    GE              reduce using rule 261 (unary_expression -> MINUSMINUS unary_expression .)
    GT              reduce using rule 261 (unary_expression -> MINUSMINUS unary_expression .)
    EQ              reduce using rule 261 (unary_expression -> MINUSMINUS unary_expression .)
    NE              reduce using rule 261 (unary_expression -> MINUSMINUS unary_expression .)
    AND             reduce using rule 261 (unary_expression -> MINUSMINUS unary_expression .)
    OR              reduce using rule 261 (unary_expression -> MINUSMINUS unary_expression .)
    XOR             reduce using rule 261 (unary_expression -> MINUSMINUS unary_expression .)
    LAND            reduce using rule 261 (unary_expression -> MINUSMINUS unary_expression .)
    LOR             reduce using rule 261 (unary_expression -> MINUSMINUS unary_expression .)
    COMMA           reduce using rule 261 (unary_expression -> MINUSMINUS unary_expression .)
    SEMI            reduce using rule 261 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACKET        reduce using rule 261 (unary_expression -> MINUSMINUS unary_expression .)
    COLON           reduce using rule 261 (unary_expression -> MINUSMINUS unary_expression .)
    RPAREN          reduce using rule 261 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACE          reduce using rule 261 (unary_expression -> MINUSMINUS unary_expression .)


state 330

    (262) unary_expression -> unary_operator cast_expression .

    EQUALS          reduce using rule 262 (unary_expression -> unary_operator cast_expression .)
    XOREQUAL        reduce using rule 262 (unary_expression -> unary_operator cast_expression .)
    TIMESEQUAL      reduce using rule 262 (unary_expression -> unary_operator cast_expression .)
    DIVEQUAL        reduce using rule 262 (unary_expression -> unary_operator cast_expression .)
    MODEQUAL        reduce using rule 262 (unary_expression -> unary_operator cast_expression .)
    PLUSEQUAL       reduce using rule 262 (unary_expression -> unary_operator cast_expression .)
    MINUSEQUAL      reduce using rule 262 (unary_expression -> unary_operator cast_expression .)
    LSHIFTEQUAL     reduce using rule 262 (unary_expression -> unary_operator cast_expression .)
    RSHIFTEQUAL     reduce using rule 262 (unary_expression -> unary_operator cast_expression .)
    ANDEQUAL        reduce using rule 262 (unary_expression -> unary_operator cast_expression .)
    OREQUAL         reduce using rule 262 (unary_expression -> unary_operator cast_expression .)
    CONDOP          reduce using rule 262 (unary_expression -> unary_operator cast_expression .)
    TIMES           reduce using rule 262 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 262 (unary_expression -> unary_operator cast_expression .)
    MOD             reduce using rule 262 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 262 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 262 (unary_expression -> unary_operator cast_expression .)
    RSHIFT          reduce using rule 262 (unary_expression -> unary_operator cast_expression .)
    LSHIFT          reduce using rule 262 (unary_expression -> unary_operator cast_expression .)
    LT              reduce using rule 262 (unary_expression -> unary_operator cast_expression .)
    LE              reduce using rule 262 (unary_expression -> unary_operator cast_expression .)
    GE              reduce using rule 262 (unary_expression -> unary_operator cast_expression .)
    GT              reduce using rule 262 (unary_expression -> unary_operator cast_expression .)
    EQ              reduce using rule 262 (unary_expression -> unary_operator cast_expression .)
    NE              reduce using rule 262 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 262 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 262 (unary_expression -> unary_operator cast_expression .)
    XOR             reduce using rule 262 (unary_expression -> unary_operator cast_expression .)
    LAND            reduce using rule 262 (unary_expression -> unary_operator cast_expression .)
    LOR             reduce using rule 262 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 262 (unary_expression -> unary_operator cast_expression .)
    SEMI            reduce using rule 262 (unary_expression -> unary_operator cast_expression .)
    RBRACKET        reduce using rule 262 (unary_expression -> unary_operator cast_expression .)
    COLON           reduce using rule 262 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 262 (unary_expression -> unary_operator cast_expression .)
    RBRACE          reduce using rule 262 (unary_expression -> unary_operator cast_expression .)


state 331

    (263) unary_expression -> SIZEOF unary_expression .

    EQUALS          reduce using rule 263 (unary_expression -> SIZEOF unary_expression .)
    XOREQUAL        reduce using rule 263 (unary_expression -> SIZEOF unary_expression .)
    TIMESEQUAL      reduce using rule 263 (unary_expression -> SIZEOF unary_expression .)
    DIVEQUAL        reduce using rule 263 (unary_expression -> SIZEOF unary_expression .)
    MODEQUAL        reduce using rule 263 (unary_expression -> SIZEOF unary_expression .)
    PLUSEQUAL       reduce using rule 263 (unary_expression -> SIZEOF unary_expression .)
    MINUSEQUAL      reduce using rule 263 (unary_expression -> SIZEOF unary_expression .)
    LSHIFTEQUAL     reduce using rule 263 (unary_expression -> SIZEOF unary_expression .)
    RSHIFTEQUAL     reduce using rule 263 (unary_expression -> SIZEOF unary_expression .)
    ANDEQUAL        reduce using rule 263 (unary_expression -> SIZEOF unary_expression .)
    OREQUAL         reduce using rule 263 (unary_expression -> SIZEOF unary_expression .)
    CONDOP          reduce using rule 263 (unary_expression -> SIZEOF unary_expression .)
    TIMES           reduce using rule 263 (unary_expression -> SIZEOF unary_expression .)
    DIVIDE          reduce using rule 263 (unary_expression -> SIZEOF unary_expression .)
    MOD             reduce using rule 263 (unary_expression -> SIZEOF unary_expression .)
    PLUS            reduce using rule 263 (unary_expression -> SIZEOF unary_expression .)
    MINUS           reduce using rule 263 (unary_expression -> SIZEOF unary_expression .)
    RSHIFT          reduce using rule 263 (unary_expression -> SIZEOF unary_expression .)
    LSHIFT          reduce using rule 263 (unary_expression -> SIZEOF unary_expression .)
    LT              reduce using rule 263 (unary_expression -> SIZEOF unary_expression .)
    LE              reduce using rule 263 (unary_expression -> SIZEOF unary_expression .)
    GE              reduce using rule 263 (unary_expression -> SIZEOF unary_expression .)
    GT              reduce using rule 263 (unary_expression -> SIZEOF unary_expression .)
    EQ              reduce using rule 263 (unary_expression -> SIZEOF unary_expression .)
    NE              reduce using rule 263 (unary_expression -> SIZEOF unary_expression .)
    AND             reduce using rule 263 (unary_expression -> SIZEOF unary_expression .)
    OR              reduce using rule 263 (unary_expression -> SIZEOF unary_expression .)
    XOR             reduce using rule 263 (unary_expression -> SIZEOF unary_expression .)
    LAND            reduce using rule 263 (unary_expression -> SIZEOF unary_expression .)
    LOR             reduce using rule 263 (unary_expression -> SIZEOF unary_expression .)
    COMMA           reduce using rule 263 (unary_expression -> SIZEOF unary_expression .)
    SEMI            reduce using rule 263 (unary_expression -> SIZEOF unary_expression .)
    RBRACKET        reduce using rule 263 (unary_expression -> SIZEOF unary_expression .)
    COLON           reduce using rule 263 (unary_expression -> SIZEOF unary_expression .)
    RPAREN          reduce using rule 263 (unary_expression -> SIZEOF unary_expression .)
    RBRACE          reduce using rule 263 (unary_expression -> SIZEOF unary_expression .)


state 332

    (264) unary_expression -> SIZEOF LPAREN . type_name RPAREN
    (281) postfix_expression -> LPAREN . type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> LPAREN . type_name RPAREN brace_open initializer_list COMMA brace_close
    (287) primary_expression -> LPAREN . expression RPAREN
    (187) type_name -> . specifier_qualifier_list abstract_declarator_opt
    (219) expression -> . assignment_expression
    (220) expression -> . expression COMMA assignment_expression
    (128) specifier_qualifier_list -> . specifier_qualifier_list type_specifier_no_typeid
    (129) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (130) specifier_qualifier_list -> . type_specifier
    (131) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (113) type_specifier -> . typedef_name
    (114) type_specifier -> . enum_specifier
    (115) type_specifier -> . struct_or_union_specifier
    (116) type_specifier -> . type_specifier_no_typeid
    (166) type_qualifier_list -> . type_qualifier
    (167) type_qualifier_list -> . type_qualifier_list type_qualifier
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (221) typedef_name -> . TYPEID
    (152) enum_specifier -> . ENUM ID
    (153) enum_specifier -> . ENUM TYPEID
    (154) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (155) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (156) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (132) struct_or_union_specifier -> . struct_or_union ID
    (133) struct_or_union_specifier -> . struct_or_union TYPEID
    (134) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (135) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (136) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (137) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (138) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (139) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (101) type_specifier_no_typeid -> . VOID
    (102) type_specifier_no_typeid -> . _BOOL
    (103) type_specifier_no_typeid -> . CHAR
    (104) type_specifier_no_typeid -> . SHORT
    (105) type_specifier_no_typeid -> . INT
    (106) type_specifier_no_typeid -> . LONG
    (107) type_specifier_no_typeid -> . FLOAT
    (108) type_specifier_no_typeid -> . DOUBLE
    (109) type_specifier_no_typeid -> . _COMPLEX
    (110) type_specifier_no_typeid -> . SIGNED
    (111) type_specifier_no_typeid -> . UNSIGNED
    (112) type_specifier_no_typeid -> . __INT128
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    VOID            shift and go to state 33
    _BOOL           shift and go to state 34
    CHAR            shift and go to state 35
    SHORT           shift and go to state 36
    INT             shift and go to state 37
    LONG            shift and go to state 38
    FLOAT           shift and go to state 39
    DOUBLE          shift and go to state 40
    _COMPLEX        shift and go to state 41
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 43
    __INT128        shift and go to state 44
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    STRUCT          shift and go to state 53
    UNION           shift and go to state 54
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    type_name                      shift and go to state 429
    expression                     shift and go to state 276
    specifier_qualifier_list       shift and go to state 277
    assignment_expression          shift and go to state 178
    type_specifier_no_typeid       shift and go to state 20
    type_qualifier                 shift and go to state 97
    type_specifier                 shift and go to state 148
    type_qualifier_list            shift and go to state 149
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    typedef_name                   shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union_specifier      shift and go to state 29
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    struct_or_union                shift and go to state 32
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 333

    (304) unified_string_literal -> unified_string_literal STRING_LITERAL .

    STRING_LITERAL  reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LBRACKET        reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LPAREN          reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    PERIOD          reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    ARROW           reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    PLUSPLUS        reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    MINUSMINUS      reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    EQUALS          reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    XOREQUAL        reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    TIMESEQUAL      reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    DIVEQUAL        reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    MODEQUAL        reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    PLUSEQUAL       reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    MINUSEQUAL      reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LSHIFTEQUAL     reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    RSHIFTEQUAL     reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    ANDEQUAL        reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    OREQUAL         reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    CONDOP          reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    TIMES           reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    DIVIDE          reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    MOD             reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    PLUS            reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    MINUS           reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    RSHIFT          reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LSHIFT          reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LT              reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LE              reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    GE              reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    GT              reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    EQ              reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    NE              reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    AND             reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    OR              reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    XOR             reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LAND            reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LOR             reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    COMMA           reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    SEMI            reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    RBRACKET        reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    COLON           reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    RPAREN          reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    RBRACE          reduce using rule 304 (unified_string_literal -> unified_string_literal STRING_LITERAL .)


state 334

    (306) unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .

    WSTRING_LITERAL reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LBRACKET        reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LPAREN          reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    PERIOD          reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    ARROW           reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    PLUSPLUS        reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    MINUSMINUS      reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    EQUALS          reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    XOREQUAL        reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    TIMESEQUAL      reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    DIVEQUAL        reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    MODEQUAL        reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    PLUSEQUAL       reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    MINUSEQUAL      reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LSHIFTEQUAL     reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    RSHIFTEQUAL     reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    ANDEQUAL        reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    OREQUAL         reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    CONDOP          reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    TIMES           reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    DIVIDE          reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    MOD             reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    PLUS            reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    MINUS           reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    RSHIFT          reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LSHIFT          reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LT              reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LE              reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    GE              reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    GT              reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    EQ              reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    NE              reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    AND             reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    OR              reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    XOR             reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LAND            reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LOR             reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    COMMA           reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    SEMI            reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    RBRACKET        reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    COLON           reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    RPAREN          reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    RBRACE          reduce using rule 306 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)


state 335

    (288) primary_expression -> OFFSETOF LPAREN . type_name COMMA offsetof_member_designator RPAREN
    (187) type_name -> . specifier_qualifier_list abstract_declarator_opt
    (128) specifier_qualifier_list -> . specifier_qualifier_list type_specifier_no_typeid
    (129) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (130) specifier_qualifier_list -> . type_specifier
    (131) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (113) type_specifier -> . typedef_name
    (114) type_specifier -> . enum_specifier
    (115) type_specifier -> . struct_or_union_specifier
    (116) type_specifier -> . type_specifier_no_typeid
    (166) type_qualifier_list -> . type_qualifier
    (167) type_qualifier_list -> . type_qualifier_list type_qualifier
    (221) typedef_name -> . TYPEID
    (152) enum_specifier -> . ENUM ID
    (153) enum_specifier -> . ENUM TYPEID
    (154) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (155) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (156) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (132) struct_or_union_specifier -> . struct_or_union ID
    (133) struct_or_union_specifier -> . struct_or_union TYPEID
    (134) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (135) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (136) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (137) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (138) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (139) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (101) type_specifier_no_typeid -> . VOID
    (102) type_specifier_no_typeid -> . _BOOL
    (103) type_specifier_no_typeid -> . CHAR
    (104) type_specifier_no_typeid -> . SHORT
    (105) type_specifier_no_typeid -> . INT
    (106) type_specifier_no_typeid -> . LONG
    (107) type_specifier_no_typeid -> . FLOAT
    (108) type_specifier_no_typeid -> . DOUBLE
    (109) type_specifier_no_typeid -> . _COMPLEX
    (110) type_specifier_no_typeid -> . SIGNED
    (111) type_specifier_no_typeid -> . UNSIGNED
    (112) type_specifier_no_typeid -> . __INT128
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    VOID            shift and go to state 33
    _BOOL           shift and go to state 34
    CHAR            shift and go to state 35
    SHORT           shift and go to state 36
    INT             shift and go to state 37
    LONG            shift and go to state 38
    FLOAT           shift and go to state 39
    DOUBLE          shift and go to state 40
    _COMPLEX        shift and go to state 41
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 43
    __INT128        shift and go to state 44
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47
    STRUCT          shift and go to state 53
    UNION           shift and go to state 54

    type_name                      shift and go to state 430
    specifier_qualifier_list       shift and go to state 277
    type_specifier_no_typeid       shift and go to state 20
    type_qualifier                 shift and go to state 97
    type_specifier                 shift and go to state 148
    type_qualifier_list            shift and go to state 149
    typedef_name                   shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union_specifier      shift and go to state 29
    struct_or_union                shift and go to state 32

state 336

    (178) initializer -> brace_open initializer_list_opt . brace_close
    (308) brace_close -> . RBRACE

    RBRACE          shift and go to state 144

    brace_close                    shift and go to state 431

state 337

    (179) initializer -> brace_open initializer_list . COMMA brace_close
    (22) initializer_list_opt -> initializer_list .
    (181) initializer_list -> initializer_list . COMMA designation_opt initializer

    COMMA           shift and go to state 432
    RBRACE          reduce using rule 22 (initializer_list_opt -> initializer_list .)


state 338

    (21) initializer_list_opt -> empty .
    (11) designation_opt -> empty .

    RBRACE          reduce using rule 21 (initializer_list_opt -> empty .)
    LBRACE          reduce using rule 11 (designation_opt -> empty .)
    PLUSPLUS        reduce using rule 11 (designation_opt -> empty .)
    MINUSMINUS      reduce using rule 11 (designation_opt -> empty .)
    SIZEOF          reduce using rule 11 (designation_opt -> empty .)
    LPAREN          reduce using rule 11 (designation_opt -> empty .)
    AND             reduce using rule 11 (designation_opt -> empty .)
    TIMES           reduce using rule 11 (designation_opt -> empty .)
    PLUS            reduce using rule 11 (designation_opt -> empty .)
    MINUS           reduce using rule 11 (designation_opt -> empty .)
    NOT             reduce using rule 11 (designation_opt -> empty .)
    LNOT            reduce using rule 11 (designation_opt -> empty .)
    OFFSETOF        reduce using rule 11 (designation_opt -> empty .)
    ID              reduce using rule 11 (designation_opt -> empty .)
    INT_CONST_DEC   reduce using rule 11 (designation_opt -> empty .)
    INT_CONST_OCT   reduce using rule 11 (designation_opt -> empty .)
    INT_CONST_HEX   reduce using rule 11 (designation_opt -> empty .)
    INT_CONST_BIN   reduce using rule 11 (designation_opt -> empty .)
    FLOAT_CONST     reduce using rule 11 (designation_opt -> empty .)
    HEX_FLOAT_CONST reduce using rule 11 (designation_opt -> empty .)
    CHAR_CONST      reduce using rule 11 (designation_opt -> empty .)
    WCHAR_CONST     reduce using rule 11 (designation_opt -> empty .)
    STRING_LITERAL  reduce using rule 11 (designation_opt -> empty .)
    WSTRING_LITERAL reduce using rule 11 (designation_opt -> empty .)


state 339

    (180) initializer_list -> designation_opt . initializer
    (177) initializer -> . assignment_expression
    (178) initializer -> . brace_open initializer_list_opt brace_close
    (179) initializer -> . brace_open initializer_list COMMA brace_close
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (307) brace_open -> . LBRACE
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LBRACE          shift and go to state 101
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    initializer                    shift and go to state 433
    assignment_expression          shift and go to state 214
    brace_open                     shift and go to state 215
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 340

    (12) designation_opt -> designation .

    LBRACE          reduce using rule 12 (designation_opt -> designation .)
    PLUSPLUS        reduce using rule 12 (designation_opt -> designation .)
    MINUSMINUS      reduce using rule 12 (designation_opt -> designation .)
    SIZEOF          reduce using rule 12 (designation_opt -> designation .)
    LPAREN          reduce using rule 12 (designation_opt -> designation .)
    AND             reduce using rule 12 (designation_opt -> designation .)
    TIMES           reduce using rule 12 (designation_opt -> designation .)
    PLUS            reduce using rule 12 (designation_opt -> designation .)
    MINUS           reduce using rule 12 (designation_opt -> designation .)
    NOT             reduce using rule 12 (designation_opt -> designation .)
    LNOT            reduce using rule 12 (designation_opt -> designation .)
    OFFSETOF        reduce using rule 12 (designation_opt -> designation .)
    ID              reduce using rule 12 (designation_opt -> designation .)
    INT_CONST_DEC   reduce using rule 12 (designation_opt -> designation .)
    INT_CONST_OCT   reduce using rule 12 (designation_opt -> designation .)
    INT_CONST_HEX   reduce using rule 12 (designation_opt -> designation .)
    INT_CONST_BIN   reduce using rule 12 (designation_opt -> designation .)
    FLOAT_CONST     reduce using rule 12 (designation_opt -> designation .)
    HEX_FLOAT_CONST reduce using rule 12 (designation_opt -> designation .)
    CHAR_CONST      reduce using rule 12 (designation_opt -> designation .)
    WCHAR_CONST     reduce using rule 12 (designation_opt -> designation .)
    STRING_LITERAL  reduce using rule 12 (designation_opt -> designation .)
    WSTRING_LITERAL reduce using rule 12 (designation_opt -> designation .)


state 341

    (182) designation -> designator_list . EQUALS
    (184) designator_list -> designator_list . designator
    (185) designator -> . LBRACKET constant_expression RBRACKET
    (186) designator -> . PERIOD identifier

    EQUALS          shift and go to state 434
    LBRACKET        shift and go to state 343
    PERIOD          shift and go to state 344

    designator                     shift and go to state 435

state 342

    (183) designator_list -> designator .

    EQUALS          reduce using rule 183 (designator_list -> designator .)
    LBRACKET        reduce using rule 183 (designator_list -> designator .)
    PERIOD          reduce using rule 183 (designator_list -> designator .)


state 343

    (185) designator -> LBRACKET . constant_expression RBRACKET
    (235) constant_expression -> . conditional_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 271
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    constant_expression            shift and go to state 436
    conditional_expression         shift and go to state 269
    binary_expression              shift and go to state 181
    cast_expression                shift and go to state 186
    unary_expression               shift and go to state 270
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 344

    (186) designator -> PERIOD . identifier
    (294) identifier -> . ID

    ID              shift and go to state 127

    identifier                     shift and go to state 437

state 345

    (39) direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt . RBRACKET

    RBRACKET        shift and go to state 438


state 346

    (42) direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES . RBRACKET
    (266) unary_operator -> TIMES .

    RBRACKET        shift and go to state 439
    LPAREN          reduce using rule 266 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 266 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 266 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 266 (unary_operator -> TIMES .)
    AND             reduce using rule 266 (unary_operator -> TIMES .)
    TIMES           reduce using rule 266 (unary_operator -> TIMES .)
    PLUS            reduce using rule 266 (unary_operator -> TIMES .)
    MINUS           reduce using rule 266 (unary_operator -> TIMES .)
    NOT             reduce using rule 266 (unary_operator -> TIMES .)
    LNOT            reduce using rule 266 (unary_operator -> TIMES .)
    OFFSETOF        reduce using rule 266 (unary_operator -> TIMES .)
    ID              reduce using rule 266 (unary_operator -> TIMES .)
    INT_CONST_DEC   reduce using rule 266 (unary_operator -> TIMES .)
    INT_CONST_OCT   reduce using rule 266 (unary_operator -> TIMES .)
    INT_CONST_HEX   reduce using rule 266 (unary_operator -> TIMES .)
    INT_CONST_BIN   reduce using rule 266 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 266 (unary_operator -> TIMES .)
    HEX_FLOAT_CONST reduce using rule 266 (unary_operator -> TIMES .)
    CHAR_CONST      reduce using rule 266 (unary_operator -> TIMES .)
    WCHAR_CONST     reduce using rule 266 (unary_operator -> TIMES .)
    STRING_LITERAL  reduce using rule 266 (unary_operator -> TIMES .)
    WSTRING_LITERAL reduce using rule 266 (unary_operator -> TIMES .)


state 347

    (40) direct_typeid_declarator -> direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt . assignment_expression RBRACKET
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    assignment_expression          shift and go to state 440
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 348

    (41) direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list STATIC . assignment_expression RBRACKET
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    assignment_expression          shift and go to state 441
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 349

    (43) direct_typeid_declarator -> direct_typeid_declarator LPAREN parameter_type_list RPAREN .

    LBRACKET        reduce using rule 43 (direct_typeid_declarator -> direct_typeid_declarator LPAREN parameter_type_list RPAREN .)
    LPAREN          reduce using rule 43 (direct_typeid_declarator -> direct_typeid_declarator LPAREN parameter_type_list RPAREN .)
    EQUALS          reduce using rule 43 (direct_typeid_declarator -> direct_typeid_declarator LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 43 (direct_typeid_declarator -> direct_typeid_declarator LPAREN parameter_type_list RPAREN .)
    SEMI            reduce using rule 43 (direct_typeid_declarator -> direct_typeid_declarator LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 43 (direct_typeid_declarator -> direct_typeid_declarator LPAREN parameter_type_list RPAREN .)
    COLON           reduce using rule 43 (direct_typeid_declarator -> direct_typeid_declarator LPAREN parameter_type_list RPAREN .)


state 350

    (44) direct_typeid_declarator -> direct_typeid_declarator LPAREN identifier_list_opt RPAREN .

    LBRACKET        reduce using rule 44 (direct_typeid_declarator -> direct_typeid_declarator LPAREN identifier_list_opt RPAREN .)
    LPAREN          reduce using rule 44 (direct_typeid_declarator -> direct_typeid_declarator LPAREN identifier_list_opt RPAREN .)
    EQUALS          reduce using rule 44 (direct_typeid_declarator -> direct_typeid_declarator LPAREN identifier_list_opt RPAREN .)
    COMMA           reduce using rule 44 (direct_typeid_declarator -> direct_typeid_declarator LPAREN identifier_list_opt RPAREN .)
    SEMI            reduce using rule 44 (direct_typeid_declarator -> direct_typeid_declarator LPAREN identifier_list_opt RPAREN .)
    RPAREN          reduce using rule 44 (direct_typeid_declarator -> direct_typeid_declarator LPAREN identifier_list_opt RPAREN .)
    COLON           reduce using rule 44 (direct_typeid_declarator -> direct_typeid_declarator LPAREN identifier_list_opt RPAREN .)


state 351

    (31) direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .

    LBRACKET        reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    LPAREN          reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    CONST           reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    RESTRICT        reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    VOLATILE        reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    AUTO            reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    REGISTER        reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    STATIC          reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    EXTERN          reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    TYPEDEF         reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    INLINE          reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    TYPEID          reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    ENUM            reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    VOID            reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    _BOOL           reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    CHAR            reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    SHORT           reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    INT             reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    LONG            reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    FLOAT           reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    DOUBLE          reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    _COMPLEX        reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    SIGNED          reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    UNSIGNED        reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    __INT128        reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    STRUCT          reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    UNION           reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    LBRACE          reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    EQUALS          reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    COMMA           reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    SEMI            reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    RPAREN          reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    COLON           reduce using rule 31 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)


state 352

    (34) direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .

    LBRACKET        reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    LPAREN          reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    CONST           reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    RESTRICT        reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    VOLATILE        reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    AUTO            reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    REGISTER        reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    STATIC          reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    EXTERN          reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    TYPEDEF         reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    INLINE          reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    TYPEID          reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    ENUM            reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    VOID            reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    _BOOL           reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    CHAR            reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    SHORT           reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    INT             reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    LONG            reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    FLOAT           reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    DOUBLE          reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    _COMPLEX        reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    SIGNED          reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    UNSIGNED        reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    __INT128        reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    STRUCT          reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    UNION           reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    LBRACE          reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    EQUALS          reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    COMMA           reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    SEMI            reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    RPAREN          reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    COLON           reduce using rule 34 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)


state 353

    (32) direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression . RBRACKET

    RBRACKET        shift and go to state 442


state 354

    (33) direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression . RBRACKET

    RBRACKET        shift and go to state 443


state 355

    (169) parameter_type_list -> parameter_list COMMA ELLIPSIS .

    RPAREN          reduce using rule 169 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)


state 356

    (171) parameter_list -> parameter_list COMMA parameter_declaration .

    COMMA           reduce using rule 171 (parameter_list -> parameter_list COMMA parameter_declaration .)
    RPAREN          reduce using rule 171 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 357

    (176) identifier_list -> identifier_list COMMA identifier .

    COMMA           reduce using rule 176 (identifier_list -> identifier_list COMMA identifier .)
    RPAREN          reduce using rule 176 (identifier_list -> identifier_list COMMA identifier .)


state 358

    (57) typeid_noparen_declarator -> pointer direct_typeid_noparen_declarator .
    (46) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator . LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (47) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator . LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (48) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (49) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator . LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (50) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator . LPAREN parameter_type_list RPAREN
    (51) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator . LPAREN identifier_list_opt RPAREN

    COMMA           reduce using rule 57 (typeid_noparen_declarator -> pointer direct_typeid_noparen_declarator .)
    RPAREN          reduce using rule 57 (typeid_noparen_declarator -> pointer direct_typeid_noparen_declarator .)
    LBRACKET        shift and go to state 360
    LPAREN          shift and go to state 361


state 359

    (189) abstract_declarator -> pointer direct_abstract_declarator .
    (192) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET assignment_expression_opt RBRACKET
    (194) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET TIMES RBRACKET
    (196) direct_abstract_declarator -> direct_abstract_declarator . LPAREN parameter_type_list_opt RPAREN

    COMMA           reduce using rule 189 (abstract_declarator -> pointer direct_abstract_declarator .)
    RPAREN          reduce using rule 189 (abstract_declarator -> pointer direct_abstract_declarator .)
    LBRACKET        shift and go to state 369
    LPAREN          shift and go to state 370


state 360

    (46) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET . type_qualifier_list_opt assignment_expression_opt RBRACKET
    (47) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET . STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (48) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET . type_qualifier_list STATIC assignment_expression RBRACKET
    (49) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET . type_qualifier_list_opt TIMES RBRACKET
    (27) type_qualifier_list_opt -> . empty
    (28) type_qualifier_list_opt -> . type_qualifier_list
    (166) type_qualifier_list -> . type_qualifier
    (167) type_qualifier_list -> . type_qualifier_list type_qualifier
    (309) empty -> .
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE

    STATIC          shift and go to state 445
    TIMES           reduce using rule 309 (empty -> .)
    PLUSPLUS        reduce using rule 309 (empty -> .)
    MINUSMINUS      reduce using rule 309 (empty -> .)
    SIZEOF          reduce using rule 309 (empty -> .)
    LPAREN          reduce using rule 309 (empty -> .)
    AND             reduce using rule 309 (empty -> .)
    PLUS            reduce using rule 309 (empty -> .)
    MINUS           reduce using rule 309 (empty -> .)
    NOT             reduce using rule 309 (empty -> .)
    LNOT            reduce using rule 309 (empty -> .)
    OFFSETOF        reduce using rule 309 (empty -> .)
    ID              reduce using rule 309 (empty -> .)
    INT_CONST_DEC   reduce using rule 309 (empty -> .)
    INT_CONST_OCT   reduce using rule 309 (empty -> .)
    INT_CONST_HEX   reduce using rule 309 (empty -> .)
    INT_CONST_BIN   reduce using rule 309 (empty -> .)
    FLOAT_CONST     reduce using rule 309 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 309 (empty -> .)
    CHAR_CONST      reduce using rule 309 (empty -> .)
    WCHAR_CONST     reduce using rule 309 (empty -> .)
    STRING_LITERAL  reduce using rule 309 (empty -> .)
    WSTRING_LITERAL reduce using rule 309 (empty -> .)
    RBRACKET        reduce using rule 309 (empty -> .)
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47

    type_qualifier_list_opt        shift and go to state 444
    type_qualifier_list            shift and go to state 446
    empty                          shift and go to state 95
    type_qualifier                 shift and go to state 97

state 361

    (50) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN . parameter_type_list RPAREN
    (51) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN . identifier_list_opt RPAREN
    (168) parameter_type_list -> . parameter_list
    (169) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (17) identifier_list_opt -> . empty
    (18) identifier_list_opt -> . identifier_list
    (170) parameter_list -> . parameter_declaration
    (171) parameter_list -> . parameter_list COMMA parameter_declaration
    (309) empty -> .
    (175) identifier_list -> . identifier
    (176) identifier_list -> . identifier_list COMMA identifier
    (172) parameter_declaration -> . declaration_specifiers id_declarator
    (173) parameter_declaration -> . declaration_specifiers typeid_noparen_declarator
    (174) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (294) identifier -> . ID
    (89) declaration_specifiers -> . declaration_specifiers type_qualifier
    (90) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (91) declaration_specifiers -> . declaration_specifiers function_specifier
    (92) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (93) declaration_specifiers -> . type_specifier
    (94) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (113) type_specifier -> . typedef_name
    (114) type_specifier -> . enum_specifier
    (115) type_specifier -> . struct_or_union_specifier
    (116) type_specifier -> . type_specifier_no_typeid
    (86) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (87) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (88) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (221) typedef_name -> . TYPEID
    (152) enum_specifier -> . ENUM ID
    (153) enum_specifier -> . ENUM TYPEID
    (154) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (155) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (156) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (132) struct_or_union_specifier -> . struct_or_union ID
    (133) struct_or_union_specifier -> . struct_or_union TYPEID
    (134) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (135) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (136) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (137) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (138) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (139) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (101) type_specifier_no_typeid -> . VOID
    (102) type_specifier_no_typeid -> . _BOOL
    (103) type_specifier_no_typeid -> . CHAR
    (104) type_specifier_no_typeid -> . SHORT
    (105) type_specifier_no_typeid -> . INT
    (106) type_specifier_no_typeid -> . LONG
    (107) type_specifier_no_typeid -> . FLOAT
    (108) type_specifier_no_typeid -> . DOUBLE
    (109) type_specifier_no_typeid -> . _COMPLEX
    (110) type_specifier_no_typeid -> . SIGNED
    (111) type_specifier_no_typeid -> . UNSIGNED
    (112) type_specifier_no_typeid -> . __INT128
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE
    (95) storage_class_specifier -> . AUTO
    (96) storage_class_specifier -> . REGISTER
    (97) storage_class_specifier -> . STATIC
    (98) storage_class_specifier -> . EXTERN
    (99) storage_class_specifier -> . TYPEDEF
    (100) function_specifier -> . INLINE
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

    RPAREN          reduce using rule 309 (empty -> .)
    ID              shift and go to state 127
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    VOID            shift and go to state 33
    _BOOL           shift and go to state 34
    CHAR            shift and go to state 35
    SHORT           shift and go to state 36
    INT             shift and go to state 37
    LONG            shift and go to state 38
    FLOAT           shift and go to state 39
    DOUBLE          shift and go to state 40
    _COMPLEX        shift and go to state 41
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 43
    __INT128        shift and go to state 44
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47
    AUTO            shift and go to state 48
    REGISTER        shift and go to state 49
    STATIC          shift and go to state 25
    EXTERN          shift and go to state 50
    TYPEDEF         shift and go to state 51
    INLINE          shift and go to state 52
    STRUCT          shift and go to state 53
    UNION           shift and go to state 54

    parameter_type_list            shift and go to state 447
    identifier_list_opt            shift and go to state 448
    parameter_list                 shift and go to state 121
    empty                          shift and go to state 122
    identifier_list                shift and go to state 123
    parameter_declaration          shift and go to state 124
    identifier                     shift and go to state 125
    declaration_specifiers         shift and go to state 126
    type_qualifier                 shift and go to state 17
    storage_class_specifier        shift and go to state 18
    function_specifier             shift and go to state 19
    type_specifier_no_typeid       shift and go to state 20
    type_specifier                 shift and go to state 21
    declaration_specifiers_no_type shift and go to state 128
    typedef_name                   shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union_specifier      shift and go to state 29
    struct_or_union                shift and go to state 32

state 362

    (191) direct_abstract_declarator -> LPAREN abstract_declarator . RPAREN

    RPAREN          shift and go to state 449


state 363

    (197) direct_abstract_declarator -> LPAREN parameter_type_list_opt . RPAREN

    RPAREN          shift and go to state 450


state 364

    (53) id_declarator -> pointer . direct_id_declarator
    (188) abstract_declarator -> pointer .
    (189) abstract_declarator -> pointer . direct_abstract_declarator
    (29) direct_id_declarator -> . ID
    (30) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (31) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (35) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (36) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (191) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (192) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (193) direct_abstract_declarator -> . LBRACKET assignment_expression_opt RBRACKET
    (194) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (195) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (196) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (197) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN

    RPAREN          reduce using rule 188 (abstract_declarator -> pointer .)
    ID              shift and go to state 23
    LPAREN          shift and go to state 238
    LBRACKET        shift and go to state 239

    direct_id_declarator           shift and go to state 81
    direct_abstract_declarator     shift and go to state 359

state 365

    (23) parameter_type_list_opt -> empty .

    RPAREN          reduce using rule 23 (parameter_type_list_opt -> empty .)


state 366

    (24) parameter_type_list_opt -> parameter_type_list .

    RPAREN          reduce using rule 24 (parameter_type_list_opt -> parameter_type_list .)


state 367

    (193) direct_abstract_declarator -> LBRACKET assignment_expression_opt . RBRACKET

    RBRACKET        shift and go to state 451


state 368

    (195) direct_abstract_declarator -> LBRACKET TIMES . RBRACKET
    (266) unary_operator -> TIMES .

    RBRACKET        shift and go to state 452
    LPAREN          reduce using rule 266 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 266 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 266 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 266 (unary_operator -> TIMES .)
    AND             reduce using rule 266 (unary_operator -> TIMES .)
    TIMES           reduce using rule 266 (unary_operator -> TIMES .)
    PLUS            reduce using rule 266 (unary_operator -> TIMES .)
    MINUS           reduce using rule 266 (unary_operator -> TIMES .)
    NOT             reduce using rule 266 (unary_operator -> TIMES .)
    LNOT            reduce using rule 266 (unary_operator -> TIMES .)
    OFFSETOF        reduce using rule 266 (unary_operator -> TIMES .)
    ID              reduce using rule 266 (unary_operator -> TIMES .)
    INT_CONST_DEC   reduce using rule 266 (unary_operator -> TIMES .)
    INT_CONST_OCT   reduce using rule 266 (unary_operator -> TIMES .)
    INT_CONST_HEX   reduce using rule 266 (unary_operator -> TIMES .)
    INT_CONST_BIN   reduce using rule 266 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 266 (unary_operator -> TIMES .)
    HEX_FLOAT_CONST reduce using rule 266 (unary_operator -> TIMES .)
    CHAR_CONST      reduce using rule 266 (unary_operator -> TIMES .)
    WCHAR_CONST     reduce using rule 266 (unary_operator -> TIMES .)
    STRING_LITERAL  reduce using rule 266 (unary_operator -> TIMES .)
    WSTRING_LITERAL reduce using rule 266 (unary_operator -> TIMES .)


state 369

    (192) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . assignment_expression_opt RBRACKET
    (194) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . TIMES RBRACKET
    (3) assignment_expression_opt -> . empty
    (4) assignment_expression_opt -> . assignment_expression
    (309) empty -> .
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    TIMES           shift and go to state 454
    RBRACKET        reduce using rule 309 (empty -> .)
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    assignment_expression_opt      shift and go to state 453
    empty                          shift and go to state 223
    assignment_expression          shift and go to state 224
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 370

    (196) direct_abstract_declarator -> direct_abstract_declarator LPAREN . parameter_type_list_opt RPAREN
    (23) parameter_type_list_opt -> . empty
    (24) parameter_type_list_opt -> . parameter_type_list
    (309) empty -> .
    (168) parameter_type_list -> . parameter_list
    (169) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (170) parameter_list -> . parameter_declaration
    (171) parameter_list -> . parameter_list COMMA parameter_declaration
    (172) parameter_declaration -> . declaration_specifiers id_declarator
    (173) parameter_declaration -> . declaration_specifiers typeid_noparen_declarator
    (174) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (89) declaration_specifiers -> . declaration_specifiers type_qualifier
    (90) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (91) declaration_specifiers -> . declaration_specifiers function_specifier
    (92) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (93) declaration_specifiers -> . type_specifier
    (94) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (113) type_specifier -> . typedef_name
    (114) type_specifier -> . enum_specifier
    (115) type_specifier -> . struct_or_union_specifier
    (116) type_specifier -> . type_specifier_no_typeid
    (86) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (87) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (88) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (221) typedef_name -> . TYPEID
    (152) enum_specifier -> . ENUM ID
    (153) enum_specifier -> . ENUM TYPEID
    (154) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (155) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (156) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (132) struct_or_union_specifier -> . struct_or_union ID
    (133) struct_or_union_specifier -> . struct_or_union TYPEID
    (134) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (135) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (136) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (137) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (138) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (139) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (101) type_specifier_no_typeid -> . VOID
    (102) type_specifier_no_typeid -> . _BOOL
    (103) type_specifier_no_typeid -> . CHAR
    (104) type_specifier_no_typeid -> . SHORT
    (105) type_specifier_no_typeid -> . INT
    (106) type_specifier_no_typeid -> . LONG
    (107) type_specifier_no_typeid -> . FLOAT
    (108) type_specifier_no_typeid -> . DOUBLE
    (109) type_specifier_no_typeid -> . _COMPLEX
    (110) type_specifier_no_typeid -> . SIGNED
    (111) type_specifier_no_typeid -> . UNSIGNED
    (112) type_specifier_no_typeid -> . __INT128
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE
    (95) storage_class_specifier -> . AUTO
    (96) storage_class_specifier -> . REGISTER
    (97) storage_class_specifier -> . STATIC
    (98) storage_class_specifier -> . EXTERN
    (99) storage_class_specifier -> . TYPEDEF
    (100) function_specifier -> . INLINE
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

    RPAREN          reduce using rule 309 (empty -> .)
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    VOID            shift and go to state 33
    _BOOL           shift and go to state 34
    CHAR            shift and go to state 35
    SHORT           shift and go to state 36
    INT             shift and go to state 37
    LONG            shift and go to state 38
    FLOAT           shift and go to state 39
    DOUBLE          shift and go to state 40
    _COMPLEX        shift and go to state 41
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 43
    __INT128        shift and go to state 44
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47
    AUTO            shift and go to state 48
    REGISTER        shift and go to state 49
    STATIC          shift and go to state 25
    EXTERN          shift and go to state 50
    TYPEDEF         shift and go to state 51
    INLINE          shift and go to state 52
    STRUCT          shift and go to state 53
    UNION           shift and go to state 54

    parameter_type_list_opt        shift and go to state 455
    empty                          shift and go to state 365
    parameter_type_list            shift and go to state 366
    parameter_list                 shift and go to state 121
    parameter_declaration          shift and go to state 124
    declaration_specifiers         shift and go to state 126
    type_qualifier                 shift and go to state 17
    storage_class_specifier        shift and go to state 18
    function_specifier             shift and go to state 19
    type_specifier_no_typeid       shift and go to state 20
    type_specifier                 shift and go to state 21
    declaration_specifiers_no_type shift and go to state 128
    typedef_name                   shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union_specifier      shift and go to state 29
    struct_or_union                shift and go to state 32

state 371

    (155) enum_specifier -> ENUM ID brace_open enumerator_list brace_close .

    CONST           reduce using rule 155 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    RESTRICT        reduce using rule 155 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    VOLATILE        reduce using rule 155 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    AUTO            reduce using rule 155 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    REGISTER        reduce using rule 155 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    STATIC          reduce using rule 155 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    EXTERN          reduce using rule 155 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    TYPEDEF         reduce using rule 155 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    INLINE          reduce using rule 155 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    VOID            reduce using rule 155 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    _BOOL           reduce using rule 155 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    CHAR            reduce using rule 155 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    SHORT           reduce using rule 155 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    INT             reduce using rule 155 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    LONG            reduce using rule 155 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    FLOAT           reduce using rule 155 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    DOUBLE          reduce using rule 155 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    _COMPLEX        reduce using rule 155 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    SIGNED          reduce using rule 155 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    UNSIGNED        reduce using rule 155 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    __INT128        reduce using rule 155 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    ID              reduce using rule 155 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    LPAREN          reduce using rule 155 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    TIMES           reduce using rule 155 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    TYPEID          reduce using rule 155 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    SEMI            reduce using rule 155 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    LBRACKET        reduce using rule 155 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    COMMA           reduce using rule 155 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    RPAREN          reduce using rule 155 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    COLON           reduce using rule 155 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)


state 372

    (156) enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .

    CONST           reduce using rule 156 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    RESTRICT        reduce using rule 156 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    VOLATILE        reduce using rule 156 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    AUTO            reduce using rule 156 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    REGISTER        reduce using rule 156 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    STATIC          reduce using rule 156 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    EXTERN          reduce using rule 156 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    TYPEDEF         reduce using rule 156 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    INLINE          reduce using rule 156 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    VOID            reduce using rule 156 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    _BOOL           reduce using rule 156 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    CHAR            reduce using rule 156 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    SHORT           reduce using rule 156 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    INT             reduce using rule 156 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    LONG            reduce using rule 156 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    FLOAT           reduce using rule 156 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    DOUBLE          reduce using rule 156 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    _COMPLEX        reduce using rule 156 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    SIGNED          reduce using rule 156 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    UNSIGNED        reduce using rule 156 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    __INT128        reduce using rule 156 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    ID              reduce using rule 156 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    LPAREN          reduce using rule 156 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    TIMES           reduce using rule 156 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    TYPEID          reduce using rule 156 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    SEMI            reduce using rule 156 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    LBRACKET        reduce using rule 156 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    COMMA           reduce using rule 156 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    RPAREN          reduce using rule 156 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    COLON           reduce using rule 156 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)


state 373

    (159) enumerator_list -> enumerator_list COMMA enumerator .

    COMMA           reduce using rule 159 (enumerator_list -> enumerator_list COMMA enumerator .)
    RBRACE          reduce using rule 159 (enumerator_list -> enumerator_list COMMA enumerator .)


state 374

    (161) enumerator -> ID EQUALS constant_expression .

    COMMA           reduce using rule 161 (enumerator -> ID EQUALS constant_expression .)
    RBRACE          reduce using rule 161 (enumerator -> ID EQUALS constant_expression .)


state 375

    (136) struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .

    CONST           reduce using rule 136 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    RESTRICT        reduce using rule 136 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    VOLATILE        reduce using rule 136 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    AUTO            reduce using rule 136 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    REGISTER        reduce using rule 136 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    STATIC          reduce using rule 136 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    EXTERN          reduce using rule 136 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    TYPEDEF         reduce using rule 136 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    INLINE          reduce using rule 136 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    VOID            reduce using rule 136 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    _BOOL           reduce using rule 136 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    CHAR            reduce using rule 136 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    SHORT           reduce using rule 136 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    INT             reduce using rule 136 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    LONG            reduce using rule 136 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    FLOAT           reduce using rule 136 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    DOUBLE          reduce using rule 136 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    _COMPLEX        reduce using rule 136 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    SIGNED          reduce using rule 136 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    UNSIGNED        reduce using rule 136 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    __INT128        reduce using rule 136 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    ID              reduce using rule 136 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    LPAREN          reduce using rule 136 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    TIMES           reduce using rule 136 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    TYPEID          reduce using rule 136 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    SEMI            reduce using rule 136 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    LBRACKET        reduce using rule 136 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    COMMA           reduce using rule 136 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    RPAREN          reduce using rule 136 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    COLON           reduce using rule 136 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)


state 376

    (138) struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .

    CONST           reduce using rule 138 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    RESTRICT        reduce using rule 138 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    VOLATILE        reduce using rule 138 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    AUTO            reduce using rule 138 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    REGISTER        reduce using rule 138 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    STATIC          reduce using rule 138 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    EXTERN          reduce using rule 138 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    TYPEDEF         reduce using rule 138 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    INLINE          reduce using rule 138 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    VOID            reduce using rule 138 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    _BOOL           reduce using rule 138 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    CHAR            reduce using rule 138 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    SHORT           reduce using rule 138 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    INT             reduce using rule 138 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    LONG            reduce using rule 138 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    FLOAT           reduce using rule 138 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    DOUBLE          reduce using rule 138 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    _COMPLEX        reduce using rule 138 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    SIGNED          reduce using rule 138 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    UNSIGNED        reduce using rule 138 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    __INT128        reduce using rule 138 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    ID              reduce using rule 138 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    LPAREN          reduce using rule 138 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    TIMES           reduce using rule 138 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    TYPEID          reduce using rule 138 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    SEMI            reduce using rule 138 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    LBRACKET        reduce using rule 138 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    COMMA           reduce using rule 138 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    RPAREN          reduce using rule 138 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    COLON           reduce using rule 138 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)


state 377

    (144) struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .

    RBRACE          reduce using rule 144 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    SEMI            reduce using rule 144 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    PPPRAGMA        reduce using rule 144 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    TYPEID          reduce using rule 144 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    ENUM            reduce using rule 144 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    VOID            reduce using rule 144 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    _BOOL           reduce using rule 144 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    CHAR            reduce using rule 144 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    SHORT           reduce using rule 144 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    INT             reduce using rule 144 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    LONG            reduce using rule 144 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    FLOAT           reduce using rule 144 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    DOUBLE          reduce using rule 144 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    _COMPLEX        reduce using rule 144 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    SIGNED          reduce using rule 144 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    UNSIGNED        reduce using rule 144 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    __INT128        reduce using rule 144 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    CONST           reduce using rule 144 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    RESTRICT        reduce using rule 144 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    VOLATILE        reduce using rule 144 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    STRUCT          reduce using rule 144 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    UNION           reduce using rule 144 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)


state 378

    (148) struct_declarator_list -> struct_declarator_list COMMA . struct_declarator
    (149) struct_declarator -> . declarator
    (150) struct_declarator -> . declarator COLON constant_expression
    (151) struct_declarator -> . COLON constant_expression
    (162) declarator -> . id_declarator
    (163) declarator -> . typeid_declarator
    (52) id_declarator -> . direct_id_declarator
    (53) id_declarator -> . pointer direct_id_declarator
    (54) typeid_declarator -> . direct_typeid_declarator
    (55) typeid_declarator -> . pointer direct_typeid_declarator
    (29) direct_id_declarator -> . ID
    (30) direct_id_declarator -> . LPAREN id_declarator RPAREN
    (31) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (32) direct_id_declarator -> . direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (33) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (34) direct_id_declarator -> . direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (35) direct_id_declarator -> . direct_id_declarator LPAREN parameter_type_list RPAREN
    (36) direct_id_declarator -> . direct_id_declarator LPAREN identifier_list_opt RPAREN
    (164) pointer -> . TIMES type_qualifier_list_opt
    (165) pointer -> . TIMES type_qualifier_list_opt pointer
    (37) direct_typeid_declarator -> . TYPEID
    (38) direct_typeid_declarator -> . LPAREN typeid_declarator RPAREN
    (39) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (40) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (41) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (42) direct_typeid_declarator -> . direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (43) direct_typeid_declarator -> . direct_typeid_declarator LPAREN parameter_type_list RPAREN
    (44) direct_typeid_declarator -> . direct_typeid_declarator LPAREN identifier_list_opt RPAREN

    COLON           shift and go to state 262
    ID              shift and go to state 23
    LPAREN          shift and go to state 71
    TIMES           shift and go to state 26
    TYPEID          shift and go to state 76

    struct_declarator              shift and go to state 456
    declarator                     shift and go to state 261
    id_declarator                  shift and go to state 108
    typeid_declarator              shift and go to state 74
    direct_id_declarator           shift and go to state 15
    pointer                        shift and go to state 68
    direct_typeid_declarator       shift and go to state 75

state 379

    (150) struct_declarator -> declarator COLON . constant_expression
    (235) constant_expression -> . conditional_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 271
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    constant_expression            shift and go to state 457
    conditional_expression         shift and go to state 269
    binary_expression              shift and go to state 181
    cast_expression                shift and go to state 186
    unary_expression               shift and go to state 270
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 380

    (151) struct_declarator -> COLON constant_expression .

    COMMA           reduce using rule 151 (struct_declarator -> COLON constant_expression .)
    SEMI            reduce using rule 151 (struct_declarator -> COLON constant_expression .)


state 381

    (203) labeled_statement -> ID COLON pragmacomp_or_statement .

    ID              reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    CASE            reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    DEFAULT         reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    IF              reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    SWITCH          reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    WHILE           reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    DO              reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    FOR             reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    GOTO            reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    BREAK           reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    CONTINUE        reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    RETURN          reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    PPPRAGMA        reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    LBRACE          reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    CONST           reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    RESTRICT        reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    VOLATILE        reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    AUTO            reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    REGISTER        reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    STATIC          reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    EXTERN          reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    TYPEDEF         reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    INLINE          reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    TYPEID          reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    ENUM            reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    VOID            reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    _BOOL           reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    CHAR            reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    SHORT           reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    INT             reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    LONG            reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    FLOAT           reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    DOUBLE          reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    _COMPLEX        reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    SIGNED          reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    UNSIGNED        reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    __INT128        reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    STRUCT          reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    UNION           reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    PLUSPLUS        reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    MINUSMINUS      reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    SIZEOF          reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    LPAREN          reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    AND             reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    TIMES           reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    PLUS            reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    MINUS           reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    NOT             reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    LNOT            reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    OFFSETOF        reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    INT_CONST_DEC   reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    INT_CONST_OCT   reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    INT_CONST_HEX   reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    INT_CONST_BIN   reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    FLOAT_CONST     reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    HEX_FLOAT_CONST reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    CHAR_CONST      reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    WCHAR_CONST     reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    STRING_LITERAL  reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    WSTRING_LITERAL reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    SEMI            reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    RBRACE          reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)
    ELSE            reduce using rule 203 (labeled_statement -> ID COLON pragmacomp_or_statement .)


state 382

    (204) labeled_statement -> CASE constant_expression COLON . pragmacomp_or_statement
    (79) pragmacomp_or_statement -> . pppragma_directive statement
    (80) pragmacomp_or_statement -> . statement
    (68) pppragma_directive -> . PPPRAGMA
    (69) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (72) statement -> . labeled_statement
    (73) statement -> . expression_statement
    (74) statement -> . compound_statement
    (75) statement -> . selection_statement
    (76) statement -> . iteration_statement
    (77) statement -> . jump_statement
    (78) statement -> . pppragma_directive
    (203) labeled_statement -> . ID COLON pragmacomp_or_statement
    (204) labeled_statement -> . CASE constant_expression COLON pragmacomp_or_statement
    (205) labeled_statement -> . DEFAULT COLON pragmacomp_or_statement
    (218) expression_statement -> . expression_opt SEMI
    (202) compound_statement -> . brace_open block_item_list_opt brace_close
    (206) selection_statement -> . IF LPAREN expression RPAREN pragmacomp_or_statement
    (207) selection_statement -> . IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
    (208) selection_statement -> . SWITCH LPAREN expression RPAREN pragmacomp_or_statement
    (209) iteration_statement -> . WHILE LPAREN expression RPAREN pragmacomp_or_statement
    (210) iteration_statement -> . DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI
    (211) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (212) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (213) jump_statement -> . GOTO ID SEMI
    (214) jump_statement -> . BREAK SEMI
    (215) jump_statement -> . CONTINUE SEMI
    (216) jump_statement -> . RETURN expression SEMI
    (217) jump_statement -> . RETURN SEMI
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (307) brace_open -> . LBRACE
    (309) empty -> .
    (219) expression -> . assignment_expression
    (220) expression -> . expression COMMA assignment_expression
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PPPRAGMA        shift and go to state 14
    ID              shift and go to state 163
    CASE            shift and go to state 164
    DEFAULT         shift and go to state 165
    IF              shift and go to state 167
    SWITCH          shift and go to state 170
    WHILE           shift and go to state 171
    DO              shift and go to state 172
    FOR             shift and go to state 173
    GOTO            shift and go to state 174
    BREAK           shift and go to state 175
    CONTINUE        shift and go to state 176
    RETURN          shift and go to state 177
    LBRACE          shift and go to state 101
    SEMI            reduce using rule 309 (empty -> .)
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    pragmacomp_or_statement        shift and go to state 458
    pppragma_directive             shift and go to state 282
    statement                      shift and go to state 283
    labeled_statement              shift and go to state 156
    expression_statement           shift and go to state 157
    compound_statement             shift and go to state 158
    selection_statement            shift and go to state 159
    iteration_statement            shift and go to state 160
    jump_statement                 shift and go to state 161
    expression_opt                 shift and go to state 166
    brace_open                     shift and go to state 106
    expression                     shift and go to state 169
    empty                          shift and go to state 266
    assignment_expression          shift and go to state 178
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 383

    (258) cast_expression -> LPAREN type_name . RPAREN cast_expression
    (281) postfix_expression -> LPAREN type_name . RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> LPAREN type_name . RPAREN brace_open initializer_list COMMA brace_close

    RPAREN          shift and go to state 459


state 384

    (205) labeled_statement -> DEFAULT COLON pragmacomp_or_statement .

    ID              reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    CASE            reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    DEFAULT         reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    IF              reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    SWITCH          reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    WHILE           reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    DO              reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    FOR             reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    GOTO            reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    BREAK           reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    CONTINUE        reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    RETURN          reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    PPPRAGMA        reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    LBRACE          reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    CONST           reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    RESTRICT        reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    VOLATILE        reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    AUTO            reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    REGISTER        reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    STATIC          reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    EXTERN          reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    TYPEDEF         reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    INLINE          reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    TYPEID          reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    ENUM            reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    VOID            reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    _BOOL           reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    CHAR            reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    SHORT           reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    INT             reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    LONG            reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    FLOAT           reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    DOUBLE          reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    _COMPLEX        reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    SIGNED          reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    UNSIGNED        reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    __INT128        reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    STRUCT          reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    UNION           reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    PLUSPLUS        reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    MINUSMINUS      reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    SIZEOF          reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    LPAREN          reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    AND             reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    TIMES           reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    PLUS            reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    MINUS           reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    NOT             reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    LNOT            reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    OFFSETOF        reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    INT_CONST_DEC   reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    INT_CONST_OCT   reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    INT_CONST_HEX   reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    INT_CONST_BIN   reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    FLOAT_CONST     reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    HEX_FLOAT_CONST reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    CHAR_CONST      reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    WCHAR_CONST     reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    STRING_LITERAL  reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    WSTRING_LITERAL reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    SEMI            reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    RBRACE          reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)
    ELSE            reduce using rule 205 (labeled_statement -> DEFAULT COLON pragmacomp_or_statement .)


state 385

    (206) selection_statement -> IF LPAREN expression . RPAREN pragmacomp_or_statement
    (207) selection_statement -> IF LPAREN expression . RPAREN statement ELSE pragmacomp_or_statement
    (220) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 460
    COMMA           shift and go to state 278


state 386

    (281) postfix_expression -> LPAREN type_name RPAREN . brace_open initializer_list brace_close
    (282) postfix_expression -> LPAREN type_name RPAREN . brace_open initializer_list COMMA brace_close
    (258) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (307) brace_open -> . LBRACE
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LBRACE          shift and go to state 101
    LPAREN          shift and go to state 271
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    brace_open                     shift and go to state 461
    cast_expression                shift and go to state 462
    unary_expression               shift and go to state 270
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 387

    (287) primary_expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    PERIOD          reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    ARROW           reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    MINUSMINUS      reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    XOREQUAL        reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    TIMESEQUAL      reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    DIVEQUAL        reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    MODEQUAL        reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    PLUSEQUAL       reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    MINUSEQUAL      reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFTEQUAL     reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFTEQUAL     reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    ANDEQUAL        reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    OREQUAL         reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    CONDOP          reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 287 (primary_expression -> LPAREN expression RPAREN .)


state 388

    (187) type_name -> specifier_qualifier_list abstract_declarator_opt .

    RPAREN          reduce using rule 187 (type_name -> specifier_qualifier_list abstract_declarator_opt .)
    COMMA           reduce using rule 187 (type_name -> specifier_qualifier_list abstract_declarator_opt .)


state 389

    (188) abstract_declarator -> pointer .
    (189) abstract_declarator -> pointer . direct_abstract_declarator
    (191) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (192) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (193) direct_abstract_declarator -> . LBRACKET assignment_expression_opt RBRACKET
    (194) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (195) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (196) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (197) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN

    RPAREN          reduce using rule 188 (abstract_declarator -> pointer .)
    COMMA           reduce using rule 188 (abstract_declarator -> pointer .)
    LPAREN          shift and go to state 390
    LBRACKET        shift and go to state 239

    direct_abstract_declarator     shift and go to state 359

state 390

    (191) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (197) direct_abstract_declarator -> LPAREN . parameter_type_list_opt RPAREN
    (188) abstract_declarator -> . pointer
    (189) abstract_declarator -> . pointer direct_abstract_declarator
    (190) abstract_declarator -> . direct_abstract_declarator
    (23) parameter_type_list_opt -> . empty
    (24) parameter_type_list_opt -> . parameter_type_list
    (164) pointer -> . TIMES type_qualifier_list_opt
    (165) pointer -> . TIMES type_qualifier_list_opt pointer
    (191) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (192) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (193) direct_abstract_declarator -> . LBRACKET assignment_expression_opt RBRACKET
    (194) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (195) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (196) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (197) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN
    (309) empty -> .
    (168) parameter_type_list -> . parameter_list
    (169) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (170) parameter_list -> . parameter_declaration
    (171) parameter_list -> . parameter_list COMMA parameter_declaration
    (172) parameter_declaration -> . declaration_specifiers id_declarator
    (173) parameter_declaration -> . declaration_specifiers typeid_noparen_declarator
    (174) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (89) declaration_specifiers -> . declaration_specifiers type_qualifier
    (90) declaration_specifiers -> . declaration_specifiers storage_class_specifier
    (91) declaration_specifiers -> . declaration_specifiers function_specifier
    (92) declaration_specifiers -> . declaration_specifiers type_specifier_no_typeid
    (93) declaration_specifiers -> . type_specifier
    (94) declaration_specifiers -> . declaration_specifiers_no_type type_specifier
    (113) type_specifier -> . typedef_name
    (114) type_specifier -> . enum_specifier
    (115) type_specifier -> . struct_or_union_specifier
    (116) type_specifier -> . type_specifier_no_typeid
    (86) declaration_specifiers_no_type -> . type_qualifier declaration_specifiers_no_type_opt
    (87) declaration_specifiers_no_type -> . storage_class_specifier declaration_specifiers_no_type_opt
    (88) declaration_specifiers_no_type -> . function_specifier declaration_specifiers_no_type_opt
    (221) typedef_name -> . TYPEID
    (152) enum_specifier -> . ENUM ID
    (153) enum_specifier -> . ENUM TYPEID
    (154) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (155) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (156) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (132) struct_or_union_specifier -> . struct_or_union ID
    (133) struct_or_union_specifier -> . struct_or_union TYPEID
    (134) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (135) struct_or_union_specifier -> . struct_or_union brace_open brace_close
    (136) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (137) struct_or_union_specifier -> . struct_or_union ID brace_open brace_close
    (138) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (139) struct_or_union_specifier -> . struct_or_union TYPEID brace_open brace_close
    (101) type_specifier_no_typeid -> . VOID
    (102) type_specifier_no_typeid -> . _BOOL
    (103) type_specifier_no_typeid -> . CHAR
    (104) type_specifier_no_typeid -> . SHORT
    (105) type_specifier_no_typeid -> . INT
    (106) type_specifier_no_typeid -> . LONG
    (107) type_specifier_no_typeid -> . FLOAT
    (108) type_specifier_no_typeid -> . DOUBLE
    (109) type_specifier_no_typeid -> . _COMPLEX
    (110) type_specifier_no_typeid -> . SIGNED
    (111) type_specifier_no_typeid -> . UNSIGNED
    (112) type_specifier_no_typeid -> . __INT128
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE
    (95) storage_class_specifier -> . AUTO
    (96) storage_class_specifier -> . REGISTER
    (97) storage_class_specifier -> . STATIC
    (98) storage_class_specifier -> . EXTERN
    (99) storage_class_specifier -> . TYPEDEF
    (100) function_specifier -> . INLINE
    (140) struct_or_union -> . STRUCT
    (141) struct_or_union -> . UNION

    TIMES           shift and go to state 26
    LPAREN          shift and go to state 390
    LBRACKET        shift and go to state 239
    RPAREN          reduce using rule 309 (empty -> .)
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    VOID            shift and go to state 33
    _BOOL           shift and go to state 34
    CHAR            shift and go to state 35
    SHORT           shift and go to state 36
    INT             shift and go to state 37
    LONG            shift and go to state 38
    FLOAT           shift and go to state 39
    DOUBLE          shift and go to state 40
    _COMPLEX        shift and go to state 41
    SIGNED          shift and go to state 42
    UNSIGNED        shift and go to state 43
    __INT128        shift and go to state 44
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47
    AUTO            shift and go to state 48
    REGISTER        shift and go to state 49
    STATIC          shift and go to state 25
    EXTERN          shift and go to state 50
    TYPEDEF         shift and go to state 51
    INLINE          shift and go to state 52
    STRUCT          shift and go to state 53
    UNION           shift and go to state 54

    abstract_declarator            shift and go to state 362
    parameter_type_list_opt        shift and go to state 363
    pointer                        shift and go to state 389
    direct_abstract_declarator     shift and go to state 241
    empty                          shift and go to state 365
    parameter_type_list            shift and go to state 366
    parameter_list                 shift and go to state 121
    parameter_declaration          shift and go to state 124
    declaration_specifiers         shift and go to state 126
    type_qualifier                 shift and go to state 17
    storage_class_specifier        shift and go to state 18
    function_specifier             shift and go to state 19
    type_specifier_no_typeid       shift and go to state 20
    type_specifier                 shift and go to state 21
    declaration_specifiers_no_type shift and go to state 128
    typedef_name                   shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union_specifier      shift and go to state 29
    struct_or_union                shift and go to state 32

state 391

    (220) expression -> expression COMMA assignment_expression .

    COMMA           reduce using rule 220 (expression -> expression COMMA assignment_expression .)
    SEMI            reduce using rule 220 (expression -> expression COMMA assignment_expression .)
    RPAREN          reduce using rule 220 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 220 (expression -> expression COMMA assignment_expression .)
    RBRACKET        reduce using rule 220 (expression -> expression COMMA assignment_expression .)


state 392

    (208) selection_statement -> SWITCH LPAREN expression . RPAREN pragmacomp_or_statement
    (220) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 463
    COMMA           shift and go to state 278


state 393

    (209) iteration_statement -> WHILE LPAREN expression . RPAREN pragmacomp_or_statement
    (220) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 464
    COMMA           shift and go to state 278


state 394

    (210) iteration_statement -> DO pragmacomp_or_statement WHILE . LPAREN expression RPAREN SEMI

    LPAREN          shift and go to state 465


state 395

    (79) pragmacomp_or_statement -> pppragma_directive statement .

    WHILE           reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    ID              reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    CASE            reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    DEFAULT         reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    IF              reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    SWITCH          reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    DO              reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    FOR             reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    GOTO            reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    BREAK           reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    CONTINUE        reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    RETURN          reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    PPPRAGMA        reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    LBRACE          reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    CONST           reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    RESTRICT        reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    VOLATILE        reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    AUTO            reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    REGISTER        reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    STATIC          reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    EXTERN          reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    TYPEDEF         reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    INLINE          reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    TYPEID          reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    ENUM            reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    VOID            reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    _BOOL           reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    CHAR            reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    SHORT           reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    INT             reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    LONG            reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    FLOAT           reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    DOUBLE          reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    _COMPLEX        reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    SIGNED          reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    UNSIGNED        reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    __INT128        reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    STRUCT          reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    UNION           reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    PLUSPLUS        reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    MINUSMINUS      reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    SIZEOF          reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    LPAREN          reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    AND             reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    TIMES           reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    PLUS            reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    MINUS           reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    NOT             reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    LNOT            reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    OFFSETOF        reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    INT_CONST_DEC   reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    INT_CONST_OCT   reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    INT_CONST_HEX   reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    INT_CONST_BIN   reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    FLOAT_CONST     reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    HEX_FLOAT_CONST reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    CHAR_CONST      reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    WCHAR_CONST     reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    STRING_LITERAL  reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    WSTRING_LITERAL reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    SEMI            reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    RBRACE          reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)
    ELSE            reduce using rule 79 (pragmacomp_or_statement -> pppragma_directive statement .)


state 396

    (211) iteration_statement -> FOR LPAREN expression_opt . SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement

    SEMI            shift and go to state 466


state 397

    (212) iteration_statement -> FOR LPAREN declaration . expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (309) empty -> .
    (219) expression -> . assignment_expression
    (220) expression -> . expression COMMA assignment_expression
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    SEMI            reduce using rule 309 (empty -> .)
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    expression_opt                 shift and go to state 467
    empty                          shift and go to state 266
    expression                     shift and go to state 169
    assignment_expression          shift and go to state 178
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 398

    (213) jump_statement -> GOTO ID SEMI .

    ID              reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    CASE            reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    DEFAULT         reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    IF              reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    SWITCH          reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    WHILE           reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    DO              reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    FOR             reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    GOTO            reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    BREAK           reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    CONTINUE        reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    RETURN          reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    PPPRAGMA        reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    LBRACE          reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    CONST           reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    RESTRICT        reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    VOLATILE        reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    AUTO            reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    REGISTER        reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    STATIC          reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    EXTERN          reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    TYPEDEF         reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    INLINE          reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    TYPEID          reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    ENUM            reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    VOID            reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    _BOOL           reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    CHAR            reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    SHORT           reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    INT             reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    LONG            reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    FLOAT           reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    DOUBLE          reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    _COMPLEX        reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    SIGNED          reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    UNSIGNED        reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    __INT128        reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    STRUCT          reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    UNION           reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    PLUSPLUS        reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    MINUSMINUS      reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    SIZEOF          reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    LPAREN          reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    AND             reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    TIMES           reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    PLUS            reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    MINUS           reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    NOT             reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    LNOT            reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    OFFSETOF        reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    INT_CONST_DEC   reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    INT_CONST_OCT   reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    INT_CONST_HEX   reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    INT_CONST_BIN   reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    FLOAT_CONST     reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    HEX_FLOAT_CONST reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    CHAR_CONST      reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    WCHAR_CONST     reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    STRING_LITERAL  reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    WSTRING_LITERAL reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    SEMI            reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    RBRACE          reduce using rule 213 (jump_statement -> GOTO ID SEMI .)
    ELSE            reduce using rule 213 (jump_statement -> GOTO ID SEMI .)


state 399

    (216) jump_statement -> RETURN expression SEMI .

    ID              reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    CASE            reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    DEFAULT         reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    IF              reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    SWITCH          reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    WHILE           reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    DO              reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    FOR             reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    GOTO            reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    BREAK           reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    CONTINUE        reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    RETURN          reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    PPPRAGMA        reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    LBRACE          reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    CONST           reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    RESTRICT        reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    VOLATILE        reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    AUTO            reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    REGISTER        reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    STATIC          reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    EXTERN          reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    TYPEDEF         reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    INLINE          reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    TYPEID          reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    ENUM            reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    VOID            reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    _BOOL           reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    CHAR            reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    SHORT           reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    INT             reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    LONG            reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    FLOAT           reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    DOUBLE          reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    _COMPLEX        reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    SIGNED          reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    UNSIGNED        reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    __INT128        reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    STRUCT          reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    UNION           reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    PLUSPLUS        reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    MINUSMINUS      reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    SIZEOF          reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    LPAREN          reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    AND             reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    TIMES           reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    PLUS            reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    MINUS           reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    NOT             reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    LNOT            reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    OFFSETOF        reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    INT_CONST_DEC   reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    INT_CONST_OCT   reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    INT_CONST_HEX   reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    INT_CONST_BIN   reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    FLOAT_CONST     reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    HEX_FLOAT_CONST reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    CHAR_CONST      reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    WCHAR_CONST     reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    STRING_LITERAL  reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    WSTRING_LITERAL reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    SEMI            reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    RBRACE          reduce using rule 216 (jump_statement -> RETURN expression SEMI .)
    ELSE            reduce using rule 216 (jump_statement -> RETURN expression SEMI .)


state 400

    (223) assignment_expression -> unary_expression assignment_operator assignment_expression .

    COMMA           reduce using rule 223 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    SEMI            reduce using rule 223 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACKET        reduce using rule 223 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RPAREN          reduce using rule 223 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COLON           reduce using rule 223 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACE          reduce using rule 223 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 401

    (237) conditional_expression -> binary_expression CONDOP expression . COLON conditional_expression
    (220) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 468
    COMMA           shift and go to state 278


state 402

    (239) binary_expression -> binary_expression TIMES binary_expression .
    (239) binary_expression -> binary_expression . TIMES binary_expression
    (240) binary_expression -> binary_expression . DIVIDE binary_expression
    (241) binary_expression -> binary_expression . MOD binary_expression
    (242) binary_expression -> binary_expression . PLUS binary_expression
    (243) binary_expression -> binary_expression . MINUS binary_expression
    (244) binary_expression -> binary_expression . RSHIFT binary_expression
    (245) binary_expression -> binary_expression . LSHIFT binary_expression
    (246) binary_expression -> binary_expression . LT binary_expression
    (247) binary_expression -> binary_expression . LE binary_expression
    (248) binary_expression -> binary_expression . GE binary_expression
    (249) binary_expression -> binary_expression . GT binary_expression
    (250) binary_expression -> binary_expression . EQ binary_expression
    (251) binary_expression -> binary_expression . NE binary_expression
    (252) binary_expression -> binary_expression . AND binary_expression
    (253) binary_expression -> binary_expression . OR binary_expression
    (254) binary_expression -> binary_expression . XOR binary_expression
    (255) binary_expression -> binary_expression . LAND binary_expression
    (256) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 239 (binary_expression -> binary_expression TIMES binary_expression .)
    TIMES           reduce using rule 239 (binary_expression -> binary_expression TIMES binary_expression .)
    DIVIDE          reduce using rule 239 (binary_expression -> binary_expression TIMES binary_expression .)
    MOD             reduce using rule 239 (binary_expression -> binary_expression TIMES binary_expression .)
    PLUS            reduce using rule 239 (binary_expression -> binary_expression TIMES binary_expression .)
    MINUS           reduce using rule 239 (binary_expression -> binary_expression TIMES binary_expression .)
    RSHIFT          reduce using rule 239 (binary_expression -> binary_expression TIMES binary_expression .)
    LSHIFT          reduce using rule 239 (binary_expression -> binary_expression TIMES binary_expression .)
    LT              reduce using rule 239 (binary_expression -> binary_expression TIMES binary_expression .)
    LE              reduce using rule 239 (binary_expression -> binary_expression TIMES binary_expression .)
    GE              reduce using rule 239 (binary_expression -> binary_expression TIMES binary_expression .)
    GT              reduce using rule 239 (binary_expression -> binary_expression TIMES binary_expression .)
    EQ              reduce using rule 239 (binary_expression -> binary_expression TIMES binary_expression .)
    NE              reduce using rule 239 (binary_expression -> binary_expression TIMES binary_expression .)
    AND             reduce using rule 239 (binary_expression -> binary_expression TIMES binary_expression .)
    OR              reduce using rule 239 (binary_expression -> binary_expression TIMES binary_expression .)
    XOR             reduce using rule 239 (binary_expression -> binary_expression TIMES binary_expression .)
    LAND            reduce using rule 239 (binary_expression -> binary_expression TIMES binary_expression .)
    LOR             reduce using rule 239 (binary_expression -> binary_expression TIMES binary_expression .)
    COMMA           reduce using rule 239 (binary_expression -> binary_expression TIMES binary_expression .)
    SEMI            reduce using rule 239 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACKET        reduce using rule 239 (binary_expression -> binary_expression TIMES binary_expression .)
    COLON           reduce using rule 239 (binary_expression -> binary_expression TIMES binary_expression .)
    RPAREN          reduce using rule 239 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACE          reduce using rule 239 (binary_expression -> binary_expression TIMES binary_expression .)

  ! TIMES           [ shift and go to state 303 ]
  ! DIVIDE          [ shift and go to state 304 ]
  ! MOD             [ shift and go to state 305 ]
  ! PLUS            [ shift and go to state 306 ]
  ! MINUS           [ shift and go to state 307 ]
  ! RSHIFT          [ shift and go to state 308 ]
  ! LSHIFT          [ shift and go to state 309 ]
  ! LT              [ shift and go to state 310 ]
  ! LE              [ shift and go to state 311 ]
  ! GE              [ shift and go to state 312 ]
  ! GT              [ shift and go to state 313 ]
  ! EQ              [ shift and go to state 314 ]
  ! NE              [ shift and go to state 315 ]
  ! AND             [ shift and go to state 316 ]
  ! OR              [ shift and go to state 317 ]
  ! XOR             [ shift and go to state 318 ]
  ! LAND            [ shift and go to state 319 ]
  ! LOR             [ shift and go to state 320 ]


state 403

    (240) binary_expression -> binary_expression DIVIDE binary_expression .
    (239) binary_expression -> binary_expression . TIMES binary_expression
    (240) binary_expression -> binary_expression . DIVIDE binary_expression
    (241) binary_expression -> binary_expression . MOD binary_expression
    (242) binary_expression -> binary_expression . PLUS binary_expression
    (243) binary_expression -> binary_expression . MINUS binary_expression
    (244) binary_expression -> binary_expression . RSHIFT binary_expression
    (245) binary_expression -> binary_expression . LSHIFT binary_expression
    (246) binary_expression -> binary_expression . LT binary_expression
    (247) binary_expression -> binary_expression . LE binary_expression
    (248) binary_expression -> binary_expression . GE binary_expression
    (249) binary_expression -> binary_expression . GT binary_expression
    (250) binary_expression -> binary_expression . EQ binary_expression
    (251) binary_expression -> binary_expression . NE binary_expression
    (252) binary_expression -> binary_expression . AND binary_expression
    (253) binary_expression -> binary_expression . OR binary_expression
    (254) binary_expression -> binary_expression . XOR binary_expression
    (255) binary_expression -> binary_expression . LAND binary_expression
    (256) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 240 (binary_expression -> binary_expression DIVIDE binary_expression .)
    TIMES           reduce using rule 240 (binary_expression -> binary_expression DIVIDE binary_expression .)
    DIVIDE          reduce using rule 240 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MOD             reduce using rule 240 (binary_expression -> binary_expression DIVIDE binary_expression .)
    PLUS            reduce using rule 240 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MINUS           reduce using rule 240 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RSHIFT          reduce using rule 240 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LSHIFT          reduce using rule 240 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LT              reduce using rule 240 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LE              reduce using rule 240 (binary_expression -> binary_expression DIVIDE binary_expression .)
    GE              reduce using rule 240 (binary_expression -> binary_expression DIVIDE binary_expression .)
    GT              reduce using rule 240 (binary_expression -> binary_expression DIVIDE binary_expression .)
    EQ              reduce using rule 240 (binary_expression -> binary_expression DIVIDE binary_expression .)
    NE              reduce using rule 240 (binary_expression -> binary_expression DIVIDE binary_expression .)
    AND             reduce using rule 240 (binary_expression -> binary_expression DIVIDE binary_expression .)
    OR              reduce using rule 240 (binary_expression -> binary_expression DIVIDE binary_expression .)
    XOR             reduce using rule 240 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LAND            reduce using rule 240 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LOR             reduce using rule 240 (binary_expression -> binary_expression DIVIDE binary_expression .)
    COMMA           reduce using rule 240 (binary_expression -> binary_expression DIVIDE binary_expression .)
    SEMI            reduce using rule 240 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACKET        reduce using rule 240 (binary_expression -> binary_expression DIVIDE binary_expression .)
    COLON           reduce using rule 240 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RPAREN          reduce using rule 240 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACE          reduce using rule 240 (binary_expression -> binary_expression DIVIDE binary_expression .)

  ! TIMES           [ shift and go to state 303 ]
  ! DIVIDE          [ shift and go to state 304 ]
  ! MOD             [ shift and go to state 305 ]
  ! PLUS            [ shift and go to state 306 ]
  ! MINUS           [ shift and go to state 307 ]
  ! RSHIFT          [ shift and go to state 308 ]
  ! LSHIFT          [ shift and go to state 309 ]
  ! LT              [ shift and go to state 310 ]
  ! LE              [ shift and go to state 311 ]
  ! GE              [ shift and go to state 312 ]
  ! GT              [ shift and go to state 313 ]
  ! EQ              [ shift and go to state 314 ]
  ! NE              [ shift and go to state 315 ]
  ! AND             [ shift and go to state 316 ]
  ! OR              [ shift and go to state 317 ]
  ! XOR             [ shift and go to state 318 ]
  ! LAND            [ shift and go to state 319 ]
  ! LOR             [ shift and go to state 320 ]


state 404

    (241) binary_expression -> binary_expression MOD binary_expression .
    (239) binary_expression -> binary_expression . TIMES binary_expression
    (240) binary_expression -> binary_expression . DIVIDE binary_expression
    (241) binary_expression -> binary_expression . MOD binary_expression
    (242) binary_expression -> binary_expression . PLUS binary_expression
    (243) binary_expression -> binary_expression . MINUS binary_expression
    (244) binary_expression -> binary_expression . RSHIFT binary_expression
    (245) binary_expression -> binary_expression . LSHIFT binary_expression
    (246) binary_expression -> binary_expression . LT binary_expression
    (247) binary_expression -> binary_expression . LE binary_expression
    (248) binary_expression -> binary_expression . GE binary_expression
    (249) binary_expression -> binary_expression . GT binary_expression
    (250) binary_expression -> binary_expression . EQ binary_expression
    (251) binary_expression -> binary_expression . NE binary_expression
    (252) binary_expression -> binary_expression . AND binary_expression
    (253) binary_expression -> binary_expression . OR binary_expression
    (254) binary_expression -> binary_expression . XOR binary_expression
    (255) binary_expression -> binary_expression . LAND binary_expression
    (256) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 241 (binary_expression -> binary_expression MOD binary_expression .)
    TIMES           reduce using rule 241 (binary_expression -> binary_expression MOD binary_expression .)
    DIVIDE          reduce using rule 241 (binary_expression -> binary_expression MOD binary_expression .)
    MOD             reduce using rule 241 (binary_expression -> binary_expression MOD binary_expression .)
    PLUS            reduce using rule 241 (binary_expression -> binary_expression MOD binary_expression .)
    MINUS           reduce using rule 241 (binary_expression -> binary_expression MOD binary_expression .)
    RSHIFT          reduce using rule 241 (binary_expression -> binary_expression MOD binary_expression .)
    LSHIFT          reduce using rule 241 (binary_expression -> binary_expression MOD binary_expression .)
    LT              reduce using rule 241 (binary_expression -> binary_expression MOD binary_expression .)
    LE              reduce using rule 241 (binary_expression -> binary_expression MOD binary_expression .)
    GE              reduce using rule 241 (binary_expression -> binary_expression MOD binary_expression .)
    GT              reduce using rule 241 (binary_expression -> binary_expression MOD binary_expression .)
    EQ              reduce using rule 241 (binary_expression -> binary_expression MOD binary_expression .)
    NE              reduce using rule 241 (binary_expression -> binary_expression MOD binary_expression .)
    AND             reduce using rule 241 (binary_expression -> binary_expression MOD binary_expression .)
    OR              reduce using rule 241 (binary_expression -> binary_expression MOD binary_expression .)
    XOR             reduce using rule 241 (binary_expression -> binary_expression MOD binary_expression .)
    LAND            reduce using rule 241 (binary_expression -> binary_expression MOD binary_expression .)
    LOR             reduce using rule 241 (binary_expression -> binary_expression MOD binary_expression .)
    COMMA           reduce using rule 241 (binary_expression -> binary_expression MOD binary_expression .)
    SEMI            reduce using rule 241 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACKET        reduce using rule 241 (binary_expression -> binary_expression MOD binary_expression .)
    COLON           reduce using rule 241 (binary_expression -> binary_expression MOD binary_expression .)
    RPAREN          reduce using rule 241 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACE          reduce using rule 241 (binary_expression -> binary_expression MOD binary_expression .)

  ! TIMES           [ shift and go to state 303 ]
  ! DIVIDE          [ shift and go to state 304 ]
  ! MOD             [ shift and go to state 305 ]
  ! PLUS            [ shift and go to state 306 ]
  ! MINUS           [ shift and go to state 307 ]
  ! RSHIFT          [ shift and go to state 308 ]
  ! LSHIFT          [ shift and go to state 309 ]
  ! LT              [ shift and go to state 310 ]
  ! LE              [ shift and go to state 311 ]
  ! GE              [ shift and go to state 312 ]
  ! GT              [ shift and go to state 313 ]
  ! EQ              [ shift and go to state 314 ]
  ! NE              [ shift and go to state 315 ]
  ! AND             [ shift and go to state 316 ]
  ! OR              [ shift and go to state 317 ]
  ! XOR             [ shift and go to state 318 ]
  ! LAND            [ shift and go to state 319 ]
  ! LOR             [ shift and go to state 320 ]


state 405

    (242) binary_expression -> binary_expression PLUS binary_expression .
    (239) binary_expression -> binary_expression . TIMES binary_expression
    (240) binary_expression -> binary_expression . DIVIDE binary_expression
    (241) binary_expression -> binary_expression . MOD binary_expression
    (242) binary_expression -> binary_expression . PLUS binary_expression
    (243) binary_expression -> binary_expression . MINUS binary_expression
    (244) binary_expression -> binary_expression . RSHIFT binary_expression
    (245) binary_expression -> binary_expression . LSHIFT binary_expression
    (246) binary_expression -> binary_expression . LT binary_expression
    (247) binary_expression -> binary_expression . LE binary_expression
    (248) binary_expression -> binary_expression . GE binary_expression
    (249) binary_expression -> binary_expression . GT binary_expression
    (250) binary_expression -> binary_expression . EQ binary_expression
    (251) binary_expression -> binary_expression . NE binary_expression
    (252) binary_expression -> binary_expression . AND binary_expression
    (253) binary_expression -> binary_expression . OR binary_expression
    (254) binary_expression -> binary_expression . XOR binary_expression
    (255) binary_expression -> binary_expression . LAND binary_expression
    (256) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 242 (binary_expression -> binary_expression PLUS binary_expression .)
    PLUS            reduce using rule 242 (binary_expression -> binary_expression PLUS binary_expression .)
    MINUS           reduce using rule 242 (binary_expression -> binary_expression PLUS binary_expression .)
    RSHIFT          reduce using rule 242 (binary_expression -> binary_expression PLUS binary_expression .)
    LSHIFT          reduce using rule 242 (binary_expression -> binary_expression PLUS binary_expression .)
    LT              reduce using rule 242 (binary_expression -> binary_expression PLUS binary_expression .)
    LE              reduce using rule 242 (binary_expression -> binary_expression PLUS binary_expression .)
    GE              reduce using rule 242 (binary_expression -> binary_expression PLUS binary_expression .)
    GT              reduce using rule 242 (binary_expression -> binary_expression PLUS binary_expression .)
    EQ              reduce using rule 242 (binary_expression -> binary_expression PLUS binary_expression .)
    NE              reduce using rule 242 (binary_expression -> binary_expression PLUS binary_expression .)
    AND             reduce using rule 242 (binary_expression -> binary_expression PLUS binary_expression .)
    OR              reduce using rule 242 (binary_expression -> binary_expression PLUS binary_expression .)
    XOR             reduce using rule 242 (binary_expression -> binary_expression PLUS binary_expression .)
    LAND            reduce using rule 242 (binary_expression -> binary_expression PLUS binary_expression .)
    LOR             reduce using rule 242 (binary_expression -> binary_expression PLUS binary_expression .)
    COMMA           reduce using rule 242 (binary_expression -> binary_expression PLUS binary_expression .)
    SEMI            reduce using rule 242 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACKET        reduce using rule 242 (binary_expression -> binary_expression PLUS binary_expression .)
    COLON           reduce using rule 242 (binary_expression -> binary_expression PLUS binary_expression .)
    RPAREN          reduce using rule 242 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACE          reduce using rule 242 (binary_expression -> binary_expression PLUS binary_expression .)
    TIMES           shift and go to state 303
    DIVIDE          shift and go to state 304
    MOD             shift and go to state 305

  ! TIMES           [ reduce using rule 242 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 242 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! MOD             [ reduce using rule 242 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! PLUS            [ shift and go to state 306 ]
  ! MINUS           [ shift and go to state 307 ]
  ! RSHIFT          [ shift and go to state 308 ]
  ! LSHIFT          [ shift and go to state 309 ]
  ! LT              [ shift and go to state 310 ]
  ! LE              [ shift and go to state 311 ]
  ! GE              [ shift and go to state 312 ]
  ! GT              [ shift and go to state 313 ]
  ! EQ              [ shift and go to state 314 ]
  ! NE              [ shift and go to state 315 ]
  ! AND             [ shift and go to state 316 ]
  ! OR              [ shift and go to state 317 ]
  ! XOR             [ shift and go to state 318 ]
  ! LAND            [ shift and go to state 319 ]
  ! LOR             [ shift and go to state 320 ]


state 406

    (243) binary_expression -> binary_expression MINUS binary_expression .
    (239) binary_expression -> binary_expression . TIMES binary_expression
    (240) binary_expression -> binary_expression . DIVIDE binary_expression
    (241) binary_expression -> binary_expression . MOD binary_expression
    (242) binary_expression -> binary_expression . PLUS binary_expression
    (243) binary_expression -> binary_expression . MINUS binary_expression
    (244) binary_expression -> binary_expression . RSHIFT binary_expression
    (245) binary_expression -> binary_expression . LSHIFT binary_expression
    (246) binary_expression -> binary_expression . LT binary_expression
    (247) binary_expression -> binary_expression . LE binary_expression
    (248) binary_expression -> binary_expression . GE binary_expression
    (249) binary_expression -> binary_expression . GT binary_expression
    (250) binary_expression -> binary_expression . EQ binary_expression
    (251) binary_expression -> binary_expression . NE binary_expression
    (252) binary_expression -> binary_expression . AND binary_expression
    (253) binary_expression -> binary_expression . OR binary_expression
    (254) binary_expression -> binary_expression . XOR binary_expression
    (255) binary_expression -> binary_expression . LAND binary_expression
    (256) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 243 (binary_expression -> binary_expression MINUS binary_expression .)
    PLUS            reduce using rule 243 (binary_expression -> binary_expression MINUS binary_expression .)
    MINUS           reduce using rule 243 (binary_expression -> binary_expression MINUS binary_expression .)
    RSHIFT          reduce using rule 243 (binary_expression -> binary_expression MINUS binary_expression .)
    LSHIFT          reduce using rule 243 (binary_expression -> binary_expression MINUS binary_expression .)
    LT              reduce using rule 243 (binary_expression -> binary_expression MINUS binary_expression .)
    LE              reduce using rule 243 (binary_expression -> binary_expression MINUS binary_expression .)
    GE              reduce using rule 243 (binary_expression -> binary_expression MINUS binary_expression .)
    GT              reduce using rule 243 (binary_expression -> binary_expression MINUS binary_expression .)
    EQ              reduce using rule 243 (binary_expression -> binary_expression MINUS binary_expression .)
    NE              reduce using rule 243 (binary_expression -> binary_expression MINUS binary_expression .)
    AND             reduce using rule 243 (binary_expression -> binary_expression MINUS binary_expression .)
    OR              reduce using rule 243 (binary_expression -> binary_expression MINUS binary_expression .)
    XOR             reduce using rule 243 (binary_expression -> binary_expression MINUS binary_expression .)
    LAND            reduce using rule 243 (binary_expression -> binary_expression MINUS binary_expression .)
    LOR             reduce using rule 243 (binary_expression -> binary_expression MINUS binary_expression .)
    COMMA           reduce using rule 243 (binary_expression -> binary_expression MINUS binary_expression .)
    SEMI            reduce using rule 243 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACKET        reduce using rule 243 (binary_expression -> binary_expression MINUS binary_expression .)
    COLON           reduce using rule 243 (binary_expression -> binary_expression MINUS binary_expression .)
    RPAREN          reduce using rule 243 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACE          reduce using rule 243 (binary_expression -> binary_expression MINUS binary_expression .)
    TIMES           shift and go to state 303
    DIVIDE          shift and go to state 304
    MOD             shift and go to state 305

  ! TIMES           [ reduce using rule 243 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 243 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! MOD             [ reduce using rule 243 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! PLUS            [ shift and go to state 306 ]
  ! MINUS           [ shift and go to state 307 ]
  ! RSHIFT          [ shift and go to state 308 ]
  ! LSHIFT          [ shift and go to state 309 ]
  ! LT              [ shift and go to state 310 ]
  ! LE              [ shift and go to state 311 ]
  ! GE              [ shift and go to state 312 ]
  ! GT              [ shift and go to state 313 ]
  ! EQ              [ shift and go to state 314 ]
  ! NE              [ shift and go to state 315 ]
  ! AND             [ shift and go to state 316 ]
  ! OR              [ shift and go to state 317 ]
  ! XOR             [ shift and go to state 318 ]
  ! LAND            [ shift and go to state 319 ]
  ! LOR             [ shift and go to state 320 ]


state 407

    (244) binary_expression -> binary_expression RSHIFT binary_expression .
    (239) binary_expression -> binary_expression . TIMES binary_expression
    (240) binary_expression -> binary_expression . DIVIDE binary_expression
    (241) binary_expression -> binary_expression . MOD binary_expression
    (242) binary_expression -> binary_expression . PLUS binary_expression
    (243) binary_expression -> binary_expression . MINUS binary_expression
    (244) binary_expression -> binary_expression . RSHIFT binary_expression
    (245) binary_expression -> binary_expression . LSHIFT binary_expression
    (246) binary_expression -> binary_expression . LT binary_expression
    (247) binary_expression -> binary_expression . LE binary_expression
    (248) binary_expression -> binary_expression . GE binary_expression
    (249) binary_expression -> binary_expression . GT binary_expression
    (250) binary_expression -> binary_expression . EQ binary_expression
    (251) binary_expression -> binary_expression . NE binary_expression
    (252) binary_expression -> binary_expression . AND binary_expression
    (253) binary_expression -> binary_expression . OR binary_expression
    (254) binary_expression -> binary_expression . XOR binary_expression
    (255) binary_expression -> binary_expression . LAND binary_expression
    (256) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 244 (binary_expression -> binary_expression RSHIFT binary_expression .)
    RSHIFT          reduce using rule 244 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LSHIFT          reduce using rule 244 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LT              reduce using rule 244 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LE              reduce using rule 244 (binary_expression -> binary_expression RSHIFT binary_expression .)
    GE              reduce using rule 244 (binary_expression -> binary_expression RSHIFT binary_expression .)
    GT              reduce using rule 244 (binary_expression -> binary_expression RSHIFT binary_expression .)
    EQ              reduce using rule 244 (binary_expression -> binary_expression RSHIFT binary_expression .)
    NE              reduce using rule 244 (binary_expression -> binary_expression RSHIFT binary_expression .)
    AND             reduce using rule 244 (binary_expression -> binary_expression RSHIFT binary_expression .)
    OR              reduce using rule 244 (binary_expression -> binary_expression RSHIFT binary_expression .)
    XOR             reduce using rule 244 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LAND            reduce using rule 244 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LOR             reduce using rule 244 (binary_expression -> binary_expression RSHIFT binary_expression .)
    COMMA           reduce using rule 244 (binary_expression -> binary_expression RSHIFT binary_expression .)
    SEMI            reduce using rule 244 (binary_expression -> binary_expression RSHIFT binary_expression .)
    RBRACKET        reduce using rule 244 (binary_expression -> binary_expression RSHIFT binary_expression .)
    COLON           reduce using rule 244 (binary_expression -> binary_expression RSHIFT binary_expression .)
    RPAREN          reduce using rule 244 (binary_expression -> binary_expression RSHIFT binary_expression .)
    RBRACE          reduce using rule 244 (binary_expression -> binary_expression RSHIFT binary_expression .)
    TIMES           shift and go to state 303
    DIVIDE          shift and go to state 304
    MOD             shift and go to state 305
    PLUS            shift and go to state 306
    MINUS           shift and go to state 307

  ! TIMES           [ reduce using rule 244 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 244 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! MOD             [ reduce using rule 244 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! PLUS            [ reduce using rule 244 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! MINUS           [ reduce using rule 244 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! RSHIFT          [ shift and go to state 308 ]
  ! LSHIFT          [ shift and go to state 309 ]
  ! LT              [ shift and go to state 310 ]
  ! LE              [ shift and go to state 311 ]
  ! GE              [ shift and go to state 312 ]
  ! GT              [ shift and go to state 313 ]
  ! EQ              [ shift and go to state 314 ]
  ! NE              [ shift and go to state 315 ]
  ! AND             [ shift and go to state 316 ]
  ! OR              [ shift and go to state 317 ]
  ! XOR             [ shift and go to state 318 ]
  ! LAND            [ shift and go to state 319 ]
  ! LOR             [ shift and go to state 320 ]


state 408

    (245) binary_expression -> binary_expression LSHIFT binary_expression .
    (239) binary_expression -> binary_expression . TIMES binary_expression
    (240) binary_expression -> binary_expression . DIVIDE binary_expression
    (241) binary_expression -> binary_expression . MOD binary_expression
    (242) binary_expression -> binary_expression . PLUS binary_expression
    (243) binary_expression -> binary_expression . MINUS binary_expression
    (244) binary_expression -> binary_expression . RSHIFT binary_expression
    (245) binary_expression -> binary_expression . LSHIFT binary_expression
    (246) binary_expression -> binary_expression . LT binary_expression
    (247) binary_expression -> binary_expression . LE binary_expression
    (248) binary_expression -> binary_expression . GE binary_expression
    (249) binary_expression -> binary_expression . GT binary_expression
    (250) binary_expression -> binary_expression . EQ binary_expression
    (251) binary_expression -> binary_expression . NE binary_expression
    (252) binary_expression -> binary_expression . AND binary_expression
    (253) binary_expression -> binary_expression . OR binary_expression
    (254) binary_expression -> binary_expression . XOR binary_expression
    (255) binary_expression -> binary_expression . LAND binary_expression
    (256) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 245 (binary_expression -> binary_expression LSHIFT binary_expression .)
    RSHIFT          reduce using rule 245 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LSHIFT          reduce using rule 245 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LT              reduce using rule 245 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LE              reduce using rule 245 (binary_expression -> binary_expression LSHIFT binary_expression .)
    GE              reduce using rule 245 (binary_expression -> binary_expression LSHIFT binary_expression .)
    GT              reduce using rule 245 (binary_expression -> binary_expression LSHIFT binary_expression .)
    EQ              reduce using rule 245 (binary_expression -> binary_expression LSHIFT binary_expression .)
    NE              reduce using rule 245 (binary_expression -> binary_expression LSHIFT binary_expression .)
    AND             reduce using rule 245 (binary_expression -> binary_expression LSHIFT binary_expression .)
    OR              reduce using rule 245 (binary_expression -> binary_expression LSHIFT binary_expression .)
    XOR             reduce using rule 245 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LAND            reduce using rule 245 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LOR             reduce using rule 245 (binary_expression -> binary_expression LSHIFT binary_expression .)
    COMMA           reduce using rule 245 (binary_expression -> binary_expression LSHIFT binary_expression .)
    SEMI            reduce using rule 245 (binary_expression -> binary_expression LSHIFT binary_expression .)
    RBRACKET        reduce using rule 245 (binary_expression -> binary_expression LSHIFT binary_expression .)
    COLON           reduce using rule 245 (binary_expression -> binary_expression LSHIFT binary_expression .)
    RPAREN          reduce using rule 245 (binary_expression -> binary_expression LSHIFT binary_expression .)
    RBRACE          reduce using rule 245 (binary_expression -> binary_expression LSHIFT binary_expression .)
    TIMES           shift and go to state 303
    DIVIDE          shift and go to state 304
    MOD             shift and go to state 305
    PLUS            shift and go to state 306
    MINUS           shift and go to state 307

  ! TIMES           [ reduce using rule 245 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 245 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! MOD             [ reduce using rule 245 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! PLUS            [ reduce using rule 245 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! MINUS           [ reduce using rule 245 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! RSHIFT          [ shift and go to state 308 ]
  ! LSHIFT          [ shift and go to state 309 ]
  ! LT              [ shift and go to state 310 ]
  ! LE              [ shift and go to state 311 ]
  ! GE              [ shift and go to state 312 ]
  ! GT              [ shift and go to state 313 ]
  ! EQ              [ shift and go to state 314 ]
  ! NE              [ shift and go to state 315 ]
  ! AND             [ shift and go to state 316 ]
  ! OR              [ shift and go to state 317 ]
  ! XOR             [ shift and go to state 318 ]
  ! LAND            [ shift and go to state 319 ]
  ! LOR             [ shift and go to state 320 ]


state 409

    (246) binary_expression -> binary_expression LT binary_expression .
    (239) binary_expression -> binary_expression . TIMES binary_expression
    (240) binary_expression -> binary_expression . DIVIDE binary_expression
    (241) binary_expression -> binary_expression . MOD binary_expression
    (242) binary_expression -> binary_expression . PLUS binary_expression
    (243) binary_expression -> binary_expression . MINUS binary_expression
    (244) binary_expression -> binary_expression . RSHIFT binary_expression
    (245) binary_expression -> binary_expression . LSHIFT binary_expression
    (246) binary_expression -> binary_expression . LT binary_expression
    (247) binary_expression -> binary_expression . LE binary_expression
    (248) binary_expression -> binary_expression . GE binary_expression
    (249) binary_expression -> binary_expression . GT binary_expression
    (250) binary_expression -> binary_expression . EQ binary_expression
    (251) binary_expression -> binary_expression . NE binary_expression
    (252) binary_expression -> binary_expression . AND binary_expression
    (253) binary_expression -> binary_expression . OR binary_expression
    (254) binary_expression -> binary_expression . XOR binary_expression
    (255) binary_expression -> binary_expression . LAND binary_expression
    (256) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 246 (binary_expression -> binary_expression LT binary_expression .)
    LT              reduce using rule 246 (binary_expression -> binary_expression LT binary_expression .)
    LE              reduce using rule 246 (binary_expression -> binary_expression LT binary_expression .)
    GE              reduce using rule 246 (binary_expression -> binary_expression LT binary_expression .)
    GT              reduce using rule 246 (binary_expression -> binary_expression LT binary_expression .)
    EQ              reduce using rule 246 (binary_expression -> binary_expression LT binary_expression .)
    NE              reduce using rule 246 (binary_expression -> binary_expression LT binary_expression .)
    AND             reduce using rule 246 (binary_expression -> binary_expression LT binary_expression .)
    OR              reduce using rule 246 (binary_expression -> binary_expression LT binary_expression .)
    XOR             reduce using rule 246 (binary_expression -> binary_expression LT binary_expression .)
    LAND            reduce using rule 246 (binary_expression -> binary_expression LT binary_expression .)
    LOR             reduce using rule 246 (binary_expression -> binary_expression LT binary_expression .)
    COMMA           reduce using rule 246 (binary_expression -> binary_expression LT binary_expression .)
    SEMI            reduce using rule 246 (binary_expression -> binary_expression LT binary_expression .)
    RBRACKET        reduce using rule 246 (binary_expression -> binary_expression LT binary_expression .)
    COLON           reduce using rule 246 (binary_expression -> binary_expression LT binary_expression .)
    RPAREN          reduce using rule 246 (binary_expression -> binary_expression LT binary_expression .)
    RBRACE          reduce using rule 246 (binary_expression -> binary_expression LT binary_expression .)
    TIMES           shift and go to state 303
    DIVIDE          shift and go to state 304
    MOD             shift and go to state 305
    PLUS            shift and go to state 306
    MINUS           shift and go to state 307
    RSHIFT          shift and go to state 308
    LSHIFT          shift and go to state 309

  ! TIMES           [ reduce using rule 246 (binary_expression -> binary_expression LT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 246 (binary_expression -> binary_expression LT binary_expression .) ]
  ! MOD             [ reduce using rule 246 (binary_expression -> binary_expression LT binary_expression .) ]
  ! PLUS            [ reduce using rule 246 (binary_expression -> binary_expression LT binary_expression .) ]
  ! MINUS           [ reduce using rule 246 (binary_expression -> binary_expression LT binary_expression .) ]
  ! RSHIFT          [ reduce using rule 246 (binary_expression -> binary_expression LT binary_expression .) ]
  ! LSHIFT          [ reduce using rule 246 (binary_expression -> binary_expression LT binary_expression .) ]
  ! LT              [ shift and go to state 310 ]
  ! LE              [ shift and go to state 311 ]
  ! GE              [ shift and go to state 312 ]
  ! GT              [ shift and go to state 313 ]
  ! EQ              [ shift and go to state 314 ]
  ! NE              [ shift and go to state 315 ]
  ! AND             [ shift and go to state 316 ]
  ! OR              [ shift and go to state 317 ]
  ! XOR             [ shift and go to state 318 ]
  ! LAND            [ shift and go to state 319 ]
  ! LOR             [ shift and go to state 320 ]


state 410

    (247) binary_expression -> binary_expression LE binary_expression .
    (239) binary_expression -> binary_expression . TIMES binary_expression
    (240) binary_expression -> binary_expression . DIVIDE binary_expression
    (241) binary_expression -> binary_expression . MOD binary_expression
    (242) binary_expression -> binary_expression . PLUS binary_expression
    (243) binary_expression -> binary_expression . MINUS binary_expression
    (244) binary_expression -> binary_expression . RSHIFT binary_expression
    (245) binary_expression -> binary_expression . LSHIFT binary_expression
    (246) binary_expression -> binary_expression . LT binary_expression
    (247) binary_expression -> binary_expression . LE binary_expression
    (248) binary_expression -> binary_expression . GE binary_expression
    (249) binary_expression -> binary_expression . GT binary_expression
    (250) binary_expression -> binary_expression . EQ binary_expression
    (251) binary_expression -> binary_expression . NE binary_expression
    (252) binary_expression -> binary_expression . AND binary_expression
    (253) binary_expression -> binary_expression . OR binary_expression
    (254) binary_expression -> binary_expression . XOR binary_expression
    (255) binary_expression -> binary_expression . LAND binary_expression
    (256) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 247 (binary_expression -> binary_expression LE binary_expression .)
    LT              reduce using rule 247 (binary_expression -> binary_expression LE binary_expression .)
    LE              reduce using rule 247 (binary_expression -> binary_expression LE binary_expression .)
    GE              reduce using rule 247 (binary_expression -> binary_expression LE binary_expression .)
    GT              reduce using rule 247 (binary_expression -> binary_expression LE binary_expression .)
    EQ              reduce using rule 247 (binary_expression -> binary_expression LE binary_expression .)
    NE              reduce using rule 247 (binary_expression -> binary_expression LE binary_expression .)
    AND             reduce using rule 247 (binary_expression -> binary_expression LE binary_expression .)
    OR              reduce using rule 247 (binary_expression -> binary_expression LE binary_expression .)
    XOR             reduce using rule 247 (binary_expression -> binary_expression LE binary_expression .)
    LAND            reduce using rule 247 (binary_expression -> binary_expression LE binary_expression .)
    LOR             reduce using rule 247 (binary_expression -> binary_expression LE binary_expression .)
    COMMA           reduce using rule 247 (binary_expression -> binary_expression LE binary_expression .)
    SEMI            reduce using rule 247 (binary_expression -> binary_expression LE binary_expression .)
    RBRACKET        reduce using rule 247 (binary_expression -> binary_expression LE binary_expression .)
    COLON           reduce using rule 247 (binary_expression -> binary_expression LE binary_expression .)
    RPAREN          reduce using rule 247 (binary_expression -> binary_expression LE binary_expression .)
    RBRACE          reduce using rule 247 (binary_expression -> binary_expression LE binary_expression .)
    TIMES           shift and go to state 303
    DIVIDE          shift and go to state 304
    MOD             shift and go to state 305
    PLUS            shift and go to state 306
    MINUS           shift and go to state 307
    RSHIFT          shift and go to state 308
    LSHIFT          shift and go to state 309

  ! TIMES           [ reduce using rule 247 (binary_expression -> binary_expression LE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 247 (binary_expression -> binary_expression LE binary_expression .) ]
  ! MOD             [ reduce using rule 247 (binary_expression -> binary_expression LE binary_expression .) ]
  ! PLUS            [ reduce using rule 247 (binary_expression -> binary_expression LE binary_expression .) ]
  ! MINUS           [ reduce using rule 247 (binary_expression -> binary_expression LE binary_expression .) ]
  ! RSHIFT          [ reduce using rule 247 (binary_expression -> binary_expression LE binary_expression .) ]
  ! LSHIFT          [ reduce using rule 247 (binary_expression -> binary_expression LE binary_expression .) ]
  ! LT              [ shift and go to state 310 ]
  ! LE              [ shift and go to state 311 ]
  ! GE              [ shift and go to state 312 ]
  ! GT              [ shift and go to state 313 ]
  ! EQ              [ shift and go to state 314 ]
  ! NE              [ shift and go to state 315 ]
  ! AND             [ shift and go to state 316 ]
  ! OR              [ shift and go to state 317 ]
  ! XOR             [ shift and go to state 318 ]
  ! LAND            [ shift and go to state 319 ]
  ! LOR             [ shift and go to state 320 ]


state 411

    (248) binary_expression -> binary_expression GE binary_expression .
    (239) binary_expression -> binary_expression . TIMES binary_expression
    (240) binary_expression -> binary_expression . DIVIDE binary_expression
    (241) binary_expression -> binary_expression . MOD binary_expression
    (242) binary_expression -> binary_expression . PLUS binary_expression
    (243) binary_expression -> binary_expression . MINUS binary_expression
    (244) binary_expression -> binary_expression . RSHIFT binary_expression
    (245) binary_expression -> binary_expression . LSHIFT binary_expression
    (246) binary_expression -> binary_expression . LT binary_expression
    (247) binary_expression -> binary_expression . LE binary_expression
    (248) binary_expression -> binary_expression . GE binary_expression
    (249) binary_expression -> binary_expression . GT binary_expression
    (250) binary_expression -> binary_expression . EQ binary_expression
    (251) binary_expression -> binary_expression . NE binary_expression
    (252) binary_expression -> binary_expression . AND binary_expression
    (253) binary_expression -> binary_expression . OR binary_expression
    (254) binary_expression -> binary_expression . XOR binary_expression
    (255) binary_expression -> binary_expression . LAND binary_expression
    (256) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 248 (binary_expression -> binary_expression GE binary_expression .)
    LT              reduce using rule 248 (binary_expression -> binary_expression GE binary_expression .)
    LE              reduce using rule 248 (binary_expression -> binary_expression GE binary_expression .)
    GE              reduce using rule 248 (binary_expression -> binary_expression GE binary_expression .)
    GT              reduce using rule 248 (binary_expression -> binary_expression GE binary_expression .)
    EQ              reduce using rule 248 (binary_expression -> binary_expression GE binary_expression .)
    NE              reduce using rule 248 (binary_expression -> binary_expression GE binary_expression .)
    AND             reduce using rule 248 (binary_expression -> binary_expression GE binary_expression .)
    OR              reduce using rule 248 (binary_expression -> binary_expression GE binary_expression .)
    XOR             reduce using rule 248 (binary_expression -> binary_expression GE binary_expression .)
    LAND            reduce using rule 248 (binary_expression -> binary_expression GE binary_expression .)
    LOR             reduce using rule 248 (binary_expression -> binary_expression GE binary_expression .)
    COMMA           reduce using rule 248 (binary_expression -> binary_expression GE binary_expression .)
    SEMI            reduce using rule 248 (binary_expression -> binary_expression GE binary_expression .)
    RBRACKET        reduce using rule 248 (binary_expression -> binary_expression GE binary_expression .)
    COLON           reduce using rule 248 (binary_expression -> binary_expression GE binary_expression .)
    RPAREN          reduce using rule 248 (binary_expression -> binary_expression GE binary_expression .)
    RBRACE          reduce using rule 248 (binary_expression -> binary_expression GE binary_expression .)
    TIMES           shift and go to state 303
    DIVIDE          shift and go to state 304
    MOD             shift and go to state 305
    PLUS            shift and go to state 306
    MINUS           shift and go to state 307
    RSHIFT          shift and go to state 308
    LSHIFT          shift and go to state 309

  ! TIMES           [ reduce using rule 248 (binary_expression -> binary_expression GE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 248 (binary_expression -> binary_expression GE binary_expression .) ]
  ! MOD             [ reduce using rule 248 (binary_expression -> binary_expression GE binary_expression .) ]
  ! PLUS            [ reduce using rule 248 (binary_expression -> binary_expression GE binary_expression .) ]
  ! MINUS           [ reduce using rule 248 (binary_expression -> binary_expression GE binary_expression .) ]
  ! RSHIFT          [ reduce using rule 248 (binary_expression -> binary_expression GE binary_expression .) ]
  ! LSHIFT          [ reduce using rule 248 (binary_expression -> binary_expression GE binary_expression .) ]
  ! LT              [ shift and go to state 310 ]
  ! LE              [ shift and go to state 311 ]
  ! GE              [ shift and go to state 312 ]
  ! GT              [ shift and go to state 313 ]
  ! EQ              [ shift and go to state 314 ]
  ! NE              [ shift and go to state 315 ]
  ! AND             [ shift and go to state 316 ]
  ! OR              [ shift and go to state 317 ]
  ! XOR             [ shift and go to state 318 ]
  ! LAND            [ shift and go to state 319 ]
  ! LOR             [ shift and go to state 320 ]


state 412

    (249) binary_expression -> binary_expression GT binary_expression .
    (239) binary_expression -> binary_expression . TIMES binary_expression
    (240) binary_expression -> binary_expression . DIVIDE binary_expression
    (241) binary_expression -> binary_expression . MOD binary_expression
    (242) binary_expression -> binary_expression . PLUS binary_expression
    (243) binary_expression -> binary_expression . MINUS binary_expression
    (244) binary_expression -> binary_expression . RSHIFT binary_expression
    (245) binary_expression -> binary_expression . LSHIFT binary_expression
    (246) binary_expression -> binary_expression . LT binary_expression
    (247) binary_expression -> binary_expression . LE binary_expression
    (248) binary_expression -> binary_expression . GE binary_expression
    (249) binary_expression -> binary_expression . GT binary_expression
    (250) binary_expression -> binary_expression . EQ binary_expression
    (251) binary_expression -> binary_expression . NE binary_expression
    (252) binary_expression -> binary_expression . AND binary_expression
    (253) binary_expression -> binary_expression . OR binary_expression
    (254) binary_expression -> binary_expression . XOR binary_expression
    (255) binary_expression -> binary_expression . LAND binary_expression
    (256) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 249 (binary_expression -> binary_expression GT binary_expression .)
    LT              reduce using rule 249 (binary_expression -> binary_expression GT binary_expression .)
    LE              reduce using rule 249 (binary_expression -> binary_expression GT binary_expression .)
    GE              reduce using rule 249 (binary_expression -> binary_expression GT binary_expression .)
    GT              reduce using rule 249 (binary_expression -> binary_expression GT binary_expression .)
    EQ              reduce using rule 249 (binary_expression -> binary_expression GT binary_expression .)
    NE              reduce using rule 249 (binary_expression -> binary_expression GT binary_expression .)
    AND             reduce using rule 249 (binary_expression -> binary_expression GT binary_expression .)
    OR              reduce using rule 249 (binary_expression -> binary_expression GT binary_expression .)
    XOR             reduce using rule 249 (binary_expression -> binary_expression GT binary_expression .)
    LAND            reduce using rule 249 (binary_expression -> binary_expression GT binary_expression .)
    LOR             reduce using rule 249 (binary_expression -> binary_expression GT binary_expression .)
    COMMA           reduce using rule 249 (binary_expression -> binary_expression GT binary_expression .)
    SEMI            reduce using rule 249 (binary_expression -> binary_expression GT binary_expression .)
    RBRACKET        reduce using rule 249 (binary_expression -> binary_expression GT binary_expression .)
    COLON           reduce using rule 249 (binary_expression -> binary_expression GT binary_expression .)
    RPAREN          reduce using rule 249 (binary_expression -> binary_expression GT binary_expression .)
    RBRACE          reduce using rule 249 (binary_expression -> binary_expression GT binary_expression .)
    TIMES           shift and go to state 303
    DIVIDE          shift and go to state 304
    MOD             shift and go to state 305
    PLUS            shift and go to state 306
    MINUS           shift and go to state 307
    RSHIFT          shift and go to state 308
    LSHIFT          shift and go to state 309

  ! TIMES           [ reduce using rule 249 (binary_expression -> binary_expression GT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 249 (binary_expression -> binary_expression GT binary_expression .) ]
  ! MOD             [ reduce using rule 249 (binary_expression -> binary_expression GT binary_expression .) ]
  ! PLUS            [ reduce using rule 249 (binary_expression -> binary_expression GT binary_expression .) ]
  ! MINUS           [ reduce using rule 249 (binary_expression -> binary_expression GT binary_expression .) ]
  ! RSHIFT          [ reduce using rule 249 (binary_expression -> binary_expression GT binary_expression .) ]
  ! LSHIFT          [ reduce using rule 249 (binary_expression -> binary_expression GT binary_expression .) ]
  ! LT              [ shift and go to state 310 ]
  ! LE              [ shift and go to state 311 ]
  ! GE              [ shift and go to state 312 ]
  ! GT              [ shift and go to state 313 ]
  ! EQ              [ shift and go to state 314 ]
  ! NE              [ shift and go to state 315 ]
  ! AND             [ shift and go to state 316 ]
  ! OR              [ shift and go to state 317 ]
  ! XOR             [ shift and go to state 318 ]
  ! LAND            [ shift and go to state 319 ]
  ! LOR             [ shift and go to state 320 ]


state 413

    (250) binary_expression -> binary_expression EQ binary_expression .
    (239) binary_expression -> binary_expression . TIMES binary_expression
    (240) binary_expression -> binary_expression . DIVIDE binary_expression
    (241) binary_expression -> binary_expression . MOD binary_expression
    (242) binary_expression -> binary_expression . PLUS binary_expression
    (243) binary_expression -> binary_expression . MINUS binary_expression
    (244) binary_expression -> binary_expression . RSHIFT binary_expression
    (245) binary_expression -> binary_expression . LSHIFT binary_expression
    (246) binary_expression -> binary_expression . LT binary_expression
    (247) binary_expression -> binary_expression . LE binary_expression
    (248) binary_expression -> binary_expression . GE binary_expression
    (249) binary_expression -> binary_expression . GT binary_expression
    (250) binary_expression -> binary_expression . EQ binary_expression
    (251) binary_expression -> binary_expression . NE binary_expression
    (252) binary_expression -> binary_expression . AND binary_expression
    (253) binary_expression -> binary_expression . OR binary_expression
    (254) binary_expression -> binary_expression . XOR binary_expression
    (255) binary_expression -> binary_expression . LAND binary_expression
    (256) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 250 (binary_expression -> binary_expression EQ binary_expression .)
    EQ              reduce using rule 250 (binary_expression -> binary_expression EQ binary_expression .)
    NE              reduce using rule 250 (binary_expression -> binary_expression EQ binary_expression .)
    AND             reduce using rule 250 (binary_expression -> binary_expression EQ binary_expression .)
    OR              reduce using rule 250 (binary_expression -> binary_expression EQ binary_expression .)
    XOR             reduce using rule 250 (binary_expression -> binary_expression EQ binary_expression .)
    LAND            reduce using rule 250 (binary_expression -> binary_expression EQ binary_expression .)
    LOR             reduce using rule 250 (binary_expression -> binary_expression EQ binary_expression .)
    COMMA           reduce using rule 250 (binary_expression -> binary_expression EQ binary_expression .)
    SEMI            reduce using rule 250 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACKET        reduce using rule 250 (binary_expression -> binary_expression EQ binary_expression .)
    COLON           reduce using rule 250 (binary_expression -> binary_expression EQ binary_expression .)
    RPAREN          reduce using rule 250 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACE          reduce using rule 250 (binary_expression -> binary_expression EQ binary_expression .)
    TIMES           shift and go to state 303
    DIVIDE          shift and go to state 304
    MOD             shift and go to state 305
    PLUS            shift and go to state 306
    MINUS           shift and go to state 307
    RSHIFT          shift and go to state 308
    LSHIFT          shift and go to state 309
    LT              shift and go to state 310
    LE              shift and go to state 311
    GE              shift and go to state 312
    GT              shift and go to state 313

  ! TIMES           [ reduce using rule 250 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! DIVIDE          [ reduce using rule 250 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! MOD             [ reduce using rule 250 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! PLUS            [ reduce using rule 250 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! MINUS           [ reduce using rule 250 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! RSHIFT          [ reduce using rule 250 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LSHIFT          [ reduce using rule 250 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LT              [ reduce using rule 250 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LE              [ reduce using rule 250 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! GE              [ reduce using rule 250 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! GT              [ reduce using rule 250 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! EQ              [ shift and go to state 314 ]
  ! NE              [ shift and go to state 315 ]
  ! AND             [ shift and go to state 316 ]
  ! OR              [ shift and go to state 317 ]
  ! XOR             [ shift and go to state 318 ]
  ! LAND            [ shift and go to state 319 ]
  ! LOR             [ shift and go to state 320 ]


state 414

    (251) binary_expression -> binary_expression NE binary_expression .
    (239) binary_expression -> binary_expression . TIMES binary_expression
    (240) binary_expression -> binary_expression . DIVIDE binary_expression
    (241) binary_expression -> binary_expression . MOD binary_expression
    (242) binary_expression -> binary_expression . PLUS binary_expression
    (243) binary_expression -> binary_expression . MINUS binary_expression
    (244) binary_expression -> binary_expression . RSHIFT binary_expression
    (245) binary_expression -> binary_expression . LSHIFT binary_expression
    (246) binary_expression -> binary_expression . LT binary_expression
    (247) binary_expression -> binary_expression . LE binary_expression
    (248) binary_expression -> binary_expression . GE binary_expression
    (249) binary_expression -> binary_expression . GT binary_expression
    (250) binary_expression -> binary_expression . EQ binary_expression
    (251) binary_expression -> binary_expression . NE binary_expression
    (252) binary_expression -> binary_expression . AND binary_expression
    (253) binary_expression -> binary_expression . OR binary_expression
    (254) binary_expression -> binary_expression . XOR binary_expression
    (255) binary_expression -> binary_expression . LAND binary_expression
    (256) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 251 (binary_expression -> binary_expression NE binary_expression .)
    EQ              reduce using rule 251 (binary_expression -> binary_expression NE binary_expression .)
    NE              reduce using rule 251 (binary_expression -> binary_expression NE binary_expression .)
    AND             reduce using rule 251 (binary_expression -> binary_expression NE binary_expression .)
    OR              reduce using rule 251 (binary_expression -> binary_expression NE binary_expression .)
    XOR             reduce using rule 251 (binary_expression -> binary_expression NE binary_expression .)
    LAND            reduce using rule 251 (binary_expression -> binary_expression NE binary_expression .)
    LOR             reduce using rule 251 (binary_expression -> binary_expression NE binary_expression .)
    COMMA           reduce using rule 251 (binary_expression -> binary_expression NE binary_expression .)
    SEMI            reduce using rule 251 (binary_expression -> binary_expression NE binary_expression .)
    RBRACKET        reduce using rule 251 (binary_expression -> binary_expression NE binary_expression .)
    COLON           reduce using rule 251 (binary_expression -> binary_expression NE binary_expression .)
    RPAREN          reduce using rule 251 (binary_expression -> binary_expression NE binary_expression .)
    RBRACE          reduce using rule 251 (binary_expression -> binary_expression NE binary_expression .)
    TIMES           shift and go to state 303
    DIVIDE          shift and go to state 304
    MOD             shift and go to state 305
    PLUS            shift and go to state 306
    MINUS           shift and go to state 307
    RSHIFT          shift and go to state 308
    LSHIFT          shift and go to state 309
    LT              shift and go to state 310
    LE              shift and go to state 311
    GE              shift and go to state 312
    GT              shift and go to state 313

  ! TIMES           [ reduce using rule 251 (binary_expression -> binary_expression NE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 251 (binary_expression -> binary_expression NE binary_expression .) ]
  ! MOD             [ reduce using rule 251 (binary_expression -> binary_expression NE binary_expression .) ]
  ! PLUS            [ reduce using rule 251 (binary_expression -> binary_expression NE binary_expression .) ]
  ! MINUS           [ reduce using rule 251 (binary_expression -> binary_expression NE binary_expression .) ]
  ! RSHIFT          [ reduce using rule 251 (binary_expression -> binary_expression NE binary_expression .) ]
  ! LSHIFT          [ reduce using rule 251 (binary_expression -> binary_expression NE binary_expression .) ]
  ! LT              [ reduce using rule 251 (binary_expression -> binary_expression NE binary_expression .) ]
  ! LE              [ reduce using rule 251 (binary_expression -> binary_expression NE binary_expression .) ]
  ! GE              [ reduce using rule 251 (binary_expression -> binary_expression NE binary_expression .) ]
  ! GT              [ reduce using rule 251 (binary_expression -> binary_expression NE binary_expression .) ]
  ! EQ              [ shift and go to state 314 ]
  ! NE              [ shift and go to state 315 ]
  ! AND             [ shift and go to state 316 ]
  ! OR              [ shift and go to state 317 ]
  ! XOR             [ shift and go to state 318 ]
  ! LAND            [ shift and go to state 319 ]
  ! LOR             [ shift and go to state 320 ]


state 415

    (252) binary_expression -> binary_expression AND binary_expression .
    (239) binary_expression -> binary_expression . TIMES binary_expression
    (240) binary_expression -> binary_expression . DIVIDE binary_expression
    (241) binary_expression -> binary_expression . MOD binary_expression
    (242) binary_expression -> binary_expression . PLUS binary_expression
    (243) binary_expression -> binary_expression . MINUS binary_expression
    (244) binary_expression -> binary_expression . RSHIFT binary_expression
    (245) binary_expression -> binary_expression . LSHIFT binary_expression
    (246) binary_expression -> binary_expression . LT binary_expression
    (247) binary_expression -> binary_expression . LE binary_expression
    (248) binary_expression -> binary_expression . GE binary_expression
    (249) binary_expression -> binary_expression . GT binary_expression
    (250) binary_expression -> binary_expression . EQ binary_expression
    (251) binary_expression -> binary_expression . NE binary_expression
    (252) binary_expression -> binary_expression . AND binary_expression
    (253) binary_expression -> binary_expression . OR binary_expression
    (254) binary_expression -> binary_expression . XOR binary_expression
    (255) binary_expression -> binary_expression . LAND binary_expression
    (256) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 252 (binary_expression -> binary_expression AND binary_expression .)
    AND             reduce using rule 252 (binary_expression -> binary_expression AND binary_expression .)
    OR              reduce using rule 252 (binary_expression -> binary_expression AND binary_expression .)
    XOR             reduce using rule 252 (binary_expression -> binary_expression AND binary_expression .)
    LAND            reduce using rule 252 (binary_expression -> binary_expression AND binary_expression .)
    LOR             reduce using rule 252 (binary_expression -> binary_expression AND binary_expression .)
    COMMA           reduce using rule 252 (binary_expression -> binary_expression AND binary_expression .)
    SEMI            reduce using rule 252 (binary_expression -> binary_expression AND binary_expression .)
    RBRACKET        reduce using rule 252 (binary_expression -> binary_expression AND binary_expression .)
    COLON           reduce using rule 252 (binary_expression -> binary_expression AND binary_expression .)
    RPAREN          reduce using rule 252 (binary_expression -> binary_expression AND binary_expression .)
    RBRACE          reduce using rule 252 (binary_expression -> binary_expression AND binary_expression .)
    TIMES           shift and go to state 303
    DIVIDE          shift and go to state 304
    MOD             shift and go to state 305
    PLUS            shift and go to state 306
    MINUS           shift and go to state 307
    RSHIFT          shift and go to state 308
    LSHIFT          shift and go to state 309
    LT              shift and go to state 310
    LE              shift and go to state 311
    GE              shift and go to state 312
    GT              shift and go to state 313
    EQ              shift and go to state 314
    NE              shift and go to state 315

  ! TIMES           [ reduce using rule 252 (binary_expression -> binary_expression AND binary_expression .) ]
  ! DIVIDE          [ reduce using rule 252 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MOD             [ reduce using rule 252 (binary_expression -> binary_expression AND binary_expression .) ]
  ! PLUS            [ reduce using rule 252 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MINUS           [ reduce using rule 252 (binary_expression -> binary_expression AND binary_expression .) ]
  ! RSHIFT          [ reduce using rule 252 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LSHIFT          [ reduce using rule 252 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LT              [ reduce using rule 252 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LE              [ reduce using rule 252 (binary_expression -> binary_expression AND binary_expression .) ]
  ! GE              [ reduce using rule 252 (binary_expression -> binary_expression AND binary_expression .) ]
  ! GT              [ reduce using rule 252 (binary_expression -> binary_expression AND binary_expression .) ]
  ! EQ              [ reduce using rule 252 (binary_expression -> binary_expression AND binary_expression .) ]
  ! NE              [ reduce using rule 252 (binary_expression -> binary_expression AND binary_expression .) ]
  ! AND             [ shift and go to state 316 ]
  ! OR              [ shift and go to state 317 ]
  ! XOR             [ shift and go to state 318 ]
  ! LAND            [ shift and go to state 319 ]
  ! LOR             [ shift and go to state 320 ]


state 416

    (253) binary_expression -> binary_expression OR binary_expression .
    (239) binary_expression -> binary_expression . TIMES binary_expression
    (240) binary_expression -> binary_expression . DIVIDE binary_expression
    (241) binary_expression -> binary_expression . MOD binary_expression
    (242) binary_expression -> binary_expression . PLUS binary_expression
    (243) binary_expression -> binary_expression . MINUS binary_expression
    (244) binary_expression -> binary_expression . RSHIFT binary_expression
    (245) binary_expression -> binary_expression . LSHIFT binary_expression
    (246) binary_expression -> binary_expression . LT binary_expression
    (247) binary_expression -> binary_expression . LE binary_expression
    (248) binary_expression -> binary_expression . GE binary_expression
    (249) binary_expression -> binary_expression . GT binary_expression
    (250) binary_expression -> binary_expression . EQ binary_expression
    (251) binary_expression -> binary_expression . NE binary_expression
    (252) binary_expression -> binary_expression . AND binary_expression
    (253) binary_expression -> binary_expression . OR binary_expression
    (254) binary_expression -> binary_expression . XOR binary_expression
    (255) binary_expression -> binary_expression . LAND binary_expression
    (256) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 253 (binary_expression -> binary_expression OR binary_expression .)
    OR              reduce using rule 253 (binary_expression -> binary_expression OR binary_expression .)
    LAND            reduce using rule 253 (binary_expression -> binary_expression OR binary_expression .)
    LOR             reduce using rule 253 (binary_expression -> binary_expression OR binary_expression .)
    COMMA           reduce using rule 253 (binary_expression -> binary_expression OR binary_expression .)
    SEMI            reduce using rule 253 (binary_expression -> binary_expression OR binary_expression .)
    RBRACKET        reduce using rule 253 (binary_expression -> binary_expression OR binary_expression .)
    COLON           reduce using rule 253 (binary_expression -> binary_expression OR binary_expression .)
    RPAREN          reduce using rule 253 (binary_expression -> binary_expression OR binary_expression .)
    RBRACE          reduce using rule 253 (binary_expression -> binary_expression OR binary_expression .)
    TIMES           shift and go to state 303
    DIVIDE          shift and go to state 304
    MOD             shift and go to state 305
    PLUS            shift and go to state 306
    MINUS           shift and go to state 307
    RSHIFT          shift and go to state 308
    LSHIFT          shift and go to state 309
    LT              shift and go to state 310
    LE              shift and go to state 311
    GE              shift and go to state 312
    GT              shift and go to state 313
    EQ              shift and go to state 314
    NE              shift and go to state 315
    AND             shift and go to state 316
    XOR             shift and go to state 318

  ! TIMES           [ reduce using rule 253 (binary_expression -> binary_expression OR binary_expression .) ]
  ! DIVIDE          [ reduce using rule 253 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MOD             [ reduce using rule 253 (binary_expression -> binary_expression OR binary_expression .) ]
  ! PLUS            [ reduce using rule 253 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MINUS           [ reduce using rule 253 (binary_expression -> binary_expression OR binary_expression .) ]
  ! RSHIFT          [ reduce using rule 253 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LSHIFT          [ reduce using rule 253 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LT              [ reduce using rule 253 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LE              [ reduce using rule 253 (binary_expression -> binary_expression OR binary_expression .) ]
  ! GE              [ reduce using rule 253 (binary_expression -> binary_expression OR binary_expression .) ]
  ! GT              [ reduce using rule 253 (binary_expression -> binary_expression OR binary_expression .) ]
  ! EQ              [ reduce using rule 253 (binary_expression -> binary_expression OR binary_expression .) ]
  ! NE              [ reduce using rule 253 (binary_expression -> binary_expression OR binary_expression .) ]
  ! AND             [ reduce using rule 253 (binary_expression -> binary_expression OR binary_expression .) ]
  ! XOR             [ reduce using rule 253 (binary_expression -> binary_expression OR binary_expression .) ]
  ! OR              [ shift and go to state 317 ]
  ! LAND            [ shift and go to state 319 ]
  ! LOR             [ shift and go to state 320 ]


state 417

    (254) binary_expression -> binary_expression XOR binary_expression .
    (239) binary_expression -> binary_expression . TIMES binary_expression
    (240) binary_expression -> binary_expression . DIVIDE binary_expression
    (241) binary_expression -> binary_expression . MOD binary_expression
    (242) binary_expression -> binary_expression . PLUS binary_expression
    (243) binary_expression -> binary_expression . MINUS binary_expression
    (244) binary_expression -> binary_expression . RSHIFT binary_expression
    (245) binary_expression -> binary_expression . LSHIFT binary_expression
    (246) binary_expression -> binary_expression . LT binary_expression
    (247) binary_expression -> binary_expression . LE binary_expression
    (248) binary_expression -> binary_expression . GE binary_expression
    (249) binary_expression -> binary_expression . GT binary_expression
    (250) binary_expression -> binary_expression . EQ binary_expression
    (251) binary_expression -> binary_expression . NE binary_expression
    (252) binary_expression -> binary_expression . AND binary_expression
    (253) binary_expression -> binary_expression . OR binary_expression
    (254) binary_expression -> binary_expression . XOR binary_expression
    (255) binary_expression -> binary_expression . LAND binary_expression
    (256) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 254 (binary_expression -> binary_expression XOR binary_expression .)
    OR              reduce using rule 254 (binary_expression -> binary_expression XOR binary_expression .)
    XOR             reduce using rule 254 (binary_expression -> binary_expression XOR binary_expression .)
    LAND            reduce using rule 254 (binary_expression -> binary_expression XOR binary_expression .)
    LOR             reduce using rule 254 (binary_expression -> binary_expression XOR binary_expression .)
    COMMA           reduce using rule 254 (binary_expression -> binary_expression XOR binary_expression .)
    SEMI            reduce using rule 254 (binary_expression -> binary_expression XOR binary_expression .)
    RBRACKET        reduce using rule 254 (binary_expression -> binary_expression XOR binary_expression .)
    COLON           reduce using rule 254 (binary_expression -> binary_expression XOR binary_expression .)
    RPAREN          reduce using rule 254 (binary_expression -> binary_expression XOR binary_expression .)
    RBRACE          reduce using rule 254 (binary_expression -> binary_expression XOR binary_expression .)
    TIMES           shift and go to state 303
    DIVIDE          shift and go to state 304
    MOD             shift and go to state 305
    PLUS            shift and go to state 306
    MINUS           shift and go to state 307
    RSHIFT          shift and go to state 308
    LSHIFT          shift and go to state 309
    LT              shift and go to state 310
    LE              shift and go to state 311
    GE              shift and go to state 312
    GT              shift and go to state 313
    EQ              shift and go to state 314
    NE              shift and go to state 315
    AND             shift and go to state 316

  ! TIMES           [ reduce using rule 254 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! DIVIDE          [ reduce using rule 254 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! MOD             [ reduce using rule 254 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! PLUS            [ reduce using rule 254 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! MINUS           [ reduce using rule 254 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! RSHIFT          [ reduce using rule 254 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! LSHIFT          [ reduce using rule 254 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! LT              [ reduce using rule 254 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! LE              [ reduce using rule 254 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! GE              [ reduce using rule 254 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! GT              [ reduce using rule 254 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! EQ              [ reduce using rule 254 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! NE              [ reduce using rule 254 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! AND             [ reduce using rule 254 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! OR              [ shift and go to state 317 ]
  ! XOR             [ shift and go to state 318 ]
  ! LAND            [ shift and go to state 319 ]
  ! LOR             [ shift and go to state 320 ]


state 418

    (255) binary_expression -> binary_expression LAND binary_expression .
    (239) binary_expression -> binary_expression . TIMES binary_expression
    (240) binary_expression -> binary_expression . DIVIDE binary_expression
    (241) binary_expression -> binary_expression . MOD binary_expression
    (242) binary_expression -> binary_expression . PLUS binary_expression
    (243) binary_expression -> binary_expression . MINUS binary_expression
    (244) binary_expression -> binary_expression . RSHIFT binary_expression
    (245) binary_expression -> binary_expression . LSHIFT binary_expression
    (246) binary_expression -> binary_expression . LT binary_expression
    (247) binary_expression -> binary_expression . LE binary_expression
    (248) binary_expression -> binary_expression . GE binary_expression
    (249) binary_expression -> binary_expression . GT binary_expression
    (250) binary_expression -> binary_expression . EQ binary_expression
    (251) binary_expression -> binary_expression . NE binary_expression
    (252) binary_expression -> binary_expression . AND binary_expression
    (253) binary_expression -> binary_expression . OR binary_expression
    (254) binary_expression -> binary_expression . XOR binary_expression
    (255) binary_expression -> binary_expression . LAND binary_expression
    (256) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 255 (binary_expression -> binary_expression LAND binary_expression .)
    LAND            reduce using rule 255 (binary_expression -> binary_expression LAND binary_expression .)
    LOR             reduce using rule 255 (binary_expression -> binary_expression LAND binary_expression .)
    COMMA           reduce using rule 255 (binary_expression -> binary_expression LAND binary_expression .)
    SEMI            reduce using rule 255 (binary_expression -> binary_expression LAND binary_expression .)
    RBRACKET        reduce using rule 255 (binary_expression -> binary_expression LAND binary_expression .)
    COLON           reduce using rule 255 (binary_expression -> binary_expression LAND binary_expression .)
    RPAREN          reduce using rule 255 (binary_expression -> binary_expression LAND binary_expression .)
    RBRACE          reduce using rule 255 (binary_expression -> binary_expression LAND binary_expression .)
    TIMES           shift and go to state 303
    DIVIDE          shift and go to state 304
    MOD             shift and go to state 305
    PLUS            shift and go to state 306
    MINUS           shift and go to state 307
    RSHIFT          shift and go to state 308
    LSHIFT          shift and go to state 309
    LT              shift and go to state 310
    LE              shift and go to state 311
    GE              shift and go to state 312
    GT              shift and go to state 313
    EQ              shift and go to state 314
    NE              shift and go to state 315
    AND             shift and go to state 316
    OR              shift and go to state 317
    XOR             shift and go to state 318

  ! TIMES           [ reduce using rule 255 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! DIVIDE          [ reduce using rule 255 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! MOD             [ reduce using rule 255 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! PLUS            [ reduce using rule 255 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! MINUS           [ reduce using rule 255 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! RSHIFT          [ reduce using rule 255 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! LSHIFT          [ reduce using rule 255 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! LT              [ reduce using rule 255 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! LE              [ reduce using rule 255 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! GE              [ reduce using rule 255 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! GT              [ reduce using rule 255 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! EQ              [ reduce using rule 255 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! NE              [ reduce using rule 255 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! AND             [ reduce using rule 255 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! OR              [ reduce using rule 255 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! XOR             [ reduce using rule 255 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! LAND            [ shift and go to state 319 ]
  ! LOR             [ shift and go to state 320 ]


state 419

    (256) binary_expression -> binary_expression LOR binary_expression .
    (239) binary_expression -> binary_expression . TIMES binary_expression
    (240) binary_expression -> binary_expression . DIVIDE binary_expression
    (241) binary_expression -> binary_expression . MOD binary_expression
    (242) binary_expression -> binary_expression . PLUS binary_expression
    (243) binary_expression -> binary_expression . MINUS binary_expression
    (244) binary_expression -> binary_expression . RSHIFT binary_expression
    (245) binary_expression -> binary_expression . LSHIFT binary_expression
    (246) binary_expression -> binary_expression . LT binary_expression
    (247) binary_expression -> binary_expression . LE binary_expression
    (248) binary_expression -> binary_expression . GE binary_expression
    (249) binary_expression -> binary_expression . GT binary_expression
    (250) binary_expression -> binary_expression . EQ binary_expression
    (251) binary_expression -> binary_expression . NE binary_expression
    (252) binary_expression -> binary_expression . AND binary_expression
    (253) binary_expression -> binary_expression . OR binary_expression
    (254) binary_expression -> binary_expression . XOR binary_expression
    (255) binary_expression -> binary_expression . LAND binary_expression
    (256) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 256 (binary_expression -> binary_expression LOR binary_expression .)
    LOR             reduce using rule 256 (binary_expression -> binary_expression LOR binary_expression .)
    COMMA           reduce using rule 256 (binary_expression -> binary_expression LOR binary_expression .)
    SEMI            reduce using rule 256 (binary_expression -> binary_expression LOR binary_expression .)
    RBRACKET        reduce using rule 256 (binary_expression -> binary_expression LOR binary_expression .)
    COLON           reduce using rule 256 (binary_expression -> binary_expression LOR binary_expression .)
    RPAREN          reduce using rule 256 (binary_expression -> binary_expression LOR binary_expression .)
    RBRACE          reduce using rule 256 (binary_expression -> binary_expression LOR binary_expression .)
    TIMES           shift and go to state 303
    DIVIDE          shift and go to state 304
    MOD             shift and go to state 305
    PLUS            shift and go to state 306
    MINUS           shift and go to state 307
    RSHIFT          shift and go to state 308
    LSHIFT          shift and go to state 309
    LT              shift and go to state 310
    LE              shift and go to state 311
    GE              shift and go to state 312
    GT              shift and go to state 313
    EQ              shift and go to state 314
    NE              shift and go to state 315
    AND             shift and go to state 316
    OR              shift and go to state 317
    XOR             shift and go to state 318
    LAND            shift and go to state 319

  ! TIMES           [ reduce using rule 256 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! DIVIDE          [ reduce using rule 256 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! MOD             [ reduce using rule 256 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! PLUS            [ reduce using rule 256 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! MINUS           [ reduce using rule 256 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! RSHIFT          [ reduce using rule 256 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! LSHIFT          [ reduce using rule 256 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! LT              [ reduce using rule 256 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! LE              [ reduce using rule 256 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! GE              [ reduce using rule 256 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! GT              [ reduce using rule 256 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! EQ              [ reduce using rule 256 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! NE              [ reduce using rule 256 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! AND             [ reduce using rule 256 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! OR              [ reduce using rule 256 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! XOR             [ reduce using rule 256 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! LAND            [ reduce using rule 256 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! LOR             [ shift and go to state 320 ]


state 420

    (272) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET
    (220) expression -> expression . COMMA assignment_expression

    RBRACKET        shift and go to state 469
    COMMA           shift and go to state 278


state 421

    (273) postfix_expression -> postfix_expression LPAREN argument_expression_list . RPAREN
    (293) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 470
    COMMA           shift and go to state 471


state 422

    (274) postfix_expression -> postfix_expression LPAREN RPAREN .

    LBRACKET        reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PERIOD          reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ARROW           reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSPLUS        reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSMINUS      reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUALS          reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOREQUAL        reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMESEQUAL      reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVEQUAL        reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODEQUAL        reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSEQUAL       reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSEQUAL      reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFTEQUAL     reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFTEQUAL     reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ANDEQUAL        reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OREQUAL         reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    CONDOP          reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMES           reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVIDE          reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MOD             reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUS            reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS           reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFT          reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFT          reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LT              reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LE              reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GE              reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GT              reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ              reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NE              reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND             reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR              reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOR             reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LAND            reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LOR             reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMI            reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACKET        reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COLON           reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACE          reduce using rule 274 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 423

    (292) argument_expression_list -> assignment_expression .

    RPAREN          reduce using rule 292 (argument_expression_list -> assignment_expression .)
    COMMA           reduce using rule 292 (argument_expression_list -> assignment_expression .)


state 424

    (275) postfix_expression -> postfix_expression PERIOD ID .

    LBRACKET        reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    LPAREN          reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    PERIOD          reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    ARROW           reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    PLUSPLUS        reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    MINUSMINUS      reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    EQUALS          reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    XOREQUAL        reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    TIMESEQUAL      reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    DIVEQUAL        reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    MODEQUAL        reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    PLUSEQUAL       reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    MINUSEQUAL      reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    LSHIFTEQUAL     reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    RSHIFTEQUAL     reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    ANDEQUAL        reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    OREQUAL         reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    CONDOP          reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    TIMES           reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    DIVIDE          reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    MOD             reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    PLUS            reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    MINUS           reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    RSHIFT          reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    LSHIFT          reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    LT              reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    LE              reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    GE              reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    GT              reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    EQ              reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    NE              reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    AND             reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    OR              reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    XOR             reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    LAND            reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    LOR             reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    COMMA           reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    SEMI            reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    RBRACKET        reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    COLON           reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    RPAREN          reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)
    RBRACE          reduce using rule 275 (postfix_expression -> postfix_expression PERIOD ID .)


state 425

    (276) postfix_expression -> postfix_expression PERIOD TYPEID .

    LBRACKET        reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    LPAREN          reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    PERIOD          reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    ARROW           reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    PLUSPLUS        reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    MINUSMINUS      reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    EQUALS          reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    XOREQUAL        reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    TIMESEQUAL      reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    DIVEQUAL        reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    MODEQUAL        reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    PLUSEQUAL       reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    MINUSEQUAL      reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    LSHIFTEQUAL     reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    RSHIFTEQUAL     reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    ANDEQUAL        reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    OREQUAL         reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    CONDOP          reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    TIMES           reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    DIVIDE          reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    MOD             reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    PLUS            reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    MINUS           reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    RSHIFT          reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    LSHIFT          reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    LT              reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    LE              reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    GE              reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    GT              reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    EQ              reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    NE              reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    AND             reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    OR              reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    XOR             reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    LAND            reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    LOR             reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    COMMA           reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    SEMI            reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    RBRACKET        reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    COLON           reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    RPAREN          reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    RBRACE          reduce using rule 276 (postfix_expression -> postfix_expression PERIOD TYPEID .)


state 426

    (277) postfix_expression -> postfix_expression ARROW ID .

    LBRACKET        reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    LPAREN          reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    PERIOD          reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    ARROW           reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    PLUSPLUS        reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    MINUSMINUS      reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    EQUALS          reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    XOREQUAL        reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    TIMESEQUAL      reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    DIVEQUAL        reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    MODEQUAL        reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    PLUSEQUAL       reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    MINUSEQUAL      reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    LSHIFTEQUAL     reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    RSHIFTEQUAL     reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    ANDEQUAL        reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    OREQUAL         reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    CONDOP          reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    TIMES           reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    DIVIDE          reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    MOD             reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    PLUS            reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    MINUS           reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    RSHIFT          reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    LSHIFT          reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    LT              reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    LE              reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    GE              reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    GT              reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    EQ              reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    NE              reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    AND             reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    OR              reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    XOR             reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    LAND            reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    LOR             reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    COMMA           reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    SEMI            reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    RBRACKET        reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    COLON           reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    RPAREN          reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)
    RBRACE          reduce using rule 277 (postfix_expression -> postfix_expression ARROW ID .)


state 427

    (278) postfix_expression -> postfix_expression ARROW TYPEID .

    LBRACKET        reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    LPAREN          reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    PERIOD          reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    ARROW           reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    PLUSPLUS        reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    MINUSMINUS      reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    EQUALS          reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    XOREQUAL        reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    TIMESEQUAL      reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    DIVEQUAL        reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    MODEQUAL        reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    PLUSEQUAL       reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    MINUSEQUAL      reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    LSHIFTEQUAL     reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    RSHIFTEQUAL     reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    ANDEQUAL        reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    OREQUAL         reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    CONDOP          reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    TIMES           reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    DIVIDE          reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    MOD             reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    PLUS            reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    MINUS           reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    RSHIFT          reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    LSHIFT          reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    LT              reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    LE              reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    GE              reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    GT              reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    EQ              reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    NE              reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    AND             reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    OR              reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    XOR             reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    LAND            reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    LOR             reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    COMMA           reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    SEMI            reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    RBRACKET        reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    COLON           reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    RPAREN          reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)
    RBRACE          reduce using rule 278 (postfix_expression -> postfix_expression ARROW TYPEID .)


state 428

    (281) postfix_expression -> LPAREN type_name . RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> LPAREN type_name . RPAREN brace_open initializer_list COMMA brace_close

    RPAREN          shift and go to state 472


state 429

    (264) unary_expression -> SIZEOF LPAREN type_name . RPAREN
    (281) postfix_expression -> LPAREN type_name . RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> LPAREN type_name . RPAREN brace_open initializer_list COMMA brace_close

    RPAREN          shift and go to state 473


state 430

    (288) primary_expression -> OFFSETOF LPAREN type_name . COMMA offsetof_member_designator RPAREN

    COMMA           shift and go to state 474


state 431

    (178) initializer -> brace_open initializer_list_opt brace_close .

    COMMA           reduce using rule 178 (initializer -> brace_open initializer_list_opt brace_close .)
    SEMI            reduce using rule 178 (initializer -> brace_open initializer_list_opt brace_close .)
    RBRACE          reduce using rule 178 (initializer -> brace_open initializer_list_opt brace_close .)


state 432

    (179) initializer -> brace_open initializer_list COMMA . brace_close
    (181) initializer_list -> initializer_list COMMA . designation_opt initializer
    (308) brace_close -> . RBRACE
    (11) designation_opt -> . empty
    (12) designation_opt -> . designation
    (309) empty -> .
    (182) designation -> . designator_list EQUALS
    (183) designator_list -> . designator
    (184) designator_list -> . designator_list designator
    (185) designator -> . LBRACKET constant_expression RBRACKET
    (186) designator -> . PERIOD identifier

    RBRACE          shift and go to state 144
    LBRACE          reduce using rule 309 (empty -> .)
    PLUSPLUS        reduce using rule 309 (empty -> .)
    MINUSMINUS      reduce using rule 309 (empty -> .)
    SIZEOF          reduce using rule 309 (empty -> .)
    LPAREN          reduce using rule 309 (empty -> .)
    AND             reduce using rule 309 (empty -> .)
    TIMES           reduce using rule 309 (empty -> .)
    PLUS            reduce using rule 309 (empty -> .)
    MINUS           reduce using rule 309 (empty -> .)
    NOT             reduce using rule 309 (empty -> .)
    LNOT            reduce using rule 309 (empty -> .)
    OFFSETOF        reduce using rule 309 (empty -> .)
    ID              reduce using rule 309 (empty -> .)
    INT_CONST_DEC   reduce using rule 309 (empty -> .)
    INT_CONST_OCT   reduce using rule 309 (empty -> .)
    INT_CONST_HEX   reduce using rule 309 (empty -> .)
    INT_CONST_BIN   reduce using rule 309 (empty -> .)
    FLOAT_CONST     reduce using rule 309 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 309 (empty -> .)
    CHAR_CONST      reduce using rule 309 (empty -> .)
    WCHAR_CONST     reduce using rule 309 (empty -> .)
    STRING_LITERAL  reduce using rule 309 (empty -> .)
    WSTRING_LITERAL reduce using rule 309 (empty -> .)
    LBRACKET        shift and go to state 343
    PERIOD          shift and go to state 344

    brace_close                    shift and go to state 475
    designation_opt                shift and go to state 476
    empty                          shift and go to state 477
    designation                    shift and go to state 340
    designator_list                shift and go to state 341
    designator                     shift and go to state 342

state 433

    (180) initializer_list -> designation_opt initializer .

    COMMA           reduce using rule 180 (initializer_list -> designation_opt initializer .)
    RBRACE          reduce using rule 180 (initializer_list -> designation_opt initializer .)


state 434

    (182) designation -> designator_list EQUALS .

    LBRACE          reduce using rule 182 (designation -> designator_list EQUALS .)
    PLUSPLUS        reduce using rule 182 (designation -> designator_list EQUALS .)
    MINUSMINUS      reduce using rule 182 (designation -> designator_list EQUALS .)
    SIZEOF          reduce using rule 182 (designation -> designator_list EQUALS .)
    LPAREN          reduce using rule 182 (designation -> designator_list EQUALS .)
    AND             reduce using rule 182 (designation -> designator_list EQUALS .)
    TIMES           reduce using rule 182 (designation -> designator_list EQUALS .)
    PLUS            reduce using rule 182 (designation -> designator_list EQUALS .)
    MINUS           reduce using rule 182 (designation -> designator_list EQUALS .)
    NOT             reduce using rule 182 (designation -> designator_list EQUALS .)
    LNOT            reduce using rule 182 (designation -> designator_list EQUALS .)
    OFFSETOF        reduce using rule 182 (designation -> designator_list EQUALS .)
    ID              reduce using rule 182 (designation -> designator_list EQUALS .)
    INT_CONST_DEC   reduce using rule 182 (designation -> designator_list EQUALS .)
    INT_CONST_OCT   reduce using rule 182 (designation -> designator_list EQUALS .)
    INT_CONST_HEX   reduce using rule 182 (designation -> designator_list EQUALS .)
    INT_CONST_BIN   reduce using rule 182 (designation -> designator_list EQUALS .)
    FLOAT_CONST     reduce using rule 182 (designation -> designator_list EQUALS .)
    HEX_FLOAT_CONST reduce using rule 182 (designation -> designator_list EQUALS .)
    CHAR_CONST      reduce using rule 182 (designation -> designator_list EQUALS .)
    WCHAR_CONST     reduce using rule 182 (designation -> designator_list EQUALS .)
    STRING_LITERAL  reduce using rule 182 (designation -> designator_list EQUALS .)
    WSTRING_LITERAL reduce using rule 182 (designation -> designator_list EQUALS .)


state 435

    (184) designator_list -> designator_list designator .

    EQUALS          reduce using rule 184 (designator_list -> designator_list designator .)
    LBRACKET        reduce using rule 184 (designator_list -> designator_list designator .)
    PERIOD          reduce using rule 184 (designator_list -> designator_list designator .)


state 436

    (185) designator -> LBRACKET constant_expression . RBRACKET

    RBRACKET        shift and go to state 478


state 437

    (186) designator -> PERIOD identifier .

    EQUALS          reduce using rule 186 (designator -> PERIOD identifier .)
    LBRACKET        reduce using rule 186 (designator -> PERIOD identifier .)
    PERIOD          reduce using rule 186 (designator -> PERIOD identifier .)


state 438

    (39) direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .

    LBRACKET        reduce using rule 39 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    LPAREN          reduce using rule 39 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    EQUALS          reduce using rule 39 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    COMMA           reduce using rule 39 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    SEMI            reduce using rule 39 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    RPAREN          reduce using rule 39 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    COLON           reduce using rule 39 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)


state 439

    (42) direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .

    LBRACKET        reduce using rule 42 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    LPAREN          reduce using rule 42 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    EQUALS          reduce using rule 42 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    COMMA           reduce using rule 42 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    SEMI            reduce using rule 42 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    RPAREN          reduce using rule 42 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    COLON           reduce using rule 42 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)


state 440

    (40) direct_typeid_declarator -> direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression . RBRACKET

    RBRACKET        shift and go to state 479


state 441

    (41) direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression . RBRACKET

    RBRACKET        shift and go to state 480


state 442

    (32) direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .

    LBRACKET        reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    LPAREN          reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    CONST           reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    RESTRICT        reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    VOLATILE        reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    AUTO            reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    REGISTER        reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    STATIC          reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    EXTERN          reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    TYPEDEF         reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    INLINE          reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    TYPEID          reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    ENUM            reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    VOID            reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    _BOOL           reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    CHAR            reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    SHORT           reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    INT             reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    LONG            reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    FLOAT           reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    DOUBLE          reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    _COMPLEX        reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    SIGNED          reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    UNSIGNED        reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    __INT128        reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    STRUCT          reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    UNION           reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    LBRACE          reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    EQUALS          reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    COMMA           reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    SEMI            reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    RPAREN          reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    COLON           reduce using rule 32 (direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)


state 443

    (33) direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .

    LBRACKET        reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    LPAREN          reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    CONST           reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    RESTRICT        reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    VOLATILE        reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    AUTO            reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    REGISTER        reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    STATIC          reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    EXTERN          reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    TYPEDEF         reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    INLINE          reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    TYPEID          reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    ENUM            reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    VOID            reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    _BOOL           reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    CHAR            reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    SHORT           reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    INT             reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    LONG            reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    FLOAT           reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    DOUBLE          reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    _COMPLEX        reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    SIGNED          reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    UNSIGNED        reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    __INT128        reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    STRUCT          reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    UNION           reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    LBRACE          reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    EQUALS          reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    COMMA           reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    SEMI            reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    RPAREN          reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    COLON           reduce using rule 33 (direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)


state 444

    (46) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt . assignment_expression_opt RBRACKET
    (49) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt . TIMES RBRACKET
    (3) assignment_expression_opt -> . empty
    (4) assignment_expression_opt -> . assignment_expression
    (309) empty -> .
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    TIMES           shift and go to state 482
    RBRACKET        reduce using rule 309 (empty -> .)
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    assignment_expression_opt      shift and go to state 481
    empty                          shift and go to state 223
    assignment_expression          shift and go to state 224
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 445

    (47) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET STATIC . type_qualifier_list_opt assignment_expression RBRACKET
    (27) type_qualifier_list_opt -> . empty
    (28) type_qualifier_list_opt -> . type_qualifier_list
    (309) empty -> .
    (166) type_qualifier_list -> . type_qualifier
    (167) type_qualifier_list -> . type_qualifier_list type_qualifier
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE

    PLUSPLUS        reduce using rule 309 (empty -> .)
    MINUSMINUS      reduce using rule 309 (empty -> .)
    SIZEOF          reduce using rule 309 (empty -> .)
    LPAREN          reduce using rule 309 (empty -> .)
    AND             reduce using rule 309 (empty -> .)
    TIMES           reduce using rule 309 (empty -> .)
    PLUS            reduce using rule 309 (empty -> .)
    MINUS           reduce using rule 309 (empty -> .)
    NOT             reduce using rule 309 (empty -> .)
    LNOT            reduce using rule 309 (empty -> .)
    OFFSETOF        reduce using rule 309 (empty -> .)
    ID              reduce using rule 309 (empty -> .)
    INT_CONST_DEC   reduce using rule 309 (empty -> .)
    INT_CONST_OCT   reduce using rule 309 (empty -> .)
    INT_CONST_HEX   reduce using rule 309 (empty -> .)
    INT_CONST_BIN   reduce using rule 309 (empty -> .)
    FLOAT_CONST     reduce using rule 309 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 309 (empty -> .)
    CHAR_CONST      reduce using rule 309 (empty -> .)
    WCHAR_CONST     reduce using rule 309 (empty -> .)
    STRING_LITERAL  reduce using rule 309 (empty -> .)
    WSTRING_LITERAL reduce using rule 309 (empty -> .)
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47

    type_qualifier_list_opt        shift and go to state 483
    empty                          shift and go to state 95
    type_qualifier_list            shift and go to state 96
    type_qualifier                 shift and go to state 97

state 446

    (48) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list . STATIC assignment_expression RBRACKET
    (28) type_qualifier_list_opt -> type_qualifier_list .
    (167) type_qualifier_list -> type_qualifier_list . type_qualifier
    (117) type_qualifier -> . CONST
    (118) type_qualifier -> . RESTRICT
    (119) type_qualifier -> . VOLATILE

    STATIC          shift and go to state 484
    TIMES           reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    PLUSPLUS        reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    MINUSMINUS      reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    SIZEOF          reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    LPAREN          reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    AND             reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    PLUS            reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    MINUS           reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    NOT             reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    LNOT            reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    OFFSETOF        reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    ID              reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_DEC   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_OCT   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_HEX   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_BIN   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    FLOAT_CONST     reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    HEX_FLOAT_CONST reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    CHAR_CONST      reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    WCHAR_CONST     reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    STRING_LITERAL  reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    WSTRING_LITERAL reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    RBRACKET        reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    CONST           shift and go to state 45
    RESTRICT        shift and go to state 46
    VOLATILE        shift and go to state 47

    type_qualifier                 shift and go to state 133

state 447

    (50) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 485


state 448

    (51) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN identifier_list_opt . RPAREN

    RPAREN          shift and go to state 486


state 449

    (191) direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .

    LBRACKET        reduce using rule 191 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    LPAREN          reduce using rule 191 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    COMMA           reduce using rule 191 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    RPAREN          reduce using rule 191 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)


state 450

    (197) direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .

    LBRACKET        reduce using rule 197 (direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .)
    LPAREN          reduce using rule 197 (direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .)
    COMMA           reduce using rule 197 (direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .)
    RPAREN          reduce using rule 197 (direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .)


state 451

    (193) direct_abstract_declarator -> LBRACKET assignment_expression_opt RBRACKET .

    LBRACKET        reduce using rule 193 (direct_abstract_declarator -> LBRACKET assignment_expression_opt RBRACKET .)
    LPAREN          reduce using rule 193 (direct_abstract_declarator -> LBRACKET assignment_expression_opt RBRACKET .)
    COMMA           reduce using rule 193 (direct_abstract_declarator -> LBRACKET assignment_expression_opt RBRACKET .)
    RPAREN          reduce using rule 193 (direct_abstract_declarator -> LBRACKET assignment_expression_opt RBRACKET .)


state 452

    (195) direct_abstract_declarator -> LBRACKET TIMES RBRACKET .

    LBRACKET        reduce using rule 195 (direct_abstract_declarator -> LBRACKET TIMES RBRACKET .)
    LPAREN          reduce using rule 195 (direct_abstract_declarator -> LBRACKET TIMES RBRACKET .)
    COMMA           reduce using rule 195 (direct_abstract_declarator -> LBRACKET TIMES RBRACKET .)
    RPAREN          reduce using rule 195 (direct_abstract_declarator -> LBRACKET TIMES RBRACKET .)


state 453

    (192) direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt . RBRACKET

    RBRACKET        shift and go to state 487


state 454

    (194) direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES . RBRACKET
    (266) unary_operator -> TIMES .

    RBRACKET        shift and go to state 488
    LPAREN          reduce using rule 266 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 266 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 266 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 266 (unary_operator -> TIMES .)
    AND             reduce using rule 266 (unary_operator -> TIMES .)
    TIMES           reduce using rule 266 (unary_operator -> TIMES .)
    PLUS            reduce using rule 266 (unary_operator -> TIMES .)
    MINUS           reduce using rule 266 (unary_operator -> TIMES .)
    NOT             reduce using rule 266 (unary_operator -> TIMES .)
    LNOT            reduce using rule 266 (unary_operator -> TIMES .)
    OFFSETOF        reduce using rule 266 (unary_operator -> TIMES .)
    ID              reduce using rule 266 (unary_operator -> TIMES .)
    INT_CONST_DEC   reduce using rule 266 (unary_operator -> TIMES .)
    INT_CONST_OCT   reduce using rule 266 (unary_operator -> TIMES .)
    INT_CONST_HEX   reduce using rule 266 (unary_operator -> TIMES .)
    INT_CONST_BIN   reduce using rule 266 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 266 (unary_operator -> TIMES .)
    HEX_FLOAT_CONST reduce using rule 266 (unary_operator -> TIMES .)
    CHAR_CONST      reduce using rule 266 (unary_operator -> TIMES .)
    WCHAR_CONST     reduce using rule 266 (unary_operator -> TIMES .)
    STRING_LITERAL  reduce using rule 266 (unary_operator -> TIMES .)
    WSTRING_LITERAL reduce using rule 266 (unary_operator -> TIMES .)


state 455

    (196) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt . RPAREN

    RPAREN          shift and go to state 489


state 456

    (148) struct_declarator_list -> struct_declarator_list COMMA struct_declarator .

    COMMA           reduce using rule 148 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)
    SEMI            reduce using rule 148 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)


state 457

    (150) struct_declarator -> declarator COLON constant_expression .

    COMMA           reduce using rule 150 (struct_declarator -> declarator COLON constant_expression .)
    SEMI            reduce using rule 150 (struct_declarator -> declarator COLON constant_expression .)


state 458

    (204) labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .

    ID              reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    CASE            reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    DEFAULT         reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    IF              reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    SWITCH          reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    WHILE           reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    DO              reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    FOR             reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    GOTO            reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    BREAK           reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    CONTINUE        reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    RETURN          reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    PPPRAGMA        reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    LBRACE          reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    CONST           reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    RESTRICT        reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    VOLATILE        reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    AUTO            reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    REGISTER        reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    STATIC          reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    EXTERN          reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    TYPEDEF         reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    INLINE          reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    TYPEID          reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    ENUM            reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    VOID            reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    _BOOL           reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    CHAR            reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    SHORT           reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    INT             reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    LONG            reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    FLOAT           reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    DOUBLE          reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    _COMPLEX        reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    SIGNED          reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    UNSIGNED        reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    __INT128        reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    STRUCT          reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    UNION           reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    PLUSPLUS        reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    MINUSMINUS      reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    SIZEOF          reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    LPAREN          reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    AND             reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    TIMES           reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    PLUS            reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    MINUS           reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    NOT             reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    LNOT            reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    OFFSETOF        reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    INT_CONST_DEC   reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    INT_CONST_OCT   reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    INT_CONST_HEX   reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    INT_CONST_BIN   reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    FLOAT_CONST     reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    HEX_FLOAT_CONST reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    CHAR_CONST      reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    WCHAR_CONST     reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    STRING_LITERAL  reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    WSTRING_LITERAL reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    SEMI            reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    RBRACE          reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)
    ELSE            reduce using rule 204 (labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement .)


state 459

    (258) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (281) postfix_expression -> LPAREN type_name RPAREN . brace_open initializer_list brace_close
    (282) postfix_expression -> LPAREN type_name RPAREN . brace_open initializer_list COMMA brace_close
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (307) brace_open -> . LBRACE
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 271
    LBRACE          shift and go to state 101
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    cast_expression                shift and go to state 462
    brace_open                     shift and go to state 461
    unary_expression               shift and go to state 270
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 460

    (206) selection_statement -> IF LPAREN expression RPAREN . pragmacomp_or_statement
    (207) selection_statement -> IF LPAREN expression RPAREN . statement ELSE pragmacomp_or_statement
    (79) pragmacomp_or_statement -> . pppragma_directive statement
    (80) pragmacomp_or_statement -> . statement
    (72) statement -> . labeled_statement
    (73) statement -> . expression_statement
    (74) statement -> . compound_statement
    (75) statement -> . selection_statement
    (76) statement -> . iteration_statement
    (77) statement -> . jump_statement
    (78) statement -> . pppragma_directive
    (68) pppragma_directive -> . PPPRAGMA
    (69) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (203) labeled_statement -> . ID COLON pragmacomp_or_statement
    (204) labeled_statement -> . CASE constant_expression COLON pragmacomp_or_statement
    (205) labeled_statement -> . DEFAULT COLON pragmacomp_or_statement
    (218) expression_statement -> . expression_opt SEMI
    (202) compound_statement -> . brace_open block_item_list_opt brace_close
    (206) selection_statement -> . IF LPAREN expression RPAREN pragmacomp_or_statement
    (207) selection_statement -> . IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
    (208) selection_statement -> . SWITCH LPAREN expression RPAREN pragmacomp_or_statement
    (209) iteration_statement -> . WHILE LPAREN expression RPAREN pragmacomp_or_statement
    (210) iteration_statement -> . DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI
    (211) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (212) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (213) jump_statement -> . GOTO ID SEMI
    (214) jump_statement -> . BREAK SEMI
    (215) jump_statement -> . CONTINUE SEMI
    (216) jump_statement -> . RETURN expression SEMI
    (217) jump_statement -> . RETURN SEMI
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (307) brace_open -> . LBRACE
    (309) empty -> .
    (219) expression -> . assignment_expression
    (220) expression -> . expression COMMA assignment_expression
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PPPRAGMA        shift and go to state 14
    ID              shift and go to state 163
    CASE            shift and go to state 164
    DEFAULT         shift and go to state 165
    IF              shift and go to state 167
    SWITCH          shift and go to state 170
    WHILE           shift and go to state 171
    DO              shift and go to state 172
    FOR             shift and go to state 173
    GOTO            shift and go to state 174
    BREAK           shift and go to state 175
    CONTINUE        shift and go to state 176
    RETURN          shift and go to state 177
    LBRACE          shift and go to state 101
    SEMI            reduce using rule 309 (empty -> .)
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    expression                     shift and go to state 169
    pragmacomp_or_statement        shift and go to state 490
    statement                      shift and go to state 491
    pppragma_directive             shift and go to state 282
    labeled_statement              shift and go to state 156
    expression_statement           shift and go to state 157
    compound_statement             shift and go to state 158
    selection_statement            shift and go to state 159
    iteration_statement            shift and go to state 160
    jump_statement                 shift and go to state 161
    expression_opt                 shift and go to state 166
    brace_open                     shift and go to state 106
    empty                          shift and go to state 266
    assignment_expression          shift and go to state 178
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 461

    (281) postfix_expression -> LPAREN type_name RPAREN brace_open . initializer_list brace_close
    (282) postfix_expression -> LPAREN type_name RPAREN brace_open . initializer_list COMMA brace_close
    (180) initializer_list -> . designation_opt initializer
    (181) initializer_list -> . initializer_list COMMA designation_opt initializer
    (11) designation_opt -> . empty
    (12) designation_opt -> . designation
    (309) empty -> .
    (182) designation -> . designator_list EQUALS
    (183) designator_list -> . designator
    (184) designator_list -> . designator_list designator
    (185) designator -> . LBRACKET constant_expression RBRACKET
    (186) designator -> . PERIOD identifier

    LBRACE          reduce using rule 309 (empty -> .)
    PLUSPLUS        reduce using rule 309 (empty -> .)
    MINUSMINUS      reduce using rule 309 (empty -> .)
    SIZEOF          reduce using rule 309 (empty -> .)
    LPAREN          reduce using rule 309 (empty -> .)
    AND             reduce using rule 309 (empty -> .)
    TIMES           reduce using rule 309 (empty -> .)
    PLUS            reduce using rule 309 (empty -> .)
    MINUS           reduce using rule 309 (empty -> .)
    NOT             reduce using rule 309 (empty -> .)
    LNOT            reduce using rule 309 (empty -> .)
    OFFSETOF        reduce using rule 309 (empty -> .)
    ID              reduce using rule 309 (empty -> .)
    INT_CONST_DEC   reduce using rule 309 (empty -> .)
    INT_CONST_OCT   reduce using rule 309 (empty -> .)
    INT_CONST_HEX   reduce using rule 309 (empty -> .)
    INT_CONST_BIN   reduce using rule 309 (empty -> .)
    FLOAT_CONST     reduce using rule 309 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 309 (empty -> .)
    CHAR_CONST      reduce using rule 309 (empty -> .)
    WCHAR_CONST     reduce using rule 309 (empty -> .)
    STRING_LITERAL  reduce using rule 309 (empty -> .)
    WSTRING_LITERAL reduce using rule 309 (empty -> .)
    LBRACKET        shift and go to state 343
    PERIOD          shift and go to state 344

    initializer_list               shift and go to state 492
    designation_opt                shift and go to state 339
    empty                          shift and go to state 477
    designation                    shift and go to state 340
    designator_list                shift and go to state 341
    designator                     shift and go to state 342

state 462

    (258) cast_expression -> LPAREN type_name RPAREN cast_expression .

    CONDOP          reduce using rule 258 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    TIMES           reduce using rule 258 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVIDE          reduce using rule 258 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MOD             reduce using rule 258 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUS            reduce using rule 258 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUS           reduce using rule 258 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFT          reduce using rule 258 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFT          reduce using rule 258 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LT              reduce using rule 258 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LE              reduce using rule 258 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GE              reduce using rule 258 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GT              reduce using rule 258 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQ              reduce using rule 258 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    NE              reduce using rule 258 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    AND             reduce using rule 258 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OR              reduce using rule 258 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOR             reduce using rule 258 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LAND            reduce using rule 258 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LOR             reduce using rule 258 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COMMA           reduce using rule 258 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    SEMI            reduce using rule 258 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RBRACKET        reduce using rule 258 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COLON           reduce using rule 258 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RPAREN          reduce using rule 258 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQUALS          reduce using rule 258 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOREQUAL        reduce using rule 258 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    TIMESEQUAL      reduce using rule 258 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVEQUAL        reduce using rule 258 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MODEQUAL        reduce using rule 258 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUSEQUAL       reduce using rule 258 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUSEQUAL      reduce using rule 258 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFTEQUAL     reduce using rule 258 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFTEQUAL     reduce using rule 258 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    ANDEQUAL        reduce using rule 258 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OREQUAL         reduce using rule 258 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RBRACE          reduce using rule 258 (cast_expression -> LPAREN type_name RPAREN cast_expression .)


state 463

    (208) selection_statement -> SWITCH LPAREN expression RPAREN . pragmacomp_or_statement
    (79) pragmacomp_or_statement -> . pppragma_directive statement
    (80) pragmacomp_or_statement -> . statement
    (68) pppragma_directive -> . PPPRAGMA
    (69) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (72) statement -> . labeled_statement
    (73) statement -> . expression_statement
    (74) statement -> . compound_statement
    (75) statement -> . selection_statement
    (76) statement -> . iteration_statement
    (77) statement -> . jump_statement
    (78) statement -> . pppragma_directive
    (203) labeled_statement -> . ID COLON pragmacomp_or_statement
    (204) labeled_statement -> . CASE constant_expression COLON pragmacomp_or_statement
    (205) labeled_statement -> . DEFAULT COLON pragmacomp_or_statement
    (218) expression_statement -> . expression_opt SEMI
    (202) compound_statement -> . brace_open block_item_list_opt brace_close
    (206) selection_statement -> . IF LPAREN expression RPAREN pragmacomp_or_statement
    (207) selection_statement -> . IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
    (208) selection_statement -> . SWITCH LPAREN expression RPAREN pragmacomp_or_statement
    (209) iteration_statement -> . WHILE LPAREN expression RPAREN pragmacomp_or_statement
    (210) iteration_statement -> . DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI
    (211) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (212) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (213) jump_statement -> . GOTO ID SEMI
    (214) jump_statement -> . BREAK SEMI
    (215) jump_statement -> . CONTINUE SEMI
    (216) jump_statement -> . RETURN expression SEMI
    (217) jump_statement -> . RETURN SEMI
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (307) brace_open -> . LBRACE
    (309) empty -> .
    (219) expression -> . assignment_expression
    (220) expression -> . expression COMMA assignment_expression
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PPPRAGMA        shift and go to state 14
    ID              shift and go to state 163
    CASE            shift and go to state 164
    DEFAULT         shift and go to state 165
    IF              shift and go to state 167
    SWITCH          shift and go to state 170
    WHILE           shift and go to state 171
    DO              shift and go to state 172
    FOR             shift and go to state 173
    GOTO            shift and go to state 174
    BREAK           shift and go to state 175
    CONTINUE        shift and go to state 176
    RETURN          shift and go to state 177
    LBRACE          shift and go to state 101
    SEMI            reduce using rule 309 (empty -> .)
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    expression                     shift and go to state 169
    pragmacomp_or_statement        shift and go to state 493
    pppragma_directive             shift and go to state 282
    statement                      shift and go to state 283
    labeled_statement              shift and go to state 156
    expression_statement           shift and go to state 157
    compound_statement             shift and go to state 158
    selection_statement            shift and go to state 159
    iteration_statement            shift and go to state 160
    jump_statement                 shift and go to state 161
    expression_opt                 shift and go to state 166
    brace_open                     shift and go to state 106
    empty                          shift and go to state 266
    assignment_expression          shift and go to state 178
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 464

    (209) iteration_statement -> WHILE LPAREN expression RPAREN . pragmacomp_or_statement
    (79) pragmacomp_or_statement -> . pppragma_directive statement
    (80) pragmacomp_or_statement -> . statement
    (68) pppragma_directive -> . PPPRAGMA
    (69) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (72) statement -> . labeled_statement
    (73) statement -> . expression_statement
    (74) statement -> . compound_statement
    (75) statement -> . selection_statement
    (76) statement -> . iteration_statement
    (77) statement -> . jump_statement
    (78) statement -> . pppragma_directive
    (203) labeled_statement -> . ID COLON pragmacomp_or_statement
    (204) labeled_statement -> . CASE constant_expression COLON pragmacomp_or_statement
    (205) labeled_statement -> . DEFAULT COLON pragmacomp_or_statement
    (218) expression_statement -> . expression_opt SEMI
    (202) compound_statement -> . brace_open block_item_list_opt brace_close
    (206) selection_statement -> . IF LPAREN expression RPAREN pragmacomp_or_statement
    (207) selection_statement -> . IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
    (208) selection_statement -> . SWITCH LPAREN expression RPAREN pragmacomp_or_statement
    (209) iteration_statement -> . WHILE LPAREN expression RPAREN pragmacomp_or_statement
    (210) iteration_statement -> . DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI
    (211) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (212) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (213) jump_statement -> . GOTO ID SEMI
    (214) jump_statement -> . BREAK SEMI
    (215) jump_statement -> . CONTINUE SEMI
    (216) jump_statement -> . RETURN expression SEMI
    (217) jump_statement -> . RETURN SEMI
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (307) brace_open -> . LBRACE
    (309) empty -> .
    (219) expression -> . assignment_expression
    (220) expression -> . expression COMMA assignment_expression
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PPPRAGMA        shift and go to state 14
    ID              shift and go to state 163
    CASE            shift and go to state 164
    DEFAULT         shift and go to state 165
    IF              shift and go to state 167
    SWITCH          shift and go to state 170
    WHILE           shift and go to state 171
    DO              shift and go to state 172
    FOR             shift and go to state 173
    GOTO            shift and go to state 174
    BREAK           shift and go to state 175
    CONTINUE        shift and go to state 176
    RETURN          shift and go to state 177
    LBRACE          shift and go to state 101
    SEMI            reduce using rule 309 (empty -> .)
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    expression                     shift and go to state 169
    pragmacomp_or_statement        shift and go to state 494
    pppragma_directive             shift and go to state 282
    statement                      shift and go to state 283
    labeled_statement              shift and go to state 156
    expression_statement           shift and go to state 157
    compound_statement             shift and go to state 158
    selection_statement            shift and go to state 159
    iteration_statement            shift and go to state 160
    jump_statement                 shift and go to state 161
    expression_opt                 shift and go to state 166
    brace_open                     shift and go to state 106
    empty                          shift and go to state 266
    assignment_expression          shift and go to state 178
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 465

    (210) iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN . expression RPAREN SEMI
    (219) expression -> . assignment_expression
    (220) expression -> . expression COMMA assignment_expression
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    expression                     shift and go to state 495
    assignment_expression          shift and go to state 178
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 466

    (211) iteration_statement -> FOR LPAREN expression_opt SEMI . expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (309) empty -> .
    (219) expression -> . assignment_expression
    (220) expression -> . expression COMMA assignment_expression
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    SEMI            reduce using rule 309 (empty -> .)
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    expression_opt                 shift and go to state 496
    empty                          shift and go to state 266
    expression                     shift and go to state 169
    assignment_expression          shift and go to state 178
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 467

    (212) iteration_statement -> FOR LPAREN declaration expression_opt . SEMI expression_opt RPAREN pragmacomp_or_statement

    SEMI            shift and go to state 497


state 468

    (237) conditional_expression -> binary_expression CONDOP expression COLON . conditional_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 271
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    binary_expression              shift and go to state 181
    conditional_expression         shift and go to state 498
    cast_expression                shift and go to state 186
    unary_expression               shift and go to state 270
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 469

    (272) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PERIOD          reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ARROW           reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSPLUS        reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSMINUS      reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    XOREQUAL        reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMESEQUAL      reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVEQUAL        reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MODEQUAL        reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSEQUAL       reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSEQUAL      reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LSHIFTEQUAL     reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RSHIFTEQUAL     reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ANDEQUAL        reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OREQUAL         reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    CONDOP          reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RSHIFT          reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LSHIFT          reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GE              reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NE              reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    XOR             reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LAND            reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LOR             reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COLON           reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 272 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)


state 470

    (273) postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .

    LBRACKET        reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LPAREN          reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PERIOD          reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ARROW           reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUSPLUS        reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUSMINUS      reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQUALS          reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    XOREQUAL        reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    TIMESEQUAL      reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIVEQUAL        reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MODEQUAL        reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUSEQUAL       reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUSEQUAL      reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LSHIFTEQUAL     reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RSHIFTEQUAL     reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ANDEQUAL        reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OREQUAL         reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    CONDOP          reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    TIMES           reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIVIDE          reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MOD             reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUS            reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUS           reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RSHIFT          reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LSHIFT          reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LT              reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LE              reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GE              reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GT              reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQ              reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    NE              reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    AND             reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OR              reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    XOR             reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LAND            reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LOR             reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COMMA           reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    SEMI            reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACKET        reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COLON           reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RPAREN          reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACE          reduce using rule 273 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)


state 471

    (293) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    assignment_expression          shift and go to state 499
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 472

    (281) postfix_expression -> LPAREN type_name RPAREN . brace_open initializer_list brace_close
    (282) postfix_expression -> LPAREN type_name RPAREN . brace_open initializer_list COMMA brace_close
    (307) brace_open -> . LBRACE

    LBRACE          shift and go to state 101

    brace_open                     shift and go to state 461

state 473

    (264) unary_expression -> SIZEOF LPAREN type_name RPAREN .
    (281) postfix_expression -> LPAREN type_name RPAREN . brace_open initializer_list brace_close
    (282) postfix_expression -> LPAREN type_name RPAREN . brace_open initializer_list COMMA brace_close
    (307) brace_open -> . LBRACE

    EQUALS          reduce using rule 264 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOREQUAL        reduce using rule 264 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    TIMESEQUAL      reduce using rule 264 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVEQUAL        reduce using rule 264 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MODEQUAL        reduce using rule 264 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUSEQUAL       reduce using rule 264 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUSEQUAL      reduce using rule 264 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFTEQUAL     reduce using rule 264 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFTEQUAL     reduce using rule 264 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    ANDEQUAL        reduce using rule 264 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OREQUAL         reduce using rule 264 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    CONDOP          reduce using rule 264 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    TIMES           reduce using rule 264 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVIDE          reduce using rule 264 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MOD             reduce using rule 264 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUS            reduce using rule 264 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUS           reduce using rule 264 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFT          reduce using rule 264 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFT          reduce using rule 264 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LT              reduce using rule 264 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LE              reduce using rule 264 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GE              reduce using rule 264 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GT              reduce using rule 264 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    EQ              reduce using rule 264 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    NE              reduce using rule 264 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    AND             reduce using rule 264 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OR              reduce using rule 264 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOR             reduce using rule 264 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LAND            reduce using rule 264 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LOR             reduce using rule 264 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COMMA           reduce using rule 264 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    SEMI            reduce using rule 264 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RBRACKET        reduce using rule 264 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COLON           reduce using rule 264 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 264 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RBRACE          reduce using rule 264 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LBRACE          shift and go to state 101

    brace_open                     shift and go to state 461

state 474

    (288) primary_expression -> OFFSETOF LPAREN type_name COMMA . offsetof_member_designator RPAREN
    (289) offsetof_member_designator -> . identifier
    (290) offsetof_member_designator -> . offsetof_member_designator PERIOD identifier
    (291) offsetof_member_designator -> . offsetof_member_designator LBRACKET expression RBRACKET
    (294) identifier -> . ID

    ID              shift and go to state 127

    offsetof_member_designator     shift and go to state 500
    identifier                     shift and go to state 501

state 475

    (179) initializer -> brace_open initializer_list COMMA brace_close .

    COMMA           reduce using rule 179 (initializer -> brace_open initializer_list COMMA brace_close .)
    SEMI            reduce using rule 179 (initializer -> brace_open initializer_list COMMA brace_close .)
    RBRACE          reduce using rule 179 (initializer -> brace_open initializer_list COMMA brace_close .)


state 476

    (181) initializer_list -> initializer_list COMMA designation_opt . initializer
    (177) initializer -> . assignment_expression
    (178) initializer -> . brace_open initializer_list_opt brace_close
    (179) initializer -> . brace_open initializer_list COMMA brace_close
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (307) brace_open -> . LBRACE
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LBRACE          shift and go to state 101
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    initializer                    shift and go to state 502
    assignment_expression          shift and go to state 214
    brace_open                     shift and go to state 215
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 477

    (11) designation_opt -> empty .

    LBRACE          reduce using rule 11 (designation_opt -> empty .)
    PLUSPLUS        reduce using rule 11 (designation_opt -> empty .)
    MINUSMINUS      reduce using rule 11 (designation_opt -> empty .)
    SIZEOF          reduce using rule 11 (designation_opt -> empty .)
    LPAREN          reduce using rule 11 (designation_opt -> empty .)
    AND             reduce using rule 11 (designation_opt -> empty .)
    TIMES           reduce using rule 11 (designation_opt -> empty .)
    PLUS            reduce using rule 11 (designation_opt -> empty .)
    MINUS           reduce using rule 11 (designation_opt -> empty .)
    NOT             reduce using rule 11 (designation_opt -> empty .)
    LNOT            reduce using rule 11 (designation_opt -> empty .)
    OFFSETOF        reduce using rule 11 (designation_opt -> empty .)
    ID              reduce using rule 11 (designation_opt -> empty .)
    INT_CONST_DEC   reduce using rule 11 (designation_opt -> empty .)
    INT_CONST_OCT   reduce using rule 11 (designation_opt -> empty .)
    INT_CONST_HEX   reduce using rule 11 (designation_opt -> empty .)
    INT_CONST_BIN   reduce using rule 11 (designation_opt -> empty .)
    FLOAT_CONST     reduce using rule 11 (designation_opt -> empty .)
    HEX_FLOAT_CONST reduce using rule 11 (designation_opt -> empty .)
    CHAR_CONST      reduce using rule 11 (designation_opt -> empty .)
    WCHAR_CONST     reduce using rule 11 (designation_opt -> empty .)
    STRING_LITERAL  reduce using rule 11 (designation_opt -> empty .)
    WSTRING_LITERAL reduce using rule 11 (designation_opt -> empty .)


state 478

    (185) designator -> LBRACKET constant_expression RBRACKET .

    EQUALS          reduce using rule 185 (designator -> LBRACKET constant_expression RBRACKET .)
    LBRACKET        reduce using rule 185 (designator -> LBRACKET constant_expression RBRACKET .)
    PERIOD          reduce using rule 185 (designator -> LBRACKET constant_expression RBRACKET .)


state 479

    (40) direct_typeid_declarator -> direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .

    LBRACKET        reduce using rule 40 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    LPAREN          reduce using rule 40 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    EQUALS          reduce using rule 40 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    COMMA           reduce using rule 40 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    SEMI            reduce using rule 40 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    RPAREN          reduce using rule 40 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    COLON           reduce using rule 40 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)


state 480

    (41) direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .

    LBRACKET        reduce using rule 41 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    LPAREN          reduce using rule 41 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    EQUALS          reduce using rule 41 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    COMMA           reduce using rule 41 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    SEMI            reduce using rule 41 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    RPAREN          reduce using rule 41 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    COLON           reduce using rule 41 (direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)


state 481

    (46) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt . RBRACKET

    RBRACKET        shift and go to state 503


state 482

    (49) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt TIMES . RBRACKET
    (266) unary_operator -> TIMES .

    RBRACKET        shift and go to state 504
    LPAREN          reduce using rule 266 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 266 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 266 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 266 (unary_operator -> TIMES .)
    AND             reduce using rule 266 (unary_operator -> TIMES .)
    TIMES           reduce using rule 266 (unary_operator -> TIMES .)
    PLUS            reduce using rule 266 (unary_operator -> TIMES .)
    MINUS           reduce using rule 266 (unary_operator -> TIMES .)
    NOT             reduce using rule 266 (unary_operator -> TIMES .)
    LNOT            reduce using rule 266 (unary_operator -> TIMES .)
    OFFSETOF        reduce using rule 266 (unary_operator -> TIMES .)
    ID              reduce using rule 266 (unary_operator -> TIMES .)
    INT_CONST_DEC   reduce using rule 266 (unary_operator -> TIMES .)
    INT_CONST_OCT   reduce using rule 266 (unary_operator -> TIMES .)
    INT_CONST_HEX   reduce using rule 266 (unary_operator -> TIMES .)
    INT_CONST_BIN   reduce using rule 266 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 266 (unary_operator -> TIMES .)
    HEX_FLOAT_CONST reduce using rule 266 (unary_operator -> TIMES .)
    CHAR_CONST      reduce using rule 266 (unary_operator -> TIMES .)
    WCHAR_CONST     reduce using rule 266 (unary_operator -> TIMES .)
    STRING_LITERAL  reduce using rule 266 (unary_operator -> TIMES .)
    WSTRING_LITERAL reduce using rule 266 (unary_operator -> TIMES .)


state 483

    (47) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET STATIC type_qualifier_list_opt . assignment_expression RBRACKET
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    assignment_expression          shift and go to state 505
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 484

    (48) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list STATIC . assignment_expression RBRACKET
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    assignment_expression          shift and go to state 506
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 485

    (50) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN parameter_type_list RPAREN .

    LBRACKET        reduce using rule 50 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN parameter_type_list RPAREN .)
    LPAREN          reduce using rule 50 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 50 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 50 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN parameter_type_list RPAREN .)


state 486

    (51) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN identifier_list_opt RPAREN .

    LBRACKET        reduce using rule 51 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN identifier_list_opt RPAREN .)
    LPAREN          reduce using rule 51 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN identifier_list_opt RPAREN .)
    COMMA           reduce using rule 51 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN identifier_list_opt RPAREN .)
    RPAREN          reduce using rule 51 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN identifier_list_opt RPAREN .)


state 487

    (192) direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET .

    LBRACKET        reduce using rule 192 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET .)
    LPAREN          reduce using rule 192 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET .)
    COMMA           reduce using rule 192 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET .)
    RPAREN          reduce using rule 192 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET .)


state 488

    (194) direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .

    LBRACKET        reduce using rule 194 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .)
    LPAREN          reduce using rule 194 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .)
    COMMA           reduce using rule 194 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .)
    RPAREN          reduce using rule 194 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .)


state 489

    (196) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .

    LBRACKET        reduce using rule 196 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .)
    LPAREN          reduce using rule 196 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .)
    COMMA           reduce using rule 196 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .)
    RPAREN          reduce using rule 196 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .)


state 490

    (206) selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .

    ID              reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    CASE            reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    DEFAULT         reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    IF              reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    SWITCH          reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    WHILE           reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    DO              reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    FOR             reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    GOTO            reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    BREAK           reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    CONTINUE        reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    RETURN          reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    PPPRAGMA        reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    LBRACE          reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    CONST           reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    RESTRICT        reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    VOLATILE        reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    AUTO            reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    REGISTER        reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    STATIC          reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    EXTERN          reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    TYPEDEF         reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    INLINE          reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    TYPEID          reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    ENUM            reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    VOID            reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    _BOOL           reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    CHAR            reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    SHORT           reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    INT             reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    LONG            reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    FLOAT           reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    DOUBLE          reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    _COMPLEX        reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    SIGNED          reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    UNSIGNED        reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    __INT128        reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    STRUCT          reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    UNION           reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    PLUSPLUS        reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    MINUSMINUS      reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    SIZEOF          reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    LPAREN          reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    AND             reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    TIMES           reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    PLUS            reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    MINUS           reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    NOT             reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    LNOT            reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    OFFSETOF        reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_DEC   reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_OCT   reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_HEX   reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_BIN   reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    FLOAT_CONST     reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    HEX_FLOAT_CONST reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    CHAR_CONST      reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    WCHAR_CONST     reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    STRING_LITERAL  reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    WSTRING_LITERAL reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    SEMI            reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    RBRACE          reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)
    ELSE            reduce using rule 206 (selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement .)


state 491

    (207) selection_statement -> IF LPAREN expression RPAREN statement . ELSE pragmacomp_or_statement
    (80) pragmacomp_or_statement -> statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 507
    ID              reduce using rule 80 (pragmacomp_or_statement -> statement .)
    CASE            reduce using rule 80 (pragmacomp_or_statement -> statement .)
    DEFAULT         reduce using rule 80 (pragmacomp_or_statement -> statement .)
    IF              reduce using rule 80 (pragmacomp_or_statement -> statement .)
    SWITCH          reduce using rule 80 (pragmacomp_or_statement -> statement .)
    WHILE           reduce using rule 80 (pragmacomp_or_statement -> statement .)
    DO              reduce using rule 80 (pragmacomp_or_statement -> statement .)
    FOR             reduce using rule 80 (pragmacomp_or_statement -> statement .)
    GOTO            reduce using rule 80 (pragmacomp_or_statement -> statement .)
    BREAK           reduce using rule 80 (pragmacomp_or_statement -> statement .)
    CONTINUE        reduce using rule 80 (pragmacomp_or_statement -> statement .)
    RETURN          reduce using rule 80 (pragmacomp_or_statement -> statement .)
    PPPRAGMA        reduce using rule 80 (pragmacomp_or_statement -> statement .)
    LBRACE          reduce using rule 80 (pragmacomp_or_statement -> statement .)
    CONST           reduce using rule 80 (pragmacomp_or_statement -> statement .)
    RESTRICT        reduce using rule 80 (pragmacomp_or_statement -> statement .)
    VOLATILE        reduce using rule 80 (pragmacomp_or_statement -> statement .)
    AUTO            reduce using rule 80 (pragmacomp_or_statement -> statement .)
    REGISTER        reduce using rule 80 (pragmacomp_or_statement -> statement .)
    STATIC          reduce using rule 80 (pragmacomp_or_statement -> statement .)
    EXTERN          reduce using rule 80 (pragmacomp_or_statement -> statement .)
    TYPEDEF         reduce using rule 80 (pragmacomp_or_statement -> statement .)
    INLINE          reduce using rule 80 (pragmacomp_or_statement -> statement .)
    TYPEID          reduce using rule 80 (pragmacomp_or_statement -> statement .)
    ENUM            reduce using rule 80 (pragmacomp_or_statement -> statement .)
    VOID            reduce using rule 80 (pragmacomp_or_statement -> statement .)
    _BOOL           reduce using rule 80 (pragmacomp_or_statement -> statement .)
    CHAR            reduce using rule 80 (pragmacomp_or_statement -> statement .)
    SHORT           reduce using rule 80 (pragmacomp_or_statement -> statement .)
    INT             reduce using rule 80 (pragmacomp_or_statement -> statement .)
    LONG            reduce using rule 80 (pragmacomp_or_statement -> statement .)
    FLOAT           reduce using rule 80 (pragmacomp_or_statement -> statement .)
    DOUBLE          reduce using rule 80 (pragmacomp_or_statement -> statement .)
    _COMPLEX        reduce using rule 80 (pragmacomp_or_statement -> statement .)
    SIGNED          reduce using rule 80 (pragmacomp_or_statement -> statement .)
    UNSIGNED        reduce using rule 80 (pragmacomp_or_statement -> statement .)
    __INT128        reduce using rule 80 (pragmacomp_or_statement -> statement .)
    STRUCT          reduce using rule 80 (pragmacomp_or_statement -> statement .)
    UNION           reduce using rule 80 (pragmacomp_or_statement -> statement .)
    PLUSPLUS        reduce using rule 80 (pragmacomp_or_statement -> statement .)
    MINUSMINUS      reduce using rule 80 (pragmacomp_or_statement -> statement .)
    SIZEOF          reduce using rule 80 (pragmacomp_or_statement -> statement .)
    LPAREN          reduce using rule 80 (pragmacomp_or_statement -> statement .)
    AND             reduce using rule 80 (pragmacomp_or_statement -> statement .)
    TIMES           reduce using rule 80 (pragmacomp_or_statement -> statement .)
    PLUS            reduce using rule 80 (pragmacomp_or_statement -> statement .)
    MINUS           reduce using rule 80 (pragmacomp_or_statement -> statement .)
    NOT             reduce using rule 80 (pragmacomp_or_statement -> statement .)
    LNOT            reduce using rule 80 (pragmacomp_or_statement -> statement .)
    OFFSETOF        reduce using rule 80 (pragmacomp_or_statement -> statement .)
    INT_CONST_DEC   reduce using rule 80 (pragmacomp_or_statement -> statement .)
    INT_CONST_OCT   reduce using rule 80 (pragmacomp_or_statement -> statement .)
    INT_CONST_HEX   reduce using rule 80 (pragmacomp_or_statement -> statement .)
    INT_CONST_BIN   reduce using rule 80 (pragmacomp_or_statement -> statement .)
    FLOAT_CONST     reduce using rule 80 (pragmacomp_or_statement -> statement .)
    HEX_FLOAT_CONST reduce using rule 80 (pragmacomp_or_statement -> statement .)
    CHAR_CONST      reduce using rule 80 (pragmacomp_or_statement -> statement .)
    WCHAR_CONST     reduce using rule 80 (pragmacomp_or_statement -> statement .)
    STRING_LITERAL  reduce using rule 80 (pragmacomp_or_statement -> statement .)
    WSTRING_LITERAL reduce using rule 80 (pragmacomp_or_statement -> statement .)
    SEMI            reduce using rule 80 (pragmacomp_or_statement -> statement .)
    RBRACE          reduce using rule 80 (pragmacomp_or_statement -> statement .)

  ! ELSE            [ reduce using rule 80 (pragmacomp_or_statement -> statement .) ]


state 492

    (281) postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list . brace_close
    (282) postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list . COMMA brace_close
    (181) initializer_list -> initializer_list . COMMA designation_opt initializer
    (308) brace_close -> . RBRACE

    COMMA           shift and go to state 509
    RBRACE          shift and go to state 144

    brace_close                    shift and go to state 508

state 493

    (208) selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .

    ID              reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    CASE            reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    DEFAULT         reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    IF              reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    SWITCH          reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    WHILE           reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    DO              reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    FOR             reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    GOTO            reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    BREAK           reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    CONTINUE        reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    RETURN          reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    PPPRAGMA        reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    LBRACE          reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    CONST           reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    RESTRICT        reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    VOLATILE        reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    AUTO            reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    REGISTER        reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    STATIC          reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    EXTERN          reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    TYPEDEF         reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    INLINE          reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    TYPEID          reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    ENUM            reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    VOID            reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    _BOOL           reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    CHAR            reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    SHORT           reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    INT             reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    LONG            reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    FLOAT           reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    DOUBLE          reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    _COMPLEX        reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    SIGNED          reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    UNSIGNED        reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    __INT128        reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    STRUCT          reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    UNION           reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    PLUSPLUS        reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    MINUSMINUS      reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    SIZEOF          reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    LPAREN          reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    AND             reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    TIMES           reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    PLUS            reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    MINUS           reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    NOT             reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    LNOT            reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    OFFSETOF        reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_DEC   reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_OCT   reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_HEX   reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_BIN   reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    FLOAT_CONST     reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    HEX_FLOAT_CONST reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    CHAR_CONST      reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    WCHAR_CONST     reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    STRING_LITERAL  reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    WSTRING_LITERAL reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    SEMI            reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    RBRACE          reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)
    ELSE            reduce using rule 208 (selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement .)


state 494

    (209) iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .

    ID              reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    CASE            reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    DEFAULT         reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    IF              reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    SWITCH          reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    WHILE           reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    DO              reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    FOR             reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    GOTO            reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    BREAK           reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    CONTINUE        reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    RETURN          reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    PPPRAGMA        reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    LBRACE          reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    CONST           reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    RESTRICT        reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    VOLATILE        reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    AUTO            reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    REGISTER        reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    STATIC          reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    EXTERN          reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    TYPEDEF         reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    INLINE          reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    TYPEID          reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    ENUM            reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    VOID            reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    _BOOL           reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    CHAR            reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    SHORT           reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    INT             reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    LONG            reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    FLOAT           reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    DOUBLE          reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    _COMPLEX        reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    SIGNED          reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    UNSIGNED        reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    __INT128        reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    STRUCT          reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    UNION           reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    PLUSPLUS        reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    MINUSMINUS      reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    SIZEOF          reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    LPAREN          reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    AND             reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    TIMES           reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    PLUS            reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    MINUS           reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    NOT             reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    LNOT            reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    OFFSETOF        reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_DEC   reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_OCT   reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_HEX   reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    INT_CONST_BIN   reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    FLOAT_CONST     reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    HEX_FLOAT_CONST reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    CHAR_CONST      reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    WCHAR_CONST     reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    STRING_LITERAL  reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    WSTRING_LITERAL reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    SEMI            reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    RBRACE          reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)
    ELSE            reduce using rule 209 (iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement .)


state 495

    (210) iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression . RPAREN SEMI
    (220) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 510
    COMMA           shift and go to state 278


state 496

    (211) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt . SEMI expression_opt RPAREN pragmacomp_or_statement

    SEMI            shift and go to state 511


state 497

    (212) iteration_statement -> FOR LPAREN declaration expression_opt SEMI . expression_opt RPAREN pragmacomp_or_statement
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (309) empty -> .
    (219) expression -> . assignment_expression
    (220) expression -> . expression COMMA assignment_expression
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    RPAREN          reduce using rule 309 (empty -> .)
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    expression_opt                 shift and go to state 512
    empty                          shift and go to state 266
    expression                     shift and go to state 169
    assignment_expression          shift and go to state 178
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 498

    (237) conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .

    COMMA           reduce using rule 237 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)
    SEMI            reduce using rule 237 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)
    RBRACKET        reduce using rule 237 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)
    COLON           reduce using rule 237 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)
    RPAREN          reduce using rule 237 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)
    RBRACE          reduce using rule 237 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)


state 499

    (293) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    RPAREN          reduce using rule 293 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 293 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 500

    (288) primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator . RPAREN
    (290) offsetof_member_designator -> offsetof_member_designator . PERIOD identifier
    (291) offsetof_member_designator -> offsetof_member_designator . LBRACKET expression RBRACKET

    RPAREN          shift and go to state 513
    PERIOD          shift and go to state 514
    LBRACKET        shift and go to state 515


state 501

    (289) offsetof_member_designator -> identifier .

    RPAREN          reduce using rule 289 (offsetof_member_designator -> identifier .)
    PERIOD          reduce using rule 289 (offsetof_member_designator -> identifier .)
    LBRACKET        reduce using rule 289 (offsetof_member_designator -> identifier .)


state 502

    (181) initializer_list -> initializer_list COMMA designation_opt initializer .

    COMMA           reduce using rule 181 (initializer_list -> initializer_list COMMA designation_opt initializer .)
    RBRACE          reduce using rule 181 (initializer_list -> initializer_list COMMA designation_opt initializer .)


state 503

    (46) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .

    LBRACKET        reduce using rule 46 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    LPAREN          reduce using rule 46 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    COMMA           reduce using rule 46 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    RPAREN          reduce using rule 46 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)


state 504

    (49) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .

    LBRACKET        reduce using rule 49 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    LPAREN          reduce using rule 49 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    COMMA           reduce using rule 49 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    RPAREN          reduce using rule 49 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)


state 505

    (47) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression . RBRACKET

    RBRACKET        shift and go to state 516


state 506

    (48) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list STATIC assignment_expression . RBRACKET

    RBRACKET        shift and go to state 517


state 507

    (207) selection_statement -> IF LPAREN expression RPAREN statement ELSE . pragmacomp_or_statement
    (79) pragmacomp_or_statement -> . pppragma_directive statement
    (80) pragmacomp_or_statement -> . statement
    (68) pppragma_directive -> . PPPRAGMA
    (69) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (72) statement -> . labeled_statement
    (73) statement -> . expression_statement
    (74) statement -> . compound_statement
    (75) statement -> . selection_statement
    (76) statement -> . iteration_statement
    (77) statement -> . jump_statement
    (78) statement -> . pppragma_directive
    (203) labeled_statement -> . ID COLON pragmacomp_or_statement
    (204) labeled_statement -> . CASE constant_expression COLON pragmacomp_or_statement
    (205) labeled_statement -> . DEFAULT COLON pragmacomp_or_statement
    (218) expression_statement -> . expression_opt SEMI
    (202) compound_statement -> . brace_open block_item_list_opt brace_close
    (206) selection_statement -> . IF LPAREN expression RPAREN pragmacomp_or_statement
    (207) selection_statement -> . IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
    (208) selection_statement -> . SWITCH LPAREN expression RPAREN pragmacomp_or_statement
    (209) iteration_statement -> . WHILE LPAREN expression RPAREN pragmacomp_or_statement
    (210) iteration_statement -> . DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI
    (211) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (212) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (213) jump_statement -> . GOTO ID SEMI
    (214) jump_statement -> . BREAK SEMI
    (215) jump_statement -> . CONTINUE SEMI
    (216) jump_statement -> . RETURN expression SEMI
    (217) jump_statement -> . RETURN SEMI
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (307) brace_open -> . LBRACE
    (309) empty -> .
    (219) expression -> . assignment_expression
    (220) expression -> . expression COMMA assignment_expression
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PPPRAGMA        shift and go to state 14
    ID              shift and go to state 163
    CASE            shift and go to state 164
    DEFAULT         shift and go to state 165
    IF              shift and go to state 167
    SWITCH          shift and go to state 170
    WHILE           shift and go to state 171
    DO              shift and go to state 172
    FOR             shift and go to state 173
    GOTO            shift and go to state 174
    BREAK           shift and go to state 175
    CONTINUE        shift and go to state 176
    RETURN          shift and go to state 177
    LBRACE          shift and go to state 101
    SEMI            reduce using rule 309 (empty -> .)
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    expression                     shift and go to state 169
    statement                      shift and go to state 283
    pragmacomp_or_statement        shift and go to state 518
    pppragma_directive             shift and go to state 282
    labeled_statement              shift and go to state 156
    expression_statement           shift and go to state 157
    compound_statement             shift and go to state 158
    selection_statement            shift and go to state 159
    iteration_statement            shift and go to state 160
    jump_statement                 shift and go to state 161
    expression_opt                 shift and go to state 166
    brace_open                     shift and go to state 106
    empty                          shift and go to state 266
    assignment_expression          shift and go to state 178
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 508

    (281) postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .

    LBRACKET        reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    LPAREN          reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    PERIOD          reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    ARROW           reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    PLUSPLUS        reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    MINUSMINUS      reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    EQUALS          reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    XOREQUAL        reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    TIMESEQUAL      reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    DIVEQUAL        reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    MODEQUAL        reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    PLUSEQUAL       reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    MINUSEQUAL      reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    LSHIFTEQUAL     reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    RSHIFTEQUAL     reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    ANDEQUAL        reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    OREQUAL         reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    CONDOP          reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    TIMES           reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    DIVIDE          reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    MOD             reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    PLUS            reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    MINUS           reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    RSHIFT          reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    LSHIFT          reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    LT              reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    LE              reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    GE              reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    GT              reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    EQ              reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    NE              reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    AND             reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    OR              reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    XOR             reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    LAND            reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    LOR             reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    COMMA           reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    SEMI            reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    RBRACKET        reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    COLON           reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    RPAREN          reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    RBRACE          reduce using rule 281 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)


state 509

    (282) postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA . brace_close
    (181) initializer_list -> initializer_list COMMA . designation_opt initializer
    (308) brace_close -> . RBRACE
    (11) designation_opt -> . empty
    (12) designation_opt -> . designation
    (309) empty -> .
    (182) designation -> . designator_list EQUALS
    (183) designator_list -> . designator
    (184) designator_list -> . designator_list designator
    (185) designator -> . LBRACKET constant_expression RBRACKET
    (186) designator -> . PERIOD identifier

    RBRACE          shift and go to state 144
    LBRACE          reduce using rule 309 (empty -> .)
    PLUSPLUS        reduce using rule 309 (empty -> .)
    MINUSMINUS      reduce using rule 309 (empty -> .)
    SIZEOF          reduce using rule 309 (empty -> .)
    LPAREN          reduce using rule 309 (empty -> .)
    AND             reduce using rule 309 (empty -> .)
    TIMES           reduce using rule 309 (empty -> .)
    PLUS            reduce using rule 309 (empty -> .)
    MINUS           reduce using rule 309 (empty -> .)
    NOT             reduce using rule 309 (empty -> .)
    LNOT            reduce using rule 309 (empty -> .)
    OFFSETOF        reduce using rule 309 (empty -> .)
    ID              reduce using rule 309 (empty -> .)
    INT_CONST_DEC   reduce using rule 309 (empty -> .)
    INT_CONST_OCT   reduce using rule 309 (empty -> .)
    INT_CONST_HEX   reduce using rule 309 (empty -> .)
    INT_CONST_BIN   reduce using rule 309 (empty -> .)
    FLOAT_CONST     reduce using rule 309 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 309 (empty -> .)
    CHAR_CONST      reduce using rule 309 (empty -> .)
    WCHAR_CONST     reduce using rule 309 (empty -> .)
    STRING_LITERAL  reduce using rule 309 (empty -> .)
    WSTRING_LITERAL reduce using rule 309 (empty -> .)
    LBRACKET        shift and go to state 343
    PERIOD          shift and go to state 344

    brace_close                    shift and go to state 519
    designation_opt                shift and go to state 476
    empty                          shift and go to state 477
    designation                    shift and go to state 340
    designator_list                shift and go to state 341
    designator                     shift and go to state 342

state 510

    (210) iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN . SEMI

    SEMI            shift and go to state 520


state 511

    (211) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI . expression_opt RPAREN pragmacomp_or_statement
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (309) empty -> .
    (219) expression -> . assignment_expression
    (220) expression -> . expression COMMA assignment_expression
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    RPAREN          reduce using rule 309 (empty -> .)
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    expression_opt                 shift and go to state 521
    empty                          shift and go to state 266
    expression                     shift and go to state 169
    assignment_expression          shift and go to state 178
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 512

    (212) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt . RPAREN pragmacomp_or_statement

    RPAREN          shift and go to state 522


state 513

    (288) primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .

    LBRACKET        reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    LPAREN          reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    PERIOD          reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    ARROW           reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    PLUSPLUS        reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    MINUSMINUS      reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    EQUALS          reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    XOREQUAL        reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    TIMESEQUAL      reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    DIVEQUAL        reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    MODEQUAL        reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    PLUSEQUAL       reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    MINUSEQUAL      reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    LSHIFTEQUAL     reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    RSHIFTEQUAL     reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    ANDEQUAL        reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    OREQUAL         reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    CONDOP          reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    TIMES           reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    DIVIDE          reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    MOD             reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    PLUS            reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    MINUS           reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    RSHIFT          reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    LSHIFT          reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    LT              reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    LE              reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    GE              reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    GT              reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    EQ              reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    NE              reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    AND             reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    OR              reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    XOR             reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    LAND            reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    LOR             reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    COMMA           reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    SEMI            reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    RBRACKET        reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    COLON           reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    RPAREN          reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)
    RBRACE          reduce using rule 288 (primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN .)


state 514

    (290) offsetof_member_designator -> offsetof_member_designator PERIOD . identifier
    (294) identifier -> . ID

    ID              shift and go to state 127

    identifier                     shift and go to state 523

state 515

    (291) offsetof_member_designator -> offsetof_member_designator LBRACKET . expression RBRACKET
    (219) expression -> . assignment_expression
    (220) expression -> . expression COMMA assignment_expression
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    ID              shift and go to state 127
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    expression                     shift and go to state 524
    assignment_expression          shift and go to state 178
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 516

    (47) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .

    LBRACKET        reduce using rule 47 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    LPAREN          reduce using rule 47 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    COMMA           reduce using rule 47 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    RPAREN          reduce using rule 47 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)


state 517

    (48) direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .

    LBRACKET        reduce using rule 48 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    LPAREN          reduce using rule 48 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    COMMA           reduce using rule 48 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    RPAREN          reduce using rule 48 (direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)


state 518

    (207) selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .

    ID              reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    CASE            reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    DEFAULT         reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    IF              reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    SWITCH          reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    WHILE           reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    DO              reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    FOR             reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    GOTO            reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    BREAK           reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    CONTINUE        reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    RETURN          reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    PPPRAGMA        reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    LBRACE          reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    CONST           reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    RESTRICT        reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    VOLATILE        reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    AUTO            reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    REGISTER        reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    STATIC          reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    EXTERN          reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    TYPEDEF         reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    INLINE          reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    TYPEID          reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    ENUM            reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    VOID            reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    _BOOL           reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    CHAR            reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    SHORT           reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    INT             reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    LONG            reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    FLOAT           reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    DOUBLE          reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    _COMPLEX        reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    SIGNED          reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    UNSIGNED        reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    __INT128        reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    STRUCT          reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    UNION           reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    PLUSPLUS        reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    MINUSMINUS      reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    SIZEOF          reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    LPAREN          reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    AND             reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    TIMES           reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    PLUS            reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    MINUS           reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    NOT             reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    LNOT            reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    OFFSETOF        reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    INT_CONST_DEC   reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    INT_CONST_OCT   reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    INT_CONST_HEX   reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    INT_CONST_BIN   reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    FLOAT_CONST     reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    HEX_FLOAT_CONST reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    CHAR_CONST      reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    WCHAR_CONST     reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    STRING_LITERAL  reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    WSTRING_LITERAL reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    SEMI            reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    RBRACE          reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)
    ELSE            reduce using rule 207 (selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement .)


state 519

    (282) postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .

    LBRACKET        reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    LPAREN          reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    PERIOD          reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    ARROW           reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    PLUSPLUS        reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    MINUSMINUS      reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    EQUALS          reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    XOREQUAL        reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    TIMESEQUAL      reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    DIVEQUAL        reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    MODEQUAL        reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    PLUSEQUAL       reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    MINUSEQUAL      reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    LSHIFTEQUAL     reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    RSHIFTEQUAL     reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    ANDEQUAL        reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    OREQUAL         reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    CONDOP          reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    TIMES           reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    DIVIDE          reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    MOD             reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    PLUS            reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    MINUS           reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    RSHIFT          reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    LSHIFT          reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    LT              reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    LE              reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    GE              reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    GT              reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    EQ              reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    NE              reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    AND             reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    OR              reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    XOR             reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    LAND            reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    LOR             reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    COMMA           reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    SEMI            reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    RBRACKET        reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    COLON           reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    RPAREN          reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    RBRACE          reduce using rule 282 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)


state 520

    (210) iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .

    ID              reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    CASE            reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    DEFAULT         reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    IF              reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    SWITCH          reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    WHILE           reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    DO              reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    FOR             reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    GOTO            reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    BREAK           reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    CONTINUE        reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    RETURN          reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    PPPRAGMA        reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    LBRACE          reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    CONST           reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    RESTRICT        reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    VOLATILE        reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    AUTO            reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    REGISTER        reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    STATIC          reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    EXTERN          reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    TYPEDEF         reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    INLINE          reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    TYPEID          reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    ENUM            reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    VOID            reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    _BOOL           reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    CHAR            reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    SHORT           reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    INT             reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    LONG            reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    FLOAT           reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    DOUBLE          reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    _COMPLEX        reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    SIGNED          reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    UNSIGNED        reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    __INT128        reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    STRUCT          reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    UNION           reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    PLUSPLUS        reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    MINUSMINUS      reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    SIZEOF          reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    LPAREN          reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    AND             reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    TIMES           reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    PLUS            reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    MINUS           reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    NOT             reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    LNOT            reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    OFFSETOF        reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    INT_CONST_DEC   reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    INT_CONST_OCT   reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    INT_CONST_HEX   reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    INT_CONST_BIN   reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    FLOAT_CONST     reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    HEX_FLOAT_CONST reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    CHAR_CONST      reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    WCHAR_CONST     reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    STRING_LITERAL  reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    WSTRING_LITERAL reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    SEMI            reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    RBRACE          reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)
    ELSE            reduce using rule 210 (iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI .)


state 521

    (211) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt . RPAREN pragmacomp_or_statement

    RPAREN          shift and go to state 525


state 522

    (212) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN . pragmacomp_or_statement
    (79) pragmacomp_or_statement -> . pppragma_directive statement
    (80) pragmacomp_or_statement -> . statement
    (68) pppragma_directive -> . PPPRAGMA
    (69) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (72) statement -> . labeled_statement
    (73) statement -> . expression_statement
    (74) statement -> . compound_statement
    (75) statement -> . selection_statement
    (76) statement -> . iteration_statement
    (77) statement -> . jump_statement
    (78) statement -> . pppragma_directive
    (203) labeled_statement -> . ID COLON pragmacomp_or_statement
    (204) labeled_statement -> . CASE constant_expression COLON pragmacomp_or_statement
    (205) labeled_statement -> . DEFAULT COLON pragmacomp_or_statement
    (218) expression_statement -> . expression_opt SEMI
    (202) compound_statement -> . brace_open block_item_list_opt brace_close
    (206) selection_statement -> . IF LPAREN expression RPAREN pragmacomp_or_statement
    (207) selection_statement -> . IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
    (208) selection_statement -> . SWITCH LPAREN expression RPAREN pragmacomp_or_statement
    (209) iteration_statement -> . WHILE LPAREN expression RPAREN pragmacomp_or_statement
    (210) iteration_statement -> . DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI
    (211) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (212) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (213) jump_statement -> . GOTO ID SEMI
    (214) jump_statement -> . BREAK SEMI
    (215) jump_statement -> . CONTINUE SEMI
    (216) jump_statement -> . RETURN expression SEMI
    (217) jump_statement -> . RETURN SEMI
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (307) brace_open -> . LBRACE
    (309) empty -> .
    (219) expression -> . assignment_expression
    (220) expression -> . expression COMMA assignment_expression
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PPPRAGMA        shift and go to state 14
    ID              shift and go to state 163
    CASE            shift and go to state 164
    DEFAULT         shift and go to state 165
    IF              shift and go to state 167
    SWITCH          shift and go to state 170
    WHILE           shift and go to state 171
    DO              shift and go to state 172
    FOR             shift and go to state 173
    GOTO            shift and go to state 174
    BREAK           shift and go to state 175
    CONTINUE        shift and go to state 176
    RETURN          shift and go to state 177
    LBRACE          shift and go to state 101
    SEMI            reduce using rule 309 (empty -> .)
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    expression_opt                 shift and go to state 166
    pragmacomp_or_statement        shift and go to state 526
    pppragma_directive             shift and go to state 282
    statement                      shift and go to state 283
    labeled_statement              shift and go to state 156
    expression_statement           shift and go to state 157
    compound_statement             shift and go to state 158
    selection_statement            shift and go to state 159
    iteration_statement            shift and go to state 160
    jump_statement                 shift and go to state 161
    brace_open                     shift and go to state 106
    expression                     shift and go to state 169
    empty                          shift and go to state 266
    assignment_expression          shift and go to state 178
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 523

    (290) offsetof_member_designator -> offsetof_member_designator PERIOD identifier .

    RPAREN          reduce using rule 290 (offsetof_member_designator -> offsetof_member_designator PERIOD identifier .)
    PERIOD          reduce using rule 290 (offsetof_member_designator -> offsetof_member_designator PERIOD identifier .)
    LBRACKET        reduce using rule 290 (offsetof_member_designator -> offsetof_member_designator PERIOD identifier .)


state 524

    (291) offsetof_member_designator -> offsetof_member_designator LBRACKET expression . RBRACKET
    (220) expression -> expression . COMMA assignment_expression

    RBRACKET        shift and go to state 527
    COMMA           shift and go to state 278


state 525

    (211) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN . pragmacomp_or_statement
    (79) pragmacomp_or_statement -> . pppragma_directive statement
    (80) pragmacomp_or_statement -> . statement
    (68) pppragma_directive -> . PPPRAGMA
    (69) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (72) statement -> . labeled_statement
    (73) statement -> . expression_statement
    (74) statement -> . compound_statement
    (75) statement -> . selection_statement
    (76) statement -> . iteration_statement
    (77) statement -> . jump_statement
    (78) statement -> . pppragma_directive
    (203) labeled_statement -> . ID COLON pragmacomp_or_statement
    (204) labeled_statement -> . CASE constant_expression COLON pragmacomp_or_statement
    (205) labeled_statement -> . DEFAULT COLON pragmacomp_or_statement
    (218) expression_statement -> . expression_opt SEMI
    (202) compound_statement -> . brace_open block_item_list_opt brace_close
    (206) selection_statement -> . IF LPAREN expression RPAREN pragmacomp_or_statement
    (207) selection_statement -> . IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
    (208) selection_statement -> . SWITCH LPAREN expression RPAREN pragmacomp_or_statement
    (209) iteration_statement -> . WHILE LPAREN expression RPAREN pragmacomp_or_statement
    (210) iteration_statement -> . DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI
    (211) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (212) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
    (213) jump_statement -> . GOTO ID SEMI
    (214) jump_statement -> . BREAK SEMI
    (215) jump_statement -> . CONTINUE SEMI
    (216) jump_statement -> . RETURN expression SEMI
    (217) jump_statement -> . RETURN SEMI
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (307) brace_open -> . LBRACE
    (309) empty -> .
    (219) expression -> . assignment_expression
    (220) expression -> . expression COMMA assignment_expression
    (222) assignment_expression -> . conditional_expression
    (223) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (236) conditional_expression -> . binary_expression
    (237) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (259) unary_expression -> . postfix_expression
    (260) unary_expression -> . PLUSPLUS unary_expression
    (261) unary_expression -> . MINUSMINUS unary_expression
    (262) unary_expression -> . unary_operator cast_expression
    (263) unary_expression -> . SIZEOF unary_expression
    (264) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (238) binary_expression -> . cast_expression
    (239) binary_expression -> . binary_expression TIMES binary_expression
    (240) binary_expression -> . binary_expression DIVIDE binary_expression
    (241) binary_expression -> . binary_expression MOD binary_expression
    (242) binary_expression -> . binary_expression PLUS binary_expression
    (243) binary_expression -> . binary_expression MINUS binary_expression
    (244) binary_expression -> . binary_expression RSHIFT binary_expression
    (245) binary_expression -> . binary_expression LSHIFT binary_expression
    (246) binary_expression -> . binary_expression LT binary_expression
    (247) binary_expression -> . binary_expression LE binary_expression
    (248) binary_expression -> . binary_expression GE binary_expression
    (249) binary_expression -> . binary_expression GT binary_expression
    (250) binary_expression -> . binary_expression EQ binary_expression
    (251) binary_expression -> . binary_expression NE binary_expression
    (252) binary_expression -> . binary_expression AND binary_expression
    (253) binary_expression -> . binary_expression OR binary_expression
    (254) binary_expression -> . binary_expression XOR binary_expression
    (255) binary_expression -> . binary_expression LAND binary_expression
    (256) binary_expression -> . binary_expression LOR binary_expression
    (271) postfix_expression -> . primary_expression
    (272) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (273) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (274) postfix_expression -> . postfix_expression LPAREN RPAREN
    (275) postfix_expression -> . postfix_expression PERIOD ID
    (276) postfix_expression -> . postfix_expression PERIOD TYPEID
    (277) postfix_expression -> . postfix_expression ARROW ID
    (278) postfix_expression -> . postfix_expression ARROW TYPEID
    (279) postfix_expression -> . postfix_expression PLUSPLUS
    (280) postfix_expression -> . postfix_expression MINUSMINUS
    (281) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (282) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (265) unary_operator -> . AND
    (266) unary_operator -> . TIMES
    (267) unary_operator -> . PLUS
    (268) unary_operator -> . MINUS
    (269) unary_operator -> . NOT
    (270) unary_operator -> . LNOT
    (257) cast_expression -> . unary_expression
    (258) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (283) primary_expression -> . identifier
    (284) primary_expression -> . constant
    (285) primary_expression -> . unified_string_literal
    (286) primary_expression -> . unified_wstring_literal
    (287) primary_expression -> . LPAREN expression RPAREN
    (288) primary_expression -> . OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
    (294) identifier -> . ID
    (295) constant -> . INT_CONST_DEC
    (296) constant -> . INT_CONST_OCT
    (297) constant -> . INT_CONST_HEX
    (298) constant -> . INT_CONST_BIN
    (299) constant -> . FLOAT_CONST
    (300) constant -> . HEX_FLOAT_CONST
    (301) constant -> . CHAR_CONST
    (302) constant -> . WCHAR_CONST
    (303) unified_string_literal -> . STRING_LITERAL
    (304) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (305) unified_wstring_literal -> . WSTRING_LITERAL
    (306) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PPPRAGMA        shift and go to state 14
    ID              shift and go to state 163
    CASE            shift and go to state 164
    DEFAULT         shift and go to state 165
    IF              shift and go to state 167
    SWITCH          shift and go to state 170
    WHILE           shift and go to state 171
    DO              shift and go to state 172
    FOR             shift and go to state 173
    GOTO            shift and go to state 174
    BREAK           shift and go to state 175
    CONTINUE        shift and go to state 176
    RETURN          shift and go to state 177
    LBRACE          shift and go to state 101
    SEMI            reduce using rule 309 (empty -> .)
    PLUSPLUS        shift and go to state 183
    MINUSMINUS      shift and go to state 184
    SIZEOF          shift and go to state 187
    LPAREN          shift and go to state 168
    AND             shift and go to state 191
    TIMES           shift and go to state 188
    PLUS            shift and go to state 189
    MINUS           shift and go to state 190
    NOT             shift and go to state 193
    LNOT            shift and go to state 194
    OFFSETOF        shift and go to state 199
    INT_CONST_DEC   shift and go to state 200
    INT_CONST_OCT   shift and go to state 201
    INT_CONST_HEX   shift and go to state 202
    INT_CONST_BIN   shift and go to state 203
    FLOAT_CONST     shift and go to state 204
    HEX_FLOAT_CONST shift and go to state 205
    CHAR_CONST      shift and go to state 206
    WCHAR_CONST     shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    WSTRING_LITERAL shift and go to state 209

    expression_opt                 shift and go to state 166
    pragmacomp_or_statement        shift and go to state 528
    pppragma_directive             shift and go to state 282
    statement                      shift and go to state 283
    labeled_statement              shift and go to state 156
    expression_statement           shift and go to state 157
    compound_statement             shift and go to state 158
    selection_statement            shift and go to state 159
    iteration_statement            shift and go to state 160
    jump_statement                 shift and go to state 161
    brace_open                     shift and go to state 106
    expression                     shift and go to state 169
    empty                          shift and go to state 266
    assignment_expression          shift and go to state 178
    conditional_expression         shift and go to state 179
    unary_expression               shift and go to state 180
    binary_expression              shift and go to state 181
    postfix_expression             shift and go to state 182
    unary_operator                 shift and go to state 185
    cast_expression                shift and go to state 186
    primary_expression             shift and go to state 192
    identifier                     shift and go to state 195
    constant                       shift and go to state 196
    unified_string_literal         shift and go to state 197
    unified_wstring_literal        shift and go to state 198

state 526

    (212) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .

    ID              reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    CASE            reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    DEFAULT         reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    IF              reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    SWITCH          reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    WHILE           reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    DO              reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    FOR             reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    GOTO            reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    BREAK           reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    CONTINUE        reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    RETURN          reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    PPPRAGMA        reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    LBRACE          reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    CONST           reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    RESTRICT        reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    VOLATILE        reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    AUTO            reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    REGISTER        reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    STATIC          reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    EXTERN          reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    TYPEDEF         reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    INLINE          reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    TYPEID          reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    ENUM            reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    VOID            reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    _BOOL           reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    CHAR            reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    SHORT           reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    INT             reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    LONG            reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    FLOAT           reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    DOUBLE          reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    _COMPLEX        reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    SIGNED          reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    UNSIGNED        reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    __INT128        reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    STRUCT          reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    UNION           reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    PLUSPLUS        reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    MINUSMINUS      reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    SIZEOF          reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    LPAREN          reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    AND             reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    TIMES           reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    PLUS            reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    MINUS           reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    NOT             reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    LNOT            reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    OFFSETOF        reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    INT_CONST_DEC   reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    INT_CONST_OCT   reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    INT_CONST_HEX   reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    INT_CONST_BIN   reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    FLOAT_CONST     reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    HEX_FLOAT_CONST reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    CHAR_CONST      reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    WCHAR_CONST     reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    STRING_LITERAL  reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    WSTRING_LITERAL reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    SEMI            reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    RBRACE          reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    ELSE            reduce using rule 212 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)


state 527

    (291) offsetof_member_designator -> offsetof_member_designator LBRACKET expression RBRACKET .

    RPAREN          reduce using rule 291 (offsetof_member_designator -> offsetof_member_designator LBRACKET expression RBRACKET .)
    PERIOD          reduce using rule 291 (offsetof_member_designator -> offsetof_member_designator LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 291 (offsetof_member_designator -> offsetof_member_designator LBRACKET expression RBRACKET .)


state 528

    (211) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .

    ID              reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    CASE            reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    DEFAULT         reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    IF              reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    SWITCH          reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    WHILE           reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    DO              reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    FOR             reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    GOTO            reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    BREAK           reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    CONTINUE        reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    RETURN          reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    PPPRAGMA        reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    LBRACE          reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    CONST           reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    RESTRICT        reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    VOLATILE        reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    AUTO            reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    REGISTER        reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    STATIC          reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    EXTERN          reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    TYPEDEF         reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    INLINE          reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    TYPEID          reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    ENUM            reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    VOID            reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    _BOOL           reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    CHAR            reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    SHORT           reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    INT             reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    LONG            reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    FLOAT           reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    DOUBLE          reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    _COMPLEX        reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    SIGNED          reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    UNSIGNED        reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    __INT128        reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    STRUCT          reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    UNION           reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    PLUSPLUS        reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    MINUSMINUS      reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    SIZEOF          reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    LPAREN          reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    AND             reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    TIMES           reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    PLUS            reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    MINUS           reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    NOT             reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    LNOT            reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    OFFSETOF        reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    INT_CONST_DEC   reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    INT_CONST_OCT   reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    INT_CONST_HEX   reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    INT_CONST_BIN   reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    FLOAT_CONST     reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    HEX_FLOAT_CONST reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    CHAR_CONST      reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    WCHAR_CONST     reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    STRING_LITERAL  reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    WSTRING_LITERAL reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    SEMI            reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    RBRACE          reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)
    ELSE            reduce using rule 211 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 282 resolved as shift
WARNING: shift/reduce conflict for CASE in state 282 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 282 resolved as shift
WARNING: shift/reduce conflict for IF in state 282 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 282 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 282 resolved as shift
WARNING: shift/reduce conflict for DO in state 282 resolved as shift
WARNING: shift/reduce conflict for FOR in state 282 resolved as shift
WARNING: shift/reduce conflict for GOTO in state 282 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 282 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 282 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 282 resolved as shift
WARNING: shift/reduce conflict for PPPRAGMA in state 282 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 282 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 282 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 282 resolved as shift
WARNING: shift/reduce conflict for SIZEOF in state 282 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 282 resolved as shift
WARNING: shift/reduce conflict for AND in state 282 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 282 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 282 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 282 resolved as shift
WARNING: shift/reduce conflict for NOT in state 282 resolved as shift
WARNING: shift/reduce conflict for LNOT in state 282 resolved as shift
WARNING: shift/reduce conflict for OFFSETOF in state 282 resolved as shift
WARNING: shift/reduce conflict for INT_CONST_DEC in state 282 resolved as shift
WARNING: shift/reduce conflict for INT_CONST_OCT in state 282 resolved as shift
WARNING: shift/reduce conflict for INT_CONST_HEX in state 282 resolved as shift
WARNING: shift/reduce conflict for INT_CONST_BIN in state 282 resolved as shift
WARNING: shift/reduce conflict for FLOAT_CONST in state 282 resolved as shift
WARNING: shift/reduce conflict for HEX_FLOAT_CONST in state 282 resolved as shift
WARNING: shift/reduce conflict for CHAR_CONST in state 282 resolved as shift
WARNING: shift/reduce conflict for WCHAR_CONST in state 282 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 282 resolved as shift
WARNING: shift/reduce conflict for WSTRING_LITERAL in state 282 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 491 resolved as shift
WARNING: reduce/reduce conflict in state 282 resolved using rule (statement -> pppragma_directive)
WARNING: rejected rule (empty -> <empty>) in state 282
